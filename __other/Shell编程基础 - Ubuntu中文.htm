<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0067)http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80 -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
               
		<meta name="verify-v1" content="tQmdIA0A40oxMSeeRiXDaxmk+ZMoOvRptLxa4dt7C+w=">
                <meta http-equiv="Content-Style-Type" content="text/css">
		<meta name="generator" content="MediaWiki 1.15.3">
		<meta name="keywords" content="Shell编程基础">
		<link rel="alternate" type="application/x-wiki" title="编辑" href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit">
		<link rel="edit" title="编辑" href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit">
		<link rel="shortcut icon" href="http://wiki.ubuntu.org.cn/favicon.ico">
		<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.ubuntu.org.cn/opensearch_desc.php" title="Ubuntu中文 (zh)">
		<link rel="alternate" type="application/rss+xml" title="Ubuntu中文的RSS订阅" href="http://wiki.ubuntu.org.cn/index.php?title=Special:%E6%9C%80%E8%BF%91%E6%9B%B4%E6%94%B9&feed=rss">
		<link rel="alternate" type="application/atom+xml" title="Ubuntu中文的Atom订阅" href="http://wiki.ubuntu.org.cn/index.php?title=Special:%E6%9C%80%E8%BF%91%E6%9B%B4%E6%94%B9&feed=atom">
                <title>Shell编程基础 - Ubuntu中文</title>
                <link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/shared.css" type="text/css" media="screen">
		<link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/commonPrint.css" type="text/css" media="print">
		<link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/main.css" type="text/css" media="screen">
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/index.php" type="text/css">
		<link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/index(1).php" type="text/css" media="print">
		<link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/index(2).php" type="text/css">
		<link rel="stylesheet" href="./Shell编程基础 - Ubuntu中文_files/index(3).php" type="text/css">
                <!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?207"></script>
                <meta http-equiv="imagetoolbar" content="no" /><![endif]-->

                <script type="text/javascript">/*<![CDATA[*/
		var skin = "ubuntuchina";
		var stylepath = "/skins";
		var wgArticlePath = "/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://wiki.ubuntu.org.cn";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Shell编程基础";
		var wgTitle = "Shell编程基础";
		var wgAction = "view";
		var wgArticleId = "116";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "zh";
		var wgContentLanguage = "zh";
		var wgBreakFrames = false;
		var wgCurRevisionId = 152149;
		var wgVersion = "1.15.3";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script><style type="text/css"></style>
                
                <script type="text/javascript" src="./Shell编程基础 - Ubuntu中文_files/wikibits.js"><!-- wikibits js --></script><style type="text/css">@import "/skins/ubuntuchina/KHTMLFixes.css";</style>
                <script type="text/javascript" src="./Shell编程基础 - Ubuntu中文_files/index(4).php"><!-- site js --></script>
                <!-- Head Scripts -->
		<script type="text/javascript" src="./Shell编程基础 - Ubuntu中文_files/ajax.js"></script>
</head>

<body>
<div id="container">
	<div id="mastWrapper">
        <div id="masthead">
            <div id="nav1">
                <ul>

				         <li><a href="http://www.ubuntu.org.cn/">Ubuntu</a></li>
                                         <li><a href="http://forum.ubuntu.org.cn/">Forum</a></li>
                                         <li id="current"><a href="http://wiki.ubuntu.org.cn/">Wiki</a></li>
                                         <li><a href="http://linux.ubuntu.org.cn/">Linux</a></li>
                                         <li><a href="http://paste.ubuntu.org.cn/">Paste</a></li>
                                         <li><a href="http://webchat.freenode.net/?channels=ubuntu-cn">Chat</a></li>

                </ul>
            </div>
        		<form name="searchform" action="http://wiki.ubuntu.org.cn/Special:%E6%90%9C%E7%B4%A2" id="search">
    			<div style="text-align:right">
    			<label for="q">搜索</label>
    			<input id="q" name="search" type="text" accesskey="f" value="">
    			<input type="submit" name="go" class="searchButton" id="searchGoButton" value="进入">&nbsp;<input type="submit" name="fulltext" class="searchButton" value="搜索">
    	       </div>
    		</form>
    	</div>
    	<div id="bar">
    		<ul>
    		   	<li class="selected"><a href="./Shell编程基础 - Ubuntu中文_files/Shell编程基础 - Ubuntu中文.htm">页面</a></li><li class="new"><a href="http://wiki.ubuntu.org.cn/index.php?title=Talk:Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&redlink=1">讨论</a></li><li><a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit">编辑</a></li><li><a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=history">历史</a></li><li><a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&variant=zh-hans">简体</a></li><li><a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&variant=zh-hant">繁体</a></li>    		</ul>
        </div>
    </div>
    <p>&nbsp;</p>
	<div id="mBody">
	
		<div id="side">
			<ul id="nav">
								<li><span>导航</span>
						<ul>
										<li id="n-mainpage-description"><a href="http://wiki.ubuntu.org.cn/%E9%A6%96%E9%A1%B5">首页</a></li>
										<li id="n-recentchanges"><a href="http://wiki.ubuntu.org.cn/Special:%E6%9C%80%E8%BF%91%E6%9B%B4%E6%94%B9">最近更改</a></li>
										<li id="n-randompage"><a href="http://wiki.ubuntu.org.cn/Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2">随机页面</a></li>
										<li id="n-页面分类"><a href="http://wiki.ubuntu.org.cn/Category:%E9%A1%B5%E9%9D%A2%E5%88%86%E7%B1%BB">页面分类</a></li>
										<li id="n-help"><a href="http://wiki.ubuntu.org.cn/Help:%E7%9B%AE%E5%BD%95">帮助</a></li>
									</ul>
					</li>
								<li><span>编辑</span>
						<ul>
										<li id="n-编辑指南"><a href="http://wiki.ubuntu.org.cn/Category:%E8%B4%A1%E7%8C%AE">编辑指南</a></li>
										<li id="n-沙盒"><a href="http://wiki.ubuntu.org.cn/%E6%B2%99%E7%9B%92">沙盒</a></li>
										<li id="n-currentevents"><a href="http://wiki.ubuntu.org.cn/Ubuntu%E4%B8%AD%E6%96%87:%E5%BD%93%E5%89%8D%E4%BA%8B%E4%BB%B6">当前事件</a></li>
										<li id="n-字词处理"><a href="http://wiki.ubuntu.org.cn/MediaWiki:Conversiontable/zh-hant">字词处理</a></li>
									</ul>
					</li>
								<li><span>工具箱</span>
					<ul>
					  					  <li id="t-whatlinkshere"><a href="http://wiki.ubuntu.org.cn/Special:%E9%93%BE%E5%85%A5%E9%A1%B5%E9%9D%A2/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80">链入页面</a></li>
					  					  <li id="t-recentchangeslinked"><a href="http://wiki.ubuntu.org.cn/Special:%E9%93%BE%E5%87%BA%E6%9B%B4%E6%94%B9/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80">链出更改</a></li>
					  				      				      				      				      				      				      				      				      				      <li id="t-specialpages"><a href="http://wiki.ubuntu.org.cn/Special:%E7%89%B9%E6%AE%8A%E9%A1%B5%E9%9D%A2">所有特殊页面</a></li>				      					</ul>
				</li>
				<li><span>个人工具</span>
					<ul>
					<li id="pt-login"><a href="http://wiki.ubuntu.org.cn/index.php?title=Special:%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95&returnto=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80">登录</a></li>					</ul>
				</li>
							</ul>
		</div><!-- end of SIDE div -->
		
		<div id="mainContent">
			
			<h1>Shell编程基础</h1>
			<h3 id="siteSub">出自Ubuntu中文</h3>
			<div id="contentSub"></div>
									<!-- start content -->
			<p>本文作者：Leal
</p><p>授权许可：
</p>
<ul><li> <a href="http://creativecommons.org/licenses/by-sa/2.0/" class="external text" title="http://creativecommons.org/licenses/by-sa/2.0/" rel="nofollow">创作共享协议</a>
</li><li> <a href="http://www.gnu.org/copyleft/fdl.html" class="external text" title="http://www.gnu.org/copyleft/fdl.html" rel="nofollow">GNU自由文档许可证</a>
</li></ul>
<p>编辑人员：FireHare, Dbzhang800
</p><p><br>
</p><p>我们可以使用任意一种文字编辑器，比如gedit、kedit、emacs、vi等来编写shell脚本，它必须以如下行开始（必须放在文件的第一行）： 
</p>
<pre>#!/bin/bash
...
</pre>
<p><br>
注意：最好使用“!/bin/bash”而不是“!/bin/sh”，如果使用tc shell改为tcsh，其他类似。 
</p><p>符号#!用来告诉系统执行该脚本的程序，本例使用/bin/bash。编辑结束并保存后，如果要执行该脚本，必须先使其可执行： 
</p>
<pre>chmod +x filename

</pre>
<p>此后在该脚本所在目录下，输入 ./filename 即可执行该脚本。 
</p><p><br>
</p>
<table id="toc" class="toc" summary="目录"><tbody><tr><td><div id="toctitle"><h2>目录</h2> <span class="toctoggle">[<a id="togglelink" class="internal" href="javascript:toggleToc()">隐藏</a>]</span></div>
<ul>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E5.8F.98.E9.87.8F.E8.B5.8B.E5.80.BC.E5.92.8C.E5.BC.95.E7.94.A8"><span class="tocnumber">1</span> <span class="toctext">变量赋值和引用</span></a></li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#Shell.E9.87.8C.E7.9A.84.E6.B5.81.E7.A8.8B.E6.8E.A7.E5.88.B6"><span class="tocnumber">2</span> <span class="toctext">Shell里的流程控制</span></a>
<ul>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#if_.E8.AF.AD_.E5.8F.A5"><span class="tocnumber">2.1</span> <span class="toctext">if 语 句</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.26.26_.E5.92.8C_.7C.7C_.E6.93.8D.E4.BD.9C.E7.AC.A6"><span class="tocnumber">3</span> <span class="toctext">&amp;&amp; 和 || 操作符</span></a>
<ul>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#case_.E8.AF.AD.E5.8F.A5"><span class="tocnumber">3.1</span> <span class="toctext">case 语句</span></a></li>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#select_.E8.AF.AD.E5.8F.A5"><span class="tocnumber">3.2</span> <span class="toctext">select 语句</span></a></li>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#while.2Ffor_.E5.BE.AA.E7.8E.AF"><span class="tocnumber">3.3</span> <span class="toctext">while/for 循环</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#Shell.E9.87.8C.E7.9A.84.E4.B8.80.E4.BA.9B.E7.89.B9.E6.AE.8A.E7.AC.A6.E5.8F.B7"><span class="tocnumber">4</span> <span class="toctext">Shell里的一些特殊符号</span></a>
<ul>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E5.BC.95.E5.8F.B7"><span class="tocnumber">4.1</span> <span class="toctext">引号</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#Here_Document"><span class="tocnumber">5</span> <span class="toctext">Here Document</span></a></li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#Shell.E9.87.8C.E7.9A.84.E5.87.BD.E6.95.B0"><span class="tocnumber">6</span> <span class="toctext">Shell里的函数</span></a></li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E5.91.BD.E4.BB.A4.E8.A1.8C.E5.8F.82.E6.95.B0"><span class="tocnumber">7</span> <span class="toctext">命令行参数</span></a></li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#Shell.E8.84.9A.E6.9C.AC.E7.A4.BA.E4.BE.8B"><span class="tocnumber">8</span> <span class="toctext">Shell脚本示例</span></a>
<ul>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E4.B8.80.E8.88.AC.E7.BC.96.E7.A8.8B.E6.AD.A5.E9.AA.A4"><span class="tocnumber">8.1</span> <span class="toctext">一般编程步骤</span></a></li>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E4.BA.8C.E8.BF.9B.E5.88.B6.E5.88.B0.E5.8D.81.E8.BF.9B.E5.88.B6.E7.9A.84.E8.BD.AC.E6.8D.A2"><span class="tocnumber">8.2</span> <span class="toctext">二进制到十进制的转换</span></a></li>
<li class="toclevel-2"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E6.96.87.E4.BB.B6.E5.BE.AA.E7.8E.AF.E6.8B.B7.E8.B4.9D"><span class="tocnumber">8.3</span> <span class="toctext">文件循环拷贝</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80#.E8.84.9A.E6.9C.AC.E8.B0.83.E8.AF.95"><span class="tocnumber">9</span> <span class="toctext">脚本调试</span></a></li>
</ul>
</td></tr></tbody></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "显示"; var tocHideText = "隐藏"; showTocToggle(); } </script>
<a name=".E5.8F.98.E9.87.8F.E8.B5.8B.E5.80.BC.E5.92.8C.E5.BC.95.E7.94.A8" id=".E5.8F.98.E9.87.8F.E8.B5.8B.E5.80.BC.E5.92.8C.E5.BC.95.E7.94.A8"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=1" title="编辑段落：变量赋值和引用">编辑</a>]</span> <span class="mw-headline"> 变量赋值和引用  </span></h3>
<p>Shell编程中，使用变量无需事先声明，同时变量名的命名须遵循如下规则： 
</p>
<ol><li>首个字符必须为字母（a-z，A-Z） 或者_
</li><li>中间不能有空格，可以使用下划线（_） 
</li><li>不能使用其他标点符号 
</li></ol>
<p>需要给变量赋值时，可以这么写： 
</p>
<pre>变量名=值 
</pre>
<p>要取用一个变量的值，只需在变量名前面加一个$
( 注意: 给变量赋值的时候，不能在"="两边留空格 ) 
</p>
<pre>#!/bin/bash
# 对变量赋值：
a="hello world"  #等号两边均不能有空格存在
# 打印变量a的值：
echo "A is:" $a

</pre>
<p>挑个自己喜欢的编辑器，输入上述内容，并保存为文件first，然后执行 chmod +x first 使其可执行，最后输入 ./first 执行该脚本。其输出结果如下：&nbsp; 
</p>
<pre>A is: hello world

</pre>
<p>有时候变量名可能会和其它文字混淆，比如： 
</p>
<pre>num=2
echo "this is the $numnd"

</pre>
<p>上述脚本并不会输出"this is the 2nd"而是"this is the "；这是由于shell会去搜索变量numnd的值，而实际上这个变量此时并没有值。这时，我们可以用花括号来告诉shell要打印的是num变量： 
</p>
<pre>num=2
echo "this is the ${num}nd"

</pre>
<p>其输出结果为：this is the 2nd 
</p><p><br>
注意花括号的位置：
</p>
<pre>num=2
echo "this is the {$num}nd"

</pre>
<p>其输出结果为：this is the {2}nd 
</p><p><br>
需要注意shell的默认赋值是字符串赋值。比如：
</p>
<pre>var=1
var=$var+1
echo $var
</pre>
<p>打印出来的不是2而是1＋1。为了达到我们想要的效果有以下几种表达方式：
</p>
<pre>let "var+=1"
var="$[$var+1]"
 ((var++))
var=$(($var+1))
var="$(expr "$var" + 1)" #不建议使用
var="`expr "$var" + 1`" #强烈不建议使用，注意加号两边的空格，否则还是按照字符串的方式赋值,`为Esc下方的`，而不是单引号'。
</pre>
<p>注意：前2种方式在bash下有效，在sh下会出错。
</p><p>let表示数学运算，expr用于整数值运算，每一项用空格隔开，$[]将中括号内的表达式作为数学运算先计算结果再输出。
</p><p>Shell脚本中有许多变量是系统自动设定的，我们将在用到这些变量时再作说明。除了只在脚本内有效的普通shell变量外，还有环境变量，即那些由export关键字处理过的变量。本文不讨论环境变量，因为它们一般只在登录脚本中用到。
</p>
<a name="Shell.E9.87.8C.E7.9A.84.E6.B5.81.E7.A8.8B.E6.8E.A7.E5.88.B6" id="Shell.E9.87.8C.E7.9A.84.E6.B5.81.E7.A8.8B.E6.8E.A7.E5.88.B6"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=2" title="编辑段落：Shell里的流程控制">编辑</a>]</span> <span class="mw-headline">  Shell里的流程控制 </span></h2>
<a name="if_.E8.AF.AD_.E5.8F.A5" id="if_.E8.AF.AD_.E5.8F.A5"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=3" title="编辑段落：if 语 句">编辑</a>]</span> <span class="mw-headline">  if 语 句 </span></h3>
<p>"if"表达式如果条件为真，则执行then后的部分:
</p>
<pre>if ....; then
  ....
elif ....; then
  ....
else
  ....
fi
</pre>
<p>大多数情况下，可以使用测试命令来对条件进行测试，比如可以比较字符串、判断文件是否存在及是否可读等等……通常用" [ ] "来表示条件测试，注意这里的空格很重要，要确保方括号前后的空格。
</p>
<dl><dt>[ -f "somefile" ] ：判断是否是一个文件
</dt><dt>[ -x "/bin/ls" ] ：判断/bin/ls是否存在并有可执行权限
</dt><dt>[ -n "$var" ] ：判断$var变量是否有值
</dt><dt>[ "$a" = "$b" ] ：判断$a和$b是否相等
</dt></dl>
<p>执行man test可以查看所有测试表达式可以比较和判断的类型。下面是一个简单的if语句：
</p>
<pre>#!/bin/bash

if [ ${SHELL} = "/bin/bash" ]; then
   echo "your login shell is the bash (bourne again shell)"
else
   echo "your login shell is not bash but ${SHELL}"
fi
</pre>
<p>变量$SHELL包含有登录shell的名称，我们拿它和/bin/bash进行比较以判断当前使用的shell是否为bash。
</p>
<a name=".26.26_.E5.92.8C_.7C.7C_.E6.93.8D.E4.BD.9C.E7.AC.A6" id=".26.26_.E5.92.8C_.7C.7C_.E6.93.8D.E4.BD.9C.E7.AC.A6"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=4" title="编辑段落：&amp;&amp; 和 || 操作符">编辑</a>]</span> <span class="mw-headline"> &amp;&amp; 和 || 操作符</span></h2>
<p>熟悉C语言的朋友可能会喜欢下面的表达式：
</p>
<pre>[ -f "/etc/shadow" ] &amp;&amp; echo "This computer uses shadow passwords"
</pre>
<p>这里的 &amp;&amp; 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句，你也可以把它看作逻辑运算里的与操作。上述脚本表示如果/etc/shadow文件存在，则打印“This computer uses shadow passwords”。同样shell编程中还可以用或操作(||)，例如：
</p>
<pre>#!/bin/bash

mailfolder=/var/spool/mail/james
[ -r "$mailfolder" ] || { echo "Can not read $mailfolder"&nbsp;; exit 1; }
echo "$mailfolder has mail from:"
grep "^From " $mailfolder
</pre>
<p>该脚本首先判断mailfolder是否可读，如果可读则打印该文件中以"From"开头的行。如果不可读则或操作生效，打印错误信息后脚本退出。需要注意的是，这里我们必须使用如下两个命令：
</p>
<dl><dd>-打印错误信息
</dd></dl>
<dl><dd>-退出程序
</dd></dl>
<p>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用；普通函数稍后再作说明。即使不用与和或操作符，我们也可以用if表达式完成任何事情，但是使用与或操作符会更便利很多 。
</p>
<a name="case_.E8.AF.AD.E5.8F.A5" id="case_.E8.AF.AD.E5.8F.A5"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=5" title="编辑段落：case 语句">编辑</a>]</span> <span class="mw-headline"> case 语句</span></h3>
<p>case表达式可以用来匹配一个给定的字符串，而不是数字（可别和C语言里的switch...case混淆）。
</p>
<pre>case ... in
   ...) do something here 
  &nbsp;;;
esac
</pre>
<p>file命令可以辨别出一个给定文件的文件类型，如：file lf.gz，其输出结果为：
</p>
<pre>lf.gz: gzip compressed data, deflated, original filename,
last modified: Mon Aug 27 23:09:18 2001, os: Unix
</pre>
<p>我们利用这点写了一个名为smartzip的脚本，该脚本可以自动解压bzip2, gzip和zip 类型的压缩文件：
</p>
<pre> #!/bin/bash

 ftype="$(file "$1")"
 case "$ftype" in
 "$1: Zip archive"*)
    unzip "$1"&nbsp;;;
 "$1: gzip compressed"*)
    gunzip "$1"&nbsp;;;
 "$1: bzip2 compressed"*)
    bunzip2 "$1"&nbsp;;;
 *) echo "File $1 can not be uncompressed with smartzip";;
 esac
</pre>
<p>你可能注意到上面使用了一个特殊变量$1，该变量包含有传递给该脚本的第一个参数值。也就是说，当我们运行：
</p>
<pre>smartzip articles.zip
</pre>
<p>$1 就是字符串 articles.zip。
</p>
<a name="select_.E8.AF.AD.E5.8F.A5" id="select_.E8.AF.AD.E5.8F.A5"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=6" title="编辑段落：select 语句">编辑</a>]</span> <span class="mw-headline"> select 语句 </span></h3>
<p>select表达式是bash的一种扩展应用，擅长于交互式场合。用户可以从一组不同的值中进行选择： 
</p>
<pre>select var in ...&nbsp;; do
　break;
done
.... now $var can be used ....

</pre>
<p>下面是一个简单的示例： 
</p>
<pre>#!/bin/bash

echo "What is your favourite OS?"
select var in "Linux" "Gnu Hurd" "Free BSD" "Other"; do
  break;
done
echo "You have selected $var"
</pre>
<p>该脚本的运行结果如下： 
</p>
<pre>What is your favourite OS?
1) Linux
2) Gnu Hurd
3) Free BSD
4) Other
#? 1
You have selected Linux
</pre>
<a name="while.2Ffor_.E5.BE.AA.E7.8E.AF" id="while.2Ffor_.E5.BE.AA.E7.8E.AF"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=7" title="编辑段落：while/for 循环">编辑</a>]</span> <span class="mw-headline"> while/for 循环</span></h3>
<p>在shell中，可以使用如下循环：
</p>
<pre>while ...; do
   ....
done
</pre>
<p>只要测试表达式条件为真，则while循环将一直运行。关键字"break"用来跳出循环，而关键字”continue”则可以跳过一个循环的余下部分，直接跳到下一次循环中。
</p><p>for循环会查看一个字符串列表（字符串用空格分隔），并将其赋给一个变量：
</p>
<pre>for var in ....; do
   ....
done
</pre>
<p>下面的示例会把A B C分别打印到屏幕上：
</p>
<pre>#!/bin/bash

for var in A B C&nbsp;; do
   echo "var is $var"
done
</pre>
<p>下面是一个实用的脚本showrpm，其功能是打印一些RPM包的统计信息：
</p>
<pre>#!/bin/bash

# list a content summary of a number of RPM packages
# USAGE: showrpm rpmfile1 rpmfile2 ...
# EXAMPLE: showrpm /cdrom/RedHat/RPMS/*.rpm
for rpmpackage in "$@"; do
   if [ -r "$rpmpackage" ];then
      echo "=============== $rpmpackage =============="
      rpm -qi -p $rpmpackage
   else
      echo "ERROR: cannot read file $rpmpackage"
   fi
done
</pre>
<p>这里出现了第二个特殊变量$@，该变量包含有输入的所有命令行参数值。如果你运行showrpm openssh.rpm w3m.rpm webgrep.rpm，那么 "$@"(有引号) 就包含有 3 个字符串，即openssh.rpm, w3m.rpm和 webgrep.rpm。$*的意思是差不多的。但是只有一个字串。如果不加引号，带空格的参数会被截断。
</p>
<a name="Shell.E9.87.8C.E7.9A.84.E4.B8.80.E4.BA.9B.E7.89.B9.E6.AE.8A.E7.AC.A6.E5.8F.B7" id="Shell.E9.87.8C.E7.9A.84.E4.B8.80.E4.BA.9B.E7.89.B9.E6.AE.8A.E7.AC.A6.E5.8F.B7"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=8" title="编辑段落：Shell里的一些特殊符号">编辑</a>]</span> <span class="mw-headline"> Shell里的一些特殊符号</span></h2>
<a name=".E5.BC.95.E5.8F.B7" id=".E5.BC.95.E5.8F.B7"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=9" title="编辑段落：引号">编辑</a>]</span> <span class="mw-headline"> 引号 </span></h3>
<p>在向程序传递任何参数之前，程序会扩展通配符和变量。这里所谓的扩展是指程序会把通配符（比如*）替换成适当的文件名，把变量替换成变量值。我们可以使用引号来防止这种扩展，先来看一个例子，假设在当前目录下有两个jpg文件：mail.jpg和tux.jpg。
</p>
<pre>#!/bin/bash

echo *.jpg
</pre>
<p>运行结果为：
</p>
<pre>mail.jpg tux.jpg
</pre>
<p>引号（单引号和双引号）可以防止通配符*的扩展：
</p>
<pre>#!/bin/bash

echo "*.jpg"
echo '*.jpg'
</pre>
<p>其运行结果为：
</p><p><br>
</p><p><br>
</p>
<pre>*.jpg
*.jpg
</pre>
<p>其中单引号更严格一些，它可以防止任何变量扩展；而双引号可以防止通配符扩展但允许变量扩展：
</p>
<pre>#!/bin/bash

echo $SHELL
echo "$SHELL"
echo '$SHELL'
</pre>
<p>运行结果为：
</p>
<pre>/bin/bash
/bin/bash
$SHELL
</pre>
<p>此外还有一种防止这种扩展的方法，即使用转义字符——反斜杆:\：
</p>
<pre>echo \*.jpg
echo \$SHELL
</pre>
<p>输出结果为：
</p><p><br>
</p><p><br>
</p>
<pre>*.jpg
$SHELL
</pre>
<a name="Here_Document" id="Here_Document"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=10" title="编辑段落：Here Document">编辑</a>]</span> <span class="mw-headline"> Here Document </span></h2>
<p>当要将几行文字传递给一个命令时，用here document是一种不错的方法。对每个脚本写一段帮助性的文字是很有用的，此时如果使用here document就不必用echo函数一行行输出。Here document以 &lt;&lt; 开头，后面接上一个字符串，这个字符串还必须出现在here document的末尾。下面是一个例子，在该例子中，我们对多个文件进行重命名，并且使用here document打印帮助： 
</p>
<pre>#!/bin/bash

# we have less than 3 arguments. Print the help text:
if [ $# -lt 3 ]&nbsp;; then
cat &lt;&lt; HELP

ren -- renames a number of files using sed regular expressions USAGE: ren 'regexp' 'replacement' files...

EXAMPLE: rename all *.HTM files in *.html:
   ren 'HTM$' 'html' *.HTM

HELP                #这里HELP要顶格写，前面不能有空格或者TAB制表符。如果cat一行写成cat &lt;&lt; -HELP，前边可以带TAB.
   exit 0
fi
OLD="$1"
NEW="$2"
# The shift command removes one argument from the list of
# command line arguments.
shift
shift
# $@ contains now all the files:
for file in "$@"; do
   if [ -f "$file" ]&nbsp;; then
      newfile=`echo "$file" | sed "s/${OLD}/${NEW}/g"`
      if [ -f "$newfile" ]; then
　　　　   echo "ERROR: $newfile exists already"
      else
         echo "renaming $file to $newfile ..."
         mv "$file" "$newfile"
      fi
   fi
done
</pre>
<p>示例有点复杂，我们需要多花点时间来说明一番。第一个if表达式判断输入命令行参数是否小于3个 (特殊变量$# 表示包含参数的个数) 。如果输入参数小于3个，则将帮助文字传递给cat命令，然后由cat命令将其打印在屏幕上。打印帮助文字后程序退出。如果输入参数等于或大于3个，我们就将第一个参数赋值给变量OLD，第二个参数赋值给变量NEW。下一步，我们使用shift命令将第一个和第二个参数从参数列表中删除，这样原来的第三个参数就成为参数列表$*的第一个参数。然后我们开始循环，命令行参数列表被一个接一个地被赋值给变量$file。接着我们判断该文件是否存在，如果存在则通过sed命令搜索和替换来产生新的文件名。然后将反短斜线内命令结果赋值给newfile。这样我们就达到了目的：得到了旧文件名和新文件名。然后使用 mv命令进行重命名
</p>
<a name="Shell.E9.87.8C.E7.9A.84.E5.87.BD.E6.95.B0" id="Shell.E9.87.8C.E7.9A.84.E5.87.BD.E6.95.B0"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=11" title="编辑段落：Shell里的函数">编辑</a>]</span> <span class="mw-headline"> Shell里的函数  </span></h2>
<p>如果你写过比较复杂的脚本，就会发现可能在几个地方使用了相同的代码，这时如果用上函数，会方便很多。函数的大致样子如下： 
</p>
<pre>functionname()
{
# inside the body $1 is the first argument given to the function
# $2 the second ...
body
}
</pre>
<p><br> 
</p><p>函数没有必要声明。只要在执行之前出现定义就行
</p><p>下面是一个名为xtitlebar的脚本，它可以改变终端窗口的名称。这里使用了一个名为help的函数，该函数在脚本中使用了两次： 
</p>
<pre>#!/bin/bash

help()
{
cat &lt;&lt; HELP
xtitlebar -- change the name of an xterm, gnome-terminal or kde konsole
USAGE: xtitlebar [-h] "string_for_titelbar"
OPTIONS: -h help text
EXAMPLE: xtitlebar "cvs"
HELP
exit 0
}
# in case of error or if -h is given we call the function help:
[ -z "$1" ] &amp;&amp; help
[ "$1" = "-h" ] &amp;&amp; help
# send the escape sequence to change the xterm titelbar:
echo -e "\033]0;$1\007"
# </pre> 
<p>在脚本中提供帮助是一种很好的编程习惯，可以方便其他用户（和自己）使用和理解脚本。
</p>
<a name=".E5.91.BD.E4.BB.A4.E8.A1.8C.E5.8F.82.E6.95.B0" id=".E5.91.BD.E4.BB.A4.E8.A1.8C.E5.8F.82.E6.95.B0"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=12" title="编辑段落：命令行参数">编辑</a>]</span> <span class="mw-headline"> 命令行参数  </span></h2>
<p>我们已经见过$* 和 $1, $2 ... $9 等特殊变量，这些特殊变量包含了用户从命令行输入的参数。迄今为止，我们仅仅了解了一些简单的命令行语法（比如一些强制性的参数和查看帮助的-h选项）。但是在编写更复杂的程序时，您可能会发现您需要更多的自定义的选项。通常的惯例是在所有可选的参数之前加一个减号，后面再加上参数值 (比如文件名)。 
</p><p>有好多方法可以实现对输入参数的分析，但是下面的使用case表达式的例子无疑是一个不错的方法。 
</p>
<pre>#!/bin/bash
 
help()
{
   cat &lt;&lt; HELP
   This is a generic command line parser demo.
   USAGE EXAMPLE: cmdparser -l hello -f -- -somefile1 somefile2
HELP
   exit 0
}
  
while [ -n "$1" ]; do
case "$1" in
   -h) help;shift 1;; # function help is called
   -f) opt_f=1;shift 1;; # variable opt_f is set
   -l) opt_l=$2;shift 2;; # -l takes an argument -&gt; shift by 2
   --) shift;break;; # end of options
   -*) echo "error: no such option $1. -h for help";exit 1;;
   *) break;;
esac
done
 
echo "opt_f is $opt_f"
echo "opt_l is $opt_l"
echo "first arg is $1"
echo "2nd arg is $2"

</pre>
<p>你可以这样运行该脚本： 
</p>
<pre>cmdparser -l hello -f -- -somefile1 somefile2

</pre>
<p>返回结果如下： 
</p>
<pre>opt_f is 1
opt_l is hello
first arg is -somefile1
2nd arg is somefile2

</pre>
<p>这个脚本是如何工作的呢？脚本首先在所有输入命令行参数中进行循环，将输入参数与case表达式进行比较，如果匹配则设置一个变量并且移除该参数。根据unix系统的惯例，首先输入的应该是包含减号的参数。
</p>
<a name="Shell.E8.84.9A.E6.9C.AC.E7.A4.BA.E4.BE.8B" id="Shell.E8.84.9A.E6.9C.AC.E7.A4.BA.E4.BE.8B"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=13" title="编辑段落：Shell脚本示例">编辑</a>]</span> <span class="mw-headline"> Shell脚本示例</span></h2>
<a name=".E4.B8.80.E8.88.AC.E7.BC.96.E7.A8.8B.E6.AD.A5.E9.AA.A4" id=".E4.B8.80.E8.88.AC.E7.BC.96.E7.A8.8B.E6.AD.A5.E9.AA.A4"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=14" title="编辑段落：一般编程步骤">编辑</a>]</span> <span class="mw-headline"> 一般编程步骤</span></h3>
<p>现在我们来讨论编写一个脚本的一般步骤。任何优秀的脚本都应该具有帮助和输入参数。写一个框架脚本（framework.sh），该脚本包含了大多数脚本需要的框架结构，是一个非常不错的主意。这样一来，当我们开始编写新脚本时，可以先执行如下命令：
</p>
<pre>cp framework.sh myscript
</pre>
<p>然后再插入自己的函数。
</p><p>让我们来看看如下两个示例。
</p>
<a name=".E4.BA.8C.E8.BF.9B.E5.88.B6.E5.88.B0.E5.8D.81.E8.BF.9B.E5.88.B6.E7.9A.84.E8.BD.AC.E6.8D.A2" id=".E4.BA.8C.E8.BF.9B.E5.88.B6.E5.88.B0.E5.8D.81.E8.BF.9B.E5.88.B6.E7.9A.84.E8.BD.AC.E6.8D.A2"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=15" title="编辑段落：二进制到十进制的转换">编辑</a>]</span> <span class="mw-headline"> 二进制到十进制的转换 </span></h3>
<p>脚本 b2d 将二进制数 (比如 1101) 转换为相应的十进制数。这也是一个用expr命令进行数学运算的例子： 
</p>
<pre>#!/bin/bash
# vim: set sw=4 ts=4 et:
help()
{
   cat &lt;&lt; HELP
   
b2d -- convert binary to decimal
 
USAGE: b2d [-h] binarynum
 
OPTIONS: -h help text
 
EXAMPLE: b2d 111010
will return 58
HELP
   exit 0
}
 
error()
{
   # print an error and exit
   echo "$1"
   exit 1
}
 
lastchar()
{
   # return the last character of a string in $rval
   if [ -z "$1" ]; then
      # empty string
      rval=""
      return
   fi
   # wc puts some space behind the output this is why we need sed:
   numofchar=`echo -n "$1" | sed 's/ //g' | wc -c `
   # now cut out the last char
   rval=`echo -n "$1" | cut -b $numofchar`
}
 
chop()
{
   # remove the last character in string and return it in $rval
   if [ -z "$1" ]; then
      # empty string
      rval=""
      return
   fi
   # wc puts some space behind the output this is why we need sed:
   numofchar=`echo -n "$1" | wc -c | sed 's/ //g' `
   if [ "$numofchar" = "1" ]; then
      # only one char in string
      rval=""
      return
   fi
   numofcharminus1=`expr $numofchar "-" 1`
   # now cut all but the last char:
   rval=`echo -n "$1" | cut -b -$numofcharminus1` 
   #原来的 rval=`echo -n "$1" | cut -b 0-${numofcharminus1}`运行时出错.
   #原因是cut从1开始计数，应该是cut -b 1-${numofcharminus1}
}
 
while [ -n "$1" ]; do
case $1 in
   -h) help;shift 1;; # function help is called
   --) shift;break;; # end of options
   -*) error "error: no such option $1. -h for help";;
   *) break;;
esac
done

# The main program
sum=0
weight=1
# one arg must be given:
[ -z "$1" ] &amp;&amp; help
binnum="$1"
binnumorig="$1"
 
while [ -n "$binnum" ]; do
   lastchar "$binnum"
   if [ "$rval" = "1" ]; then
      sum=`expr "$weight" "+" "$sum"`
   fi
   # remove the last position in $binnum
   chop "$binnum"
   binnum="$rval"
   weight=`expr "$weight" "*" 2`
done
 
echo "binary $binnumorig is decimal $sum"
#

</pre>
<p>该脚本使用的算法是利用十进制和二进制数权值 (1,2,4,8,16,..)，比如二进制"10"可以这样转换成十进制： 
</p>
<pre>0 * 1 + 1 * 2 = 2

</pre>
<p>为了得到单个的二进制数我们是用了lastchar 函数。该函数使用wc –c计算字符个数，然后使用cut命令取出末尾一个字符。Chop函数的功能则是移除最后一个字符。
</p>
<a name=".E6.96.87.E4.BB.B6.E5.BE.AA.E7.8E.AF.E6.8B.B7.E8.B4.9D" id=".E6.96.87.E4.BB.B6.E5.BE.AA.E7.8E.AF.E6.8B.B7.E8.B4.9D"></a><h3><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=16" title="编辑段落：文件循环拷贝">编辑</a>]</span> <span class="mw-headline"> 文件循环拷贝 </span></h3>
<p>你可能有这样的需求并一直都这么做：将所有发出邮件保存到一个文件中。但是过了几个月之后，这个文件可能会变得很大以至于该文件的访问速度变慢；下面的脚本 rotatefile 可以解决这个问题。这个脚本可以重命名邮件保存文件（假设为outmail）为outmail.1，而原来的outmail.1就变成了 outmail.2 等等... 
</p>
<pre>#!/bin/bash
# vim: set sw=4 ts=4 et:
 
ver="0.1"
help()
{
   cat &lt;&lt; HELP
   rotatefile -- rotate the file name
   USAGE: rotatefile [-h] filename
   OPTIONS: -h help text
   EXAMPLE: rotatefile out
 
   This will e.g rename out.2 to out.3, out.1 to out.2, out to out.1[BR]
   and create an empty out-file
 
   The max number is 10

   version $ver

HELP

   exit 0
}
 
error()
{
   echo "$1"
   exit 1
}
 
while [ -n "$1" ]; do
   case $1 in
      -h) help;shift 1;;
      --) break;;
      -*) echo "error: no such option $1. -h for help";exit 1;;
      *) break;;
   esac
done
 
# input check:
if [ -z "$1" ]&nbsp;; then
   error "ERROR: you must specify a file, use -h for help"
fi
 
filen="$1"
# rename any .1 , .2 etc file:
for n in 9 8 7 6 5 4 3 2 1; do
   if [ -f "$filen.$n" ]; then
      p=`expr $n + 1`
      echo "mv $filen.$n $filen.$p"
      mv $filen.$n $filen.$p
   fi
done
 
# rename the original file:
if [ -f "$filen" ]; then
   echo "mv $filen $filen.1"
   mv $filen $filen.1
fi
 
echo touch $filen
touch $filen

</pre>
<p>这个脚本是如何工作的呢？在检测到用户提供了一个文件名之后，首先进行一个9到1的循环；文件名.9重命名为文件名.10，文件名.8重命名为文件名. 9……等等。循环结束之后，把原始文件命名为文件名.1，同时创建一个和原始文件同名的空文件（touch $filen）
</p>
<a name=".E8.84.9A.E6.9C.AC.E8.B0.83.E8.AF.95" id=".E8.84.9A.E6.9C.AC.E8.B0.83.E8.AF.95"></a><h2><span class="editsection">[<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=edit&section=17" title="编辑段落：脚本调试">编辑</a>]</span> <span class="mw-headline"> 脚本调试</span></h2>
<p>最简单的调试方法当然是使用echo命令。你可以在任何怀疑出错的地方用echo打印变量值，这也是大部分shell程序员花费80%的时间用于调试的原因。Shell脚本的好处在于无需重新编译，而插入一个echo命令也不需要多少时间。
</p><p>shell也有一个真正的调试模式，如果脚本"strangescript"出错，可以使用如下命令进行调试：
</p>
<pre>sh -x strangescript
</pre>
<p>7
上述命令会执行该脚本，同时显示所有变量的值。
</p><p>shell还有一个不执行脚本只检查语法的模式，命令如下：
</p>
<pre>sh -n your_script
</pre>
<p>这个命令会返回所有语法错误。
</p><p>我们希望你现在已经可以开始编写自己的shell脚本了，尽情享受这份乐趣吧！&nbsp;:)
</p>
<hr>
<hr>

<!-- 
NewPP limit report
Preprocessor node count: 21/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key ubuntuwiki:pcache:idhash:116-0!1!0!!zh!2!zh and timestamp 20150316050220 -->
<div class="printfooter">
取自“<a href="./Shell编程基础 - Ubuntu中文_files/Shell编程基础 - Ubuntu中文.htm">http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80</a>”</div>
			<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://wiki.ubuntu.org.cn/Special:%E9%A1%B5%E9%9D%A2%E5%88%86%E7%B1%BB" title="Special:页面分类">1个分类</a>: <span dir="ltr"><a href="http://wiki.ubuntu.org.cn/Category:%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91" title="Category:程序开发">程序开发</a></span></div></div>			<!-- end content -->

		</div><!-- end of MAINCONTENT div -->	
	
	</div><!-- end of MBODY div -->

	<div id="footer"><table><tbody><tr><td align="left" width="1%" nowrap="nowrap">
		</td><td align="center">
		<span id="f-viewcount">此页面已被浏览过1,795,472次。 </span>		<ul id="f-list">
			<li id="f-credits">此页由<a href="http://wiki.ubuntu.org.cn/index.php?title=User:%E9%97%B2%E4%BA%91%E6%BD%AD%E5%BD%B1&action=edit&redlink=1" class="new" title="User:闲云潭影（尚未撰写）">闲云潭影</a>于2015年1月17日 (星期六) 09:37的最后更改。 在<a href="http://wiki.ubuntu.org.cn/index.php?title=User:Lhwcool&action=edit&redlink=1" class="new" title="User:Lhwcool（尚未撰写）">lhwcool</a>、Ubuntu中文的匿名用户和<a href="http://wiki.ubuntu.org.cn/index.php?title=Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80&action=credits" title="Shell编程基础">其他</a>的工作基础上。</li>						<li id="f-about"><a href="http://wiki.ubuntu.org.cn/Ubuntu%E4%B8%AD%E6%96%87:%E5%85%B3%E4%BA%8E" title="Ubuntu中文:关于">关于Ubuntu中文</a></li>			<li id="f-disclaimer"><a href="http://wiki.ubuntu.org.cn/Ubuntu%E4%B8%AD%E6%96%87:%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E" title="Ubuntu中文:免责声明">免责声明</a></li>		</ul></td><td align="right" width="1%" nowrap="nowrap"><div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="./Shell编程基础 - Ubuntu中文_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki"></a></div></td></tr></tbody></table>

	</div><!-- end of the FOOTER div -->
</div><!-- end of the CONTAINER div -->

<!-- Served in 0.316 secs. -->


</body></html>