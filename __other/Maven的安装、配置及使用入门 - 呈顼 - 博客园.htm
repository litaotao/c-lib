<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0063)http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html -->
<html lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/analytics.js"></script><script async="" src="http://ad.cnblogs.com/ad/postmoduletext?callback=jQuery170750567612471059_1419907832437&adModuleId=2&content=Maven%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8&_=1419907833310"></script>

<title>Maven的安装、配置及使用入门 - 呈顼 - 博客园</title>
<link type="text/css" rel="stylesheet" href="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/bundle-gertrude-green.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/dcba1112/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/dcba1112/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/dcba1112/wlwmanifest.xml">
<script async="" type="text/javascript" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/gpt.js"></script><script src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/jquery.js" type="text/javascript"></script><style type="text/css"></style>  
<script type="text/javascript">var currentBlogApp = 'dcba1112', cb_enable_mathjax=false;</script>
<script src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/blog-common.js" type="text/javascript"></script>
<script async="" type="text/javascript" src="http://partner.googleadservices.com/gpt/pubads_impl_55.js"></script></head>
<body>
<a name="top"></a>

<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/dcba1112/">呈顼I渝</a></h1>
<p id="tagline"></p>
<div id="main">
	

	<div class="post">
		<h2>
			<a id="cb_post_title_url" href="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/Maven的安装、配置及使用入门 - 呈顼 - 博客园.htm">Maven的安装、配置及使用入门</a>
		</h2>
		<div id="cnblogs_post_body"><span style="color: blue;"><strong><span style="font-size: medium;">本书代码下载</span></strong></span>
<br>大家可以从我的网站下载本书的代码：http://www.juvenxu.com/mvn-in-action/，也可以通过我的网站与我取得联系，欢迎大家与我交流任何关于本书的问题和关于Maven的问题。
<br>
<br><span style="color: blue;"><strong><span style="font-size: medium;">咖啡与工具</span></strong></span>
<br>本书相当一部分的内容是在苏州十全街边的Solo咖啡馆完成的，老板Yin亲手烘焙咖啡豆、并能做出据说是苏州最好的咖啡，这小桥流水畔的温馨小
屋能够帮我消除紧张和焦虑，和Yin有一句没一句的聊天也是相当的轻松。Yin还教会了我如何自己研磨咖啡豆、手冲滴率咖啡，让我能够每天在家里也能享受
香气四溢的新鲜咖啡。
<br>本书的书稿是使用Git和Unfuddle（http://unfuddle.com/）进行管理的，书中的大量截图是通过Jing（http://www.techsmith.com/jing/）制作的。
<br>JuvenXu
<br>2010年10月于苏州Solo咖啡
<br>
<br>
<br><span style="color: blue;"><strong><span style="font-size: medium;">致谢</span></strong></span>
<br>感谢费晓峰，是你最早让我学习使用Maven，并在我开始学习的过程中给予了不少帮助。
<br>感谢Maven开源社区特别是Maven的创立者Jason Van Zyl，是你们一起创造了如此优秀的开源工具，造福了全世界这么多的开发人员。
<br>感谢我的家人，一年来，我的大部分原来属于你们的业余时间都给了这本书，感谢你们的理解和支持。
<br>感谢二少、Garin、Sutra、JTux、红人、linux_china、Chris、Jdonee、zc0922、还有很多Maven中文社区的朋友，你们给了本书不少建议，并在我写作过程中不断鼓励我和支持我，你们是我写作最大的动力之一。
<br>最后感谢本书的策划编辑杨福川和曾珊，我从你们身上学到了很多，你们是最专业的、最棒的。
<h2>
        第1章  Maven简介
        <a name="3332" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span>1.1&nbsp; 何为Maven/2</span></p>
<p><span>1.2&nbsp; 为什么需要Maven/4</span></p>
<p><span>1.3&nbsp; Maven与极限编程/7<br>1.4&nbsp; 被误解的Maven/8<br>1.5&nbsp; 小结/9</span></p>
</div>
<h2>
        1.1  何为Maven
        <a name="3333" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;">Maven这个词可以翻译为“知识的积累”，也可以翻译为“专
家”或“内行”。本书将介绍Maven这一跨平台的项目管理工具。作为Apache组织中的一个颇为成功的开源项目，Maven主要服务于基于Java平
台的项目构建、依赖管理和项目信息管理。无论是小型的开源类库项目，还是大型的企业级应用；无论是传统的瀑布式开发，还是流行的敏捷模式，Maven都能
大显身手。</span></p>
<h2><span>1.1.1&nbsp; 何为构建</span></h2>
<p><span style="font-size: small;">不管你是否意识到，构建（build）是每一位程序员每天都在做的工作。早上来
到公司，我们做的第一件事情就是从源码库签出最新的源码，然后进行单元测试，如果发现失败的测试，会找相关的同事一起调试，修复错误代码。接着回到自己的
工作上来，编写自己的单元测试及产品代码，我们会感激IDE随时报出的编译错误提示。<br>忙到午饭时间，代码编写得差不多了，测试也通过了，开心地享
用午餐，然后休息。下午先在昏昏沉沉中开了个例会，会议结束后喝杯咖啡继续工作。刚才在会上经理要求看测试报告，于是找了相关工具集成进IDE，生成了像
模像样的测试覆盖率报告，接着发了一封电子邮件给经理，松了口气。谁料QA小组又发过来了几个bug，没办法，先本地重现再说，于是熟练地用IDE生成了
一个WAR包，部署到Web容器下，启动容器。看到熟悉的界面了，遵循bug报告，一步步重现了bug……快下班的时候，bug修好了，提交代码，通知
QA小组，在愉快中结束了一天的工作。</span></p>
<p><span style="font-size: small;">仔细总结一下，我们会发现，除了编写源代码，我们每天有相当一部分时间花在了编
译、运行单元测试、生成文档、打包和部署等烦琐且不起眼的工作上，这就是构建。如果我们现在还手工这样做，那成本也太高了，于是有人用软件的方法让这一系
列工作完全自动化，使得软件的构建可以像全自动流水线一样，只需要一条简单的命令，所有烦琐的步骤都能够自动完成，很快就能得到最终结果。</span></p>
<h2>1.1.2&nbsp; Maven是优秀的构建工具</h2>
<p><span style="font-size: small;">前面介绍了Maven的用途之一是服务于构建，它是一个异常强大的构建工具，能
够帮我们自动化构建过程，从清理、编译、测试到生成报告，再到打包和部署。我们不需要也不应该一遍又一遍地输入命令，一次又一次地点击鼠标，我们要做的是
使用Maven配置好项目，然后输入简单的命令(如mvn clean install)，Maven会帮我们处理那些烦琐的任务。</span></p>
<p><span style="font-size: small;">Maven是跨平台的，这意味着无论是在Windows上，还是在Linux或者Mac上，都可以使用同样的命令。</span></p>
<p><span style="font-size: small;">我们一直在不停地寻找避免重复的方法。设计的重复、编码的重复、文档的重复，当
然还有构建的重复。Maven最大化地消除了构建的重复，抽象了构建生命周期，并且为绝大部分的构建任务提供了已实现的插件，我们不再需要定义过程，甚至
不需要再去实现这些过程中的一些任务。最简单的例子是测试，我们没必要告诉Maven去测试，更不需要告诉Maven如何运行测试，只需要遵循Maven
的约定编写好测试用例，当我们运行构建的时候，这些测试便会自动运行。</span></p>
<p><span style="font-size: small;">想象一下，Maven抽象了一个完整的构建生命周期模型，这个模型吸取了大量其
他的构建脚本和构建工具的优点，总结了大量项目的实际需求。如果遵循这个模型，可以避免很多不必要的错误，可以直接使用大量成熟的Maven插件来完成我
们的任务（很多时候我们可能都不知道自己在使用Maven插件）。此外，如果有非常特殊的需求，我们也可以轻松实现自己的插件。</span></p>
<p><span style="font-size: small;">Maven还有一个优点，它能帮助我们标准化构建过程。在Maven之前，十个项目可能有十种构建方式；有了Maven之后，所有项目的构建命令都是简单一致的，这极大地避免了不必要的学习成本，而且有利于促进项目团队的标准化。</span></p>
<p><span style="font-size: small;">综上所述，Maven作为一个构建工具，不仅能帮我们自动化构建，还能够抽象构建过程，提供构建任务实现；它跨平台，对外提供了一致的操作接口，这一切足以使它成为优秀的、流行的构建工具。</span></p>
<h2>1.1.3&nbsp; Maven不仅仅是构建工具</h2>
<p><span style="font-size: small;">Java不仅是一门编程语言，还是一个平台，通过JRuby和Jython，我
们可以在Java平台上编写和运行Ruby和Python程序。我们也应该认识到，Maven不仅是构建工具，还是一个依赖管理工具和项目信息管理工具。
它提供了中央仓库，能帮我们自动下载构件。</span></p>
<p><span style="font-size: small;">在这个开源的年代里，几乎任何Java应用都会借用一些第三方的开源类库，这些
类库都可通过依赖的方式引入到项目中来。随着依赖的增多，版本不一致、版本冲突、依赖臃肿等问题都会接踵而来。手工解决这些问题是十分枯燥的，幸运的是
Maven提供了一个优秀的解决方案，它通过一个坐标系统准确地定位每一个构件（artifact），也就是通过一组坐标Maven能够找到任何一个
Java类库（如jar文件）。Maven给这个类库世界引入了经纬，让它们变得有秩序，于是我们可以借助它来有序地管理依赖，轻松地解决那些繁杂的依赖
问题。</span></p>
<p><span style="font-size: small;">Maven还能帮助我们管理原本分散在项目中各个角落的项目信息，包括项目描
述、开发者列表、版本控制系统地址、许可证、缺陷管理系统地址等。这些微小的变化看起来很琐碎，并不起眼，但却在不知不觉中为我们节省了大量寻找信息的时
间。除了直接的项目信息，通过Maven自动生成的站点，以及一些已有的插件，我们还能够轻松获得项目文档、测试报告、静态分析报告、源码版本日志报告等
非常具有价值的项目信息。</span></p>
<p><span style="font-size: small;">Maven还为全世界的Java开发者提供了一个免费的中央仓库，在其中几乎可以找到任何的流行开源类库。通过一些Maven的衍生工具（如Nexus），我们还能对其进行快速地搜索。只要定位了坐标，Maven就能够帮我们自动下载，省去了手工劳动。</span></p>
<p><span style="font-size: small;">使用Maven还能享受一个额外的好处，即Maven对于项目目录结构、测试用
例命名方式等内容都有既定的规则，只要遵循了这些成熟的规则，用户在项目间切换的时候就免去了额外的学习成本，可以说是约定优于配置
（Convention Over Configuration）。</span></p>
</div>
<h2>
        1.2  为什么需要Maven
        <a name="3334" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Maven</span><span>不是<span lang="EN-US">Java</span>领域唯一的构建管理的解决方案。本节将通过一些简单的例子解释<span lang="EN-US">Maven</span>的必要性，并介绍其他构建解决方案，如<span lang="EN-US">IDE</span>、<span lang="EN-US">Make</span>和<span lang="EN-US">Ant</span>，并将它们与<span lang="EN-US">Maven</span>进行比较。</span></span></p>
<h2>
<span style="font-size: small;"><strong><span>1.2.1&nbsp; </span></strong><strong><span>组装<span lang="EN-US">PC</span>和品牌<span lang="EN-US">PC</span></span></strong></span>
</h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>笔者初中时开始接触计算机，到了高中时更是梦寐以求希望拥有一台自己的计算机。我的第一台计算机是赛扬<span lang="EN-US">733</span>的，选购是一个漫长的过程，我先阅读了大量的杂志以了解各类配件的优劣，<span lang="EN-US">CPU</span>、内存、主板、显卡，甚至声卡，我都仔细地挑选，后来还跑了很多商家，调货、讨价还价，组装好后自己装操作系统和驱动程序……虽然这花费了我大量时间，但我很享受这个过程。可是事实证明，装出来的机器稳定性不怎么好。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>一年前我需要配一台工作站，这时候我已经没有太多时间去研究电脑配件了。我选择了某知名<span lang="EN-US">PC</span>供应商的在线商店，大概浏览了一下主流的机型，选择了我需要的配置，然后下单、付款。接着<span lang="EN-US">PC</span>供应商帮我组装电脑、安装操作系统和驱动程序。一周后，物流公司将电脑送到我的家里，我接上显示器、电源、鼠标和键盘就能直接使用了。这为我节省了大量时间，而且这台电脑十分稳定，商家在把电脑发送给我之前已经进行了很好的测试。对了，我还能享受两年的售后服务。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>使用脚本建立高度自定义的构建系统就像买组装<span lang="EN-US">PC</span>，耗时费力，结果也不一定很好。当然，你可以享受从无到有的乐趣，但恐怕实际项目中无法给你那么多时间。使用<span lang="EN-US">Maven</span>就像购买品牌<span lang="EN-US">PC</span>，省时省力，并能得到成熟的构建系统，还能得到来自于<span lang="EN-US">Maven</span>社区的大量支持。唯一与购买品牌<span lang="EN-US">PC</span>不同的是，<span lang="EN-US">Maven</span>是开源的，你无须为此付费。如果有兴趣，你还能去了解<span lang="EN-US">Maven</span>是如何工作的，而我们无法知道那些<span lang="EN-US">PC</span>巨头的商业秘密。</span></span></p>
<h2>
<span style="font-size: small;"><strong><span>1.2.2&nbsp; IDE</span></strong><strong><span>不是万能的</span></strong></span>
</h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>当然，我们无法否认优秀的<span lang="EN-US">IDE</span>能大大提高开发效率。当前主流的<span lang="EN-US">IDE</span>如<span lang="EN-US">Eclipse</span>和<span lang="EN-US">NetBeans</span>等都提供了强大的文本编辑、调试甚至重构功能。虽然使用简单的文本编辑器和命令行也能完成绝大部分开发工作，但很少有人愿意那样做。然而，<span lang="EN-US">IDE</span>是有其天生缺陷的：</span></span></p>
<ul type="disc">
<li class="MsoNormal" style="text-align: left;">
<span style="font-size: small;"><span>IDE</span><span>依赖大量的手工操作。编译、测试、代码生成等工作都是相互独立的，很难一键完成所有工作。手工劳动往往意味着低效，意味着容易出错。</span></span>
</li>
<li class="MsoNormal" style="text-align: left;"><span style="font-size: small;"><span>很难在项目中统一所有的<span lang="EN-US">IDE</span>配置，每个人都有自己的喜好。也正是由于这个原因，一个在机器<span lang="EN-US">A</span>上可以成功运行的任务，到了机器<span lang="EN-US">B</span>的<span lang="EN-US">IDE</span>中可能就会失败。</span></span></li>
</ul>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>我们应该合理利用<span lang="EN-US">IDE</span>，而不是过多地依赖它。对于构建这样的任务，在<span lang="EN-US">IDE</span>中一次次地点击鼠标是愚蠢的行为。<span lang="EN-US">Maven</span>是这方面的专家，而且主流<span lang="EN-US">IDE</span>都集成了<span lang="EN-US">Maven</span>，我们可以在<span lang="EN-US">IDE</span>中方便地运行<span lang="EN-US">Maven</span>执行构建。</span></span></p>
<h2 class="MsoNormal" style="text-align: left;"><span style="font-size: small;"><strong><span>1.2.3&nbsp; Make</span></strong></span></h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Make</span><span>也许是最早的构建工具，它由<span lang="EN-US">Stuart
Feldman</span>于<span lang="EN-US">1977</span>年在<span lang="EN-US">Bell</span>实验室创建。<span lang="EN-US">Stuart Feldman</span>也因此于<span lang="EN-US">2003</span>年获得了<span lang="EN-US">ACM</span>国际计算机组织颁发的软件系统奖。目前<span lang="EN-US">Make</span>有很多衍生实现，包括最流行的<span lang="EN-US">GNU Make</span>和<span lang="EN-US">BSD Make</span>，还有<span lang="EN-US">Windows</span>平台的<span lang="EN-US">Microsoft nmake</span>等。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Make</span><span>由一个名为<span lang="EN-US">Makefile</span>的脚本文件驱动，该文件使用<span lang="EN-US">Make</span>自己定义的语法格式。其基本组成部分为一系列规则（<span lang="EN-US">Rules</span>），而每一条规则又包括目标（<span lang="EN-US">Target</span>）、依赖（<span lang="EN-US">Prerequisite</span>）和命令（<span lang="EN-US">Command</span>）。<span lang="EN-US">Makefile</span>的基本结构如下：</span></span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;TARGET…&nbsp;:&nbsp;PREREQUISITE…&nbsp;&nbsp;</span></span></li>
<li><span>COMMAND&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;<span>&nbsp;&nbsp;&nbsp; Make</span><span>通过一系列目标和依赖将整个构建过程串联起来，同时利用本地命令完成每个目标的实际行为。<span lang="EN-US">Make</span>的强大之处在于它可以利用所有系统的本地命令，尤其是<span lang="EN-US">UNIX/Linux</span>系统，丰富的功能、强大的命令能够帮助<span lang="EN-US">Make</span>快速高效地完成任务。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>但是，<span lang="EN-US">Make</span>将自己和操作系统绑定在一起了。也就是说，使用<span lang="EN-US">Make</span>，就不能实现（至少很难）跨平台的构建，这对于<span lang="EN-US">Java</span>来说是非常不友好的。此外，<span lang="EN-US">Makefile</span>的语法也成问题，很多人抱怨<span lang="EN-US">Make</span>构建失败的原因往往是一个难以发现的空格或<span lang="EN-US">Tab</span>使用错误。</span></span></p>
<h2 class="MsoNormal" style="text-align: left;"><span style="font-size: small;"><strong><span>1.2.4&nbsp; Ant</span></strong></span></h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Ant</span><span>不是指蚂蚁，而是意指“另一个整洁的工具”（<span lang="EN-US">Another Neat Tool</span>），它最早用来构建著名的<span lang="EN-US">Tomcat</span>，其作者<span lang="EN-US">James Duncan Davidson</span>创作它的动机就是因为受不了<span lang="EN-US">Makefile</span>的语法格式。我们可以将<span lang="EN-US">Ant</span>看成是一个<span lang="EN-US">Java</span>版本的<span lang="EN-US">Make</span>，也正因为使用了<span lang="EN-US">Java</span>，<span lang="EN-US">Ant</span>是跨平台的。此外，<span lang="EN-US">Ant</span>使用<span lang="EN-US">XML</span>定义构建脚本，相对于<span lang="EN-US">Makefile</span>来说，这也更加友好。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>与<span lang="EN-US">Make</span>类似，<span lang="EN-US">Ant</span>有一个构建脚本<span lang="EN-US">build.xml</span>，如下所示： </span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>&lt;?xml version="1.0"?&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>&lt;project name="Hello"
default="compile"&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;target name="compile"
description="compile the Java source code to class files"&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;mkdir dir="classes"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;javac srcdir="."
destdir="classes"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;/target&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;target name="jar"
depends="compile" description="create a Jar file "&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;jar destfile="hello.jar"&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 84pt;" align="left"><span style="font-size: small;"><span>&lt;fileset dir="classes" includes="**/*.class"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 84pt;" align="left"><span style="font-size: small;"><span>&lt;manifest&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 105pt;" align="left"><span style="font-size: small;"><span>&lt;attribute name="Main.Class"
value="HelloProgram"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 84pt;" align="left"><span style="font-size: small;"><span>&lt;/manifest&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;/jar&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;/target&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>&lt;/project&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>build.xml</span><span>的基本结构也是目标（<span lang="EN-US">target</span>）、依赖（<span lang="EN-US">depends</span>），以及实现目标的任务。比如在上面的脚本中，<span lang="EN-US">jar</span>目标用来创建应用程序<span lang="EN-US">jar</span>文件，该目标依赖于<span lang="EN-US">compile</span>目标，后者执行的任务是创建一个名为<span lang="EN-US">classes</span>的文件夹，编译当前目录的<span lang="EN-US">java</span>文件至<span lang="EN-US">classes</span>目录。<span lang="EN-US">compile</span>目标完成后，<span lang="EN-US">jar</span>目标再执行自己的任务。<span lang="EN-US">Ant</span>有大量内置的用<span lang="EN-US">Java</span>实现的任务，这保证了其跨平台的特质，同时，<span lang="EN-US">Ant</span>也有特殊的任务<span lang="EN-US">exec</span>来执行本地命令。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>和<span lang="EN-US">Make</span>一样，<span lang="EN-US">Ant</span>也都是过程式的，开发者显式地指定每一个目标，以及完成该目标所需要执行的任务。针对每一个项目，开发者都需要重新编写这一过程，这里其实隐含着很大的重复。<span lang="EN-US">Maven</span>是声明式的，项目构建过程和过程各个阶段所需的工作都由插件实现，并且大部分插件都是现成的，开发者只需要声明项目的基本元素，<span lang="EN-US">Maven</span>就执行内置的、完整的构建过程。这在很大程度上消除了重复。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Ant</span><span>是没有依赖管理的，所以很长一段时间<span lang="EN-US">Ant</span>用户都不得不手工管理依赖，这是一个令人头疼的问题。幸运的是，<span lang="EN-US">Ant</span>用户现在可以借助<span lang="EN-US">Ivy</span>管理依赖。而对于<span lang="EN-US">Maven</span>用户来说，依赖管理是理所当然的，<span lang="EN-US">Maven</span>不仅内置了依赖管理，更有一个可能拥有全世界最多<span lang="EN-US">Java</span>开源软件包的中央仓库，<span lang="EN-US">Maven</span>用户无须进行任何配置就可以直接享用。</span></span></p>
<h2>
<span style="font-size: small;"><strong><span>1.2.5&nbsp; </span></strong><strong><span>不重复发明轮子</span></strong></span>
</h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><strong><span style="color: #0000ff;"><span>【该小节内容整理自网友<span lang="EN-US">Arthas</span>最早在<span lang="EN-US">Maven</span>中文<span lang="EN-US">MSN</span>的群内的讨论，在此表示感谢】</span></span></strong></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>小张是一家小型民营软件公司的程序员，他所在的公司要开发一个新的<span lang="EN-US">Web</span>项目。经过协商，决定使用<span lang="EN-US">Spring</span>、<span lang="EN-US">iBatis</span>和<span lang="EN-US">Tapstry</span>。<span lang="EN-US">jar</span>包去哪里找呢？公司里估计没有人能把<span lang="EN-US">Spring</span>、<span lang="EN-US">iBatis</span>和<span lang="EN-US">Tapstry</span>所使用的<span lang="EN-US">jar</span>包一个不少地找出来。大家的做法是，先到<span lang="EN-US">Spring</span>的站点上去找一个<span lang="EN-US">spring.with.dependencies</span>，然后去<span lang="EN-US">iBatis</span>的网站上把所有列出来的<span lang="EN-US">jar</span>包下载下来，对<span lang="EN-US">Tapstry</span>、<span lang="EN-US">Apache commons</span>等执行同样的操作。项目还没有开始，<span lang="EN-US">WEB.INF/lib</span>下已经有近百个<span lang="EN-US">jar</span>包了，带版本号的、不带版本号的、有用的、没用的、相冲突的，怎一个“乱”字了得！</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>在项目开发过程中，小张不时地发现版本错误和版本冲突问题，他只能硬着头皮逐一解决。项目开发到一半，经理发现最终部署的应用的体积实在太大了，要求小张去掉一些没用的<span lang="EN-US">jar</span>包，于是小张只能加班加点地一个个删……</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>小张隐隐地觉得这些依赖需要一个框架或者系统来进行管理。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>小张喜欢学习流行的技术，前几年<span lang="EN-US">Ant</span>十分流行，他学了，并成为了公司这方面的专家。小张知道，<span lang="EN-US">Ant</span>打包，无非就是创建目录，复制文件，编译源代码，使用一堆任务，如<span lang="EN-US">copydir</span>、<span lang="EN-US">fileset</span>、<span lang="EN-US">classpath</span>、<span lang="EN-US">ref</span>、<span lang="EN-US">target</span>，然后再<span lang="EN-US">jar</span>、<span lang="EN-US">zip</span>、<span lang="EN-US">war</span>，打包就成功了。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>项目经理发话了：“兄弟们，新项目来了，小张，你来写<span lang="EN-US">Ant</span>脚本！”</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>“是，保证完成任务！”接着，小张继续创建一个新的<span lang="EN-US">XML</span>文件。<span lang="EN-US">target
clean; target compile; target jar; </span>…… 不知道他是否想过，在他写的这么多的<span lang="EN-US">Ant</span>脚本中，有多少是重复劳动，有多少代码会在一个又一个项目中重现。既然都差不多，有些甚至完全相同，为什么每次都要重新编写？</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>终于有一天，小张意识到了这个问题，想复用<span lang="EN-US">Ant</span>脚本，于是在开会时他说：“以后就都用我这个规范的<span lang="EN-US">Ant</span>脚本吧，新的项目只要遵循我定义的目录结构就可以了。”经理听后觉得很有道理：“嗯，确实是个进步。”</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>这时新来的研究生发言了：“经理，用<span lang="EN-US">Maven</span>吧，这个在开源社区很流行，比<span lang="EN-US">Ant</span>更方便。”小张一听很惊讶，<span lang="EN-US">Maven</span>真比自己的“规范化<span lang="EN-US">Ant</span>”强大？其实他不知道自己只是在重新发明轮子，<span lang="EN-US">Maven</span>已经有一大把现成的插件，全世界都在用，你自己不用写任何代码！</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>为什么没有人说“我自己写的代码最灵活，所以我不用<span lang="EN-US">Spring</span>，我自己实现<span lang="EN-US">IoC</span>；我不用<span lang="EN-US">Hibernate</span>，我自己封装<span lang="EN-US">JDBC</span>”？</span></span></p>
</div>
<h2>
        1.3  Maven与极限编程
        <a name="3336" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;">极限编程（XP）是近些年在软件行业红得发紫的敏捷开发方法，它强调拥抱变化。该软件开发方法的创始人Kent Beck提出了XP所追求的价值、实施原则和推荐实践。下面看一下Maven是如何适应XP的。<br>首先看一下Maven如何帮助XP团队实现一些核心价值：<br></span></p>
<ul>
<li><span style="font-size: small;">简单。Maven暴露了一组一致、简洁的操作接口，能帮助团队成员从原来的高度自定义的、复杂的构建系统中解脱出来，使用Maven现有的成熟的、稳定的组件也能简化构建系统的复杂度。</span></li>
<li><span style="font-size: small;">交流与反馈。与版本控制系统结合后，所有人都能执行最新的构建并快速得到反馈。此外，自动生成的项目报告也能帮助成员了解项目的状态，促进团队的交流。</span></li>
</ul>
<p><span style="font-size: small;">此外，Maven更能无缝地支持或者融入到一些主要的XP实践中：<br></span></p>
<ul>
<li><span style="font-size: small;">测试驱动开发（TDD）。TDD强调测试先行，所有产品都应该由测试用例覆盖。而测试是Maven生命周期的最重要的组成部分之一，并且Maven有现成的成熟插件支持业界流行的测试框架，如JUnit和TestNG。</span></li>
<li><span style="font-size: small;">十分钟构建。十分钟构建强调我们能够随时快速地从源码构建出最终的产品。这正是Maven所擅长的，只需要一些配置，之后用一条简单的命令就能让Maven帮你清理、编译、测试、打包、部署，然后得到最终的产品。</span></li>
<li><span style="font-size: small;">持续集成（CI）。CI强调项目以很短的周期（如15分钟）集成最新的代码。
实际上,CI的前提是源码管理系统和构建系统。目前业界流行的CI服务器如Hudson和CruiseControl都能很好地和Maven进行集成。也
就是说，使用Maven后，持续集成会变得更加方便。</span></li>
<li><span style="font-size: small;">富有信息的工作区。 
这条实践强调开发者能够快速方便地了解到项目的最新状态。当然，Maven并不会帮你把测试覆盖率报告贴到墙上，也不会在你的工作台上放个鸭子告诉你构建
失败了。不过使用Maven发布的项目报告站点，并配置你需要的项目报告，如测试覆盖率报告，都能帮你把信息推送到开发者眼前。</span></li>
</ul>
<p><span style="font-size: small;">上述这些实践并非只在XP中适用。事实上，除了其他敏捷开发方法如SCRUM之外，几乎任何软件开发方法都能借鉴这些实践。也就是说，Maven几乎能够很好地支持任何软件开发方法。<br>例
如，在传统的瀑布模型开发中，项目依次要经历需求开发、分析、设计、编码、测试和集成发布阶段。从设计和编码阶段开始，就可以使用Maven来建立项目的
构建系统。在设计阶段，也完全可以针对设计开发测试用例，然后再编写代码来满足这些测试用例。然而，有了自动化构建系统，我们可以节省很多手动的测试时
间。此外，尽早地使用构建系统集成团队的代码，对项目也是百利而无一害。最后，Maven还能帮助我们快速地发布项目。<br></span></p>
</div>
<h2>
        第2章 Maven的安装和配置
        <a name="3337" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;">第1章介绍了Maven是什么，以及为什么要使用Maven，
我们将从本章实际开始实际接触Maven。本章首先将介绍如何在主流的操作系统下安装Maven，并详细解释Maven的安装文件；其次还会介绍如何在主
流的IDE中集成Maven，以及Maven安装的最佳实践。<br>2.1 在Windows上安装Maven<br>2.2 在基于Unix的系统上安装Maven<br>2.3 安装目录分析<br>2.4 设置HTTP代理<br>2.5 安装m2eclipse<br>2.6 安装NetBeans Maven插件<br>2.7 Maven安装最佳实践<br>2.8 小结</span></p>
</div>
<h2>
        2.1 在Windows上安装Maven
        <a name="3338" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<h2>
<span lang="EN-US">2.1.1 </span><span>检查</span><span lang="EN-US">JDK</span><span>安装</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在安装</span><span lang="EN-US">Maven</span><span>之前，首先要确认你已经正确安装了</span><span lang="EN-US">JDK</span><span>。</span><span lang="EN-US">Maven</span><span>可以运行在</span><span lang="EN-US">JDK 1.4</span><span>及以上的版本上。本书的所有样例都基于</span><span lang="EN-US">JDK 5</span><span>及以上版本。打开</span><span lang="EN-US">Windows</span><span>的命令行，运行如下的命令来检查你的</span><span lang="EN-US">Java</span><span>安装：</span><span lang="EN-US"> </span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven
Xu&gt;echo %JAVA_HOME%</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven
Xu&gt;java -version</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>结果如图</span><span lang="EN-US">2-1</span><span>所示：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/e4f32577-29ad-35a7-b384-753eb4df2e37.jpg"><br>&nbsp;<span>图</span><span lang="EN-US">2-1 Windows</span><span>中检查</span><span lang="EN-US">Java</span><span>安装</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>上述命令首先检查环境变量</span><span lang="EN-US">JAVA_HOME</span><span>是否指向了正确的</span><span lang="EN-US">JDK</span><span>目录，接着尝试运行</span><span lang="EN-US">java</span><span>命令。如果</span><span lang="EN-US">Windows</span><span>无法执行</span><span lang="EN-US">java</span><span>命令，或者无法找到</span><span lang="EN-US">JAVA_HOME</span><span>环境变量。你就需要检查</span><span lang="EN-US">Java</span><span>是否安装了，或者环境变量是否设置正确。关于环境变量的设置，请参考</span><span lang="EN-US">2.1.3</span><span>节。</span></p>
<h2>
<span lang="EN-US">2.1.2 </span><span>下载</span><span lang="EN-US">Maven</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>请访问</span><span lang="EN-US">Maven</span><span>的下载页面：</span><span lang="EN-US"><a href="http://maven.apache.org/download.html">http://maven.apache.org/download.html</a></span><span>，其中包含针对不同平台的各种版本的</span><span lang="EN-US">Maven</span><span>下载文件。对于首次接触</span><span lang="EN-US">Maven</span><span>的读者来说，推荐使用</span><span lang="EN-US">Maven 3.0</span><span>，，因此下载</span><span lang="EN-US">apache-maven-3.0-bin.zip</span><span>。当然，如果你对</span><span lang="EN-US">Maven</span><span>的源代码感兴趣并想自己构建</span><span lang="EN-US">Maven</span><span>，还可以下载</span><span lang="EN-US">apache-maven-3.0 -src.zip</span><span>。该下载页面还提供了</span><span lang="EN-US">md5</span><span>校验和（</span><span lang="EN-US">checksum</span><span>）文件和</span><span lang="EN-US">asc</span><span>数字签名文件，可以用来检验</span><span lang="EN-US">Maven</span><span>分发包的正确性和安全性。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在本书编写的时候，</span><span lang="EN-US">Maven 2</span><span>的最新版本是</span><span lang="EN-US">2.2.1</span><span>，</span><span lang="EN-US">Maven 3</span><span>基本完全兼容</span><span lang="EN-US">Maven 2</span><span>，而且较之于</span><span lang="EN-US">Maven 2</span><span>它性能更好，还有不少功能的改进，如果你之前一直使用</span><span lang="EN-US">Maven 2</span><span>，现在正犹豫是否要升级，那就大可不必担心了，快点尝试下</span><span lang="EN-US">Maven 3</span><span>吧！</span><em>&nbsp;</em></p>
<h2>
<span lang="EN-US">2.1.3 </span><span>本地安装</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>将安装文件解压到你指定的目录中，如：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">D:\bin&gt;jar xvf
"C:\Users\Juven Xu\Downloads\apache-maven-3.0--bin.zip"</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>这里的</span><span lang="EN-US">Maven</span><span>安装目录是</span><span lang="EN-US">D:\bin\apache-maven-3.0</span><span>，接着需要设置环境变量，将</span><span lang="EN-US">Maven</span><span>安装配置到操作系统环境中。</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>打开系统属性面板（桌面上右键单击“我的电脑”→“属性”），点击<strong>高级系统设置</strong>，再点击<strong>环境变量</strong>，在<strong>系统变量</strong>中新建一个变量，变量名为</span><em><span lang="EN-US">M2_HOME</span></em><span>，变量值为</span><span lang="EN-US">Maven</span><span>的安装目录</span><em><span lang="EN-US">D:\bin\apache-maven-3.0</span></em><span>。点击<strong>确定</strong>，接着在系统变量中找到一个名为</span><span lang="EN-US">Path</span><span>的变量，在变量值的末尾加上</span><em><span lang="EN-US">%M2_HOME%\bin;</span></em><span>，注意多个值之间需要有分号隔开，然后点击<strong>确定</strong>。至此，环境变量设置完成，详细情况如图</span><span lang="EN-US">2-2</span><span>所示：</span></p>
<p style="text-align: center;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/e6eb45c3-d0a4-351b-9aad-d23df67422cf.jpg"></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: center; text-indent: 21pt;" align="center"><span lang="EN-US">
 
</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">2-2 Windows</span><span>中系统环境变量配置</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>这里需要提一下的是</span><span lang="EN-US">Path</span><span>环境变量，当我们在</span><span lang="EN-US">cmd</span><span>中输入命令时，</span><span lang="EN-US">Windows</span><span>首先会在当前目录中寻找可执行文件或脚本，如果没有找到，</span><span lang="EN-US">Windows</span><span>会接着遍历环境变量</span><span lang="EN-US">Path</span><span>中定义的路径。由于我们将</span><em><span lang="EN-US">%M2_HOME%\bin</span></em><span>添加到了</span><span lang="EN-US">Path</span><span>中，而这里</span><span lang="EN-US">%M2_HOME%</span><span>实际上是引用了我们前面定义的另一个变量，其值是</span><span lang="EN-US">Maven</span><span>的安装目录。因此，</span><span lang="EN-US">Windows</span><span>会在执行命令时搜索目录</span><em><span lang="EN-US">D:\bin\apache-maven-3.0\bin</span></em><span>，而</span><span lang="EN-US">mvn</span><span>执行脚本的位置就是这里。</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>明白了环境变量的作用，现在打开一个新的</span><span lang="EN-US">cmd</span><span>窗口（这里强调新的窗口是因为新的环境变量配置需要新的</span><span lang="EN-US">cmd</span><span>窗口才能生效），运行如下命令检查</span><span lang="EN-US">Maven</span><span>的安装情况：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven Xu&gt;<strong>echo %M2_HOME%</strong></span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven Xu&gt;mvn
-v </span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: left; text-indent: 21pt;"><span>运行结果如图</span><span lang="EN-US">2-3</span><span>所示：</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: center; text-indent: 21pt;"><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/5f9c6a8e-f021-3f3c-850d-aad3e71ff083.jpg" height="238" width="650"><br>&nbsp;<span>图</span><span lang="EN-US">2-3 Windows</span><span>中检查</span><span lang="EN-US">Maven</span><span>安装</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>第一条命令</span><strong><span lang="EN-US">echo %M2_HOME%</span></strong><span>用来检查环境变量</span><span lang="EN-US">M2_HOME</span><span>是否指向了正确的</span><span lang="EN-US">Maven</span><span>安装目录；而</span><strong><span lang="EN-US">mvn –version</span></strong><span>执行了第一条</span><span lang="EN-US">Maven</span><span>命令，以检查</span><span lang="EN-US">Windows</span><span>是否能够找到正确的</span><span lang="EN-US">mvn</span><span>执行脚本。</span></p>
<h2>
<span lang="EN-US">2.1.4 </span><span>升级</span><span lang="EN-US">Maven</span>
</h2>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span lang="EN-US">Maven</span><span>还比较年轻，更新比较频繁，因此用户往往会需要更新</span><span lang="EN-US">Maven</span><span>安装以获得更多更酷的新特性，以及避免一些旧的</span><span lang="EN-US">bug</span><span>。</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>在</span><span lang="EN-US">Windows</span><span>上更新</span><span lang="EN-US">Maven</span><span>非常简便，只需要下载新的</span><span lang="EN-US">Maven</span><span>安装文件，解压至本地目录，然后更新</span><span lang="EN-US">M2_HOME</span><span>环境变量便可。例如，假设</span><span lang="EN-US">Maven</span><span>推出了新版本</span><span lang="EN-US">3.1</span><span>，我们将其下载然后解压至目录</span><em><span lang="EN-US">D:\bin\apache-maven-3.1</span></em><span>，接着遵照前一节描述的步骤编辑环境变量</span><span lang="EN-US">M2_HOME</span><span>，更改其值为</span><span lang="EN-US">D:\bin\apache-maven-3.1</span><span>。至此，更新就完成了。同理，如果你需要使用某一个旧版本的</span><span lang="EN-US">Maven</span><span>，也只需要编辑</span><span lang="EN-US">M2_HOME</span><span>环境变量指向旧版本的安装目录。</span></p>
</div>
<h2>
        2.2 在基于Unix的系统上安装Maven
        <a name="3339" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">Maven</span><span>是跨平台的，它可以在任何一种主流的操作系统上运行，本节将介绍如何在基于</span><span lang="EN-US">Unix</span><span>的系统（包括</span><span lang="EN-US">Linux</span><span>、</span><span lang="EN-US">Mac OS</span><span>以及</span><span lang="EN-US">FreeBSD</span><span>等）上安装</span><span lang="EN-US">Maven</span><span>。</span></span></p>
<h2>
<span style="font-size: small;"><span lang="EN-US">2.2.1 </span><span>下载和安装</span></span>
</h2>
<p class="MsoNormal" style="margin-bottom: 12pt; text-indent: 21pt;"><span style="font-size: small;"><span>首先，与在</span><span lang="EN-US">Windows</span><span>上安装</span><span lang="EN-US">Maven</span><span>一样，需要检查</span><span lang="EN-US">JAVA_HOME</span><span>环境变量以及</span><span lang="EN-US">Java</span><span>命令，细节不再赘述，命令如下：</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:~$
echo $JAVA_HOME</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:~$
java –version</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>运行结果如图</span><span lang="EN-US">2-4</span><span>所示：</span><br></span></p>
<p style="text-align: center;"><span style="font-size: small;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/36e9efed-0a2b-316b-aa38-b07d7db76249.jpg"></span></p>
<p class="MsoNormal" style="margin-bottom: 12pt; text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 12pt 21pt; text-align: center; text-indent: 0cm;" align="center"><span style="font-size: small;"><span>图</span><span lang="EN-US">2-4 Linux</span><span>中检查</span><span lang="EN-US">Java</span><span>安装</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span>接着到</span><span lang="EN-US">http://maven.apache.org/download.html</span><span>下载</span><span lang="EN-US">Maven</span><span>安装文件，如</span><span lang="EN-US">apache-maven-3.0-bin.tar.gz</span><span lang="EN-US">，然后解压到本地目录：</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$ tar
-xvzf apache-maven-3.0-bin.tar.gz </span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>现在已经创建好了一个</span><span lang="EN-US">Maven</span><span>安装目录</span><span lang="EN-US">apache-maven-3.0</span><span>，虽然直接使用该目录配置环境变量之后就能使用</span><span lang="EN-US">Maven</span><span>了，但这里我更推荐做法是，在安装目录旁平行地创建一个符号链接，以方便日后的升级：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span class="Char0"><span style="font-size: 10.5pt;" lang="EN-US">juven@juven-ubuntu:bin$
ln -s apache-maven-3.0 apache-maven<br>
juven@juven-ubuntu:bin$ ls -l<br>
total 4<br>
lrwxrwxrwx 1 juven juven&nbsp;&nbsp; 18 2009-09-20 15:43 apache-maven -&gt;
apache-maven-3.0</span></span><span lang="EN-US"><br>
drwxr-xr-x 6 juven juven 4096 2009-09-20 15:39 apache-maven-3.0</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>接下来，我们需要设置</span><span lang="EN-US">M2_HOME</span><span>环境变量指向符号链接</span><span lang="EN-US">apache-maven-</span><span>，并且把</span><span lang="EN-US">Maven</span><span>安装目录下的</span><span lang="EN-US">bin/</span><span>文件夹添加到系统环境变量</span><span lang="EN-US">PATH</span><span>中去：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
export M2_HOME=/home/juven/bin/apache-maven<br>
juven@juven-ubuntu:bin$ export PATH=$PATH:$M2_HOME/bin</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>一般来说，需要将这两行命令加入到系统的登录</span><span lang="EN-US">shell</span><span>脚本中去，以我现在的</span><span lang="EN-US">Ubuntu
8.10</span><span>为例，编辑</span><span lang="EN-US">~/.bashrc</span><span>文件，添加这两行命令。这样，每次启动一个终端，这些配置就能自动执行。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>至此，安装完成，我们可以运行以下命令检查</span><span lang="EN-US">Maven</span><span>安装：</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
echo $M2_HOME</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
mvn –version</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt; text-align: left;"><span style="font-size: small;"><span>运行结果如图</span><span lang="EN-US">2-5</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt; text-align: center;"><span style="font-size: small;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/959d44eb-7c3b-3987-be2e-bf28c3936c8b.jpg"></span></p>
<p style="text-align: center;"><span style="font-size: small;">&nbsp;<span>图</span><span lang="EN-US">2-5 Linux</span><span>中检查</span><span lang="EN-US">Maven</span><span>安装</span></span></p>
<h2>
<span style="font-size: small;"><span lang="EN-US">2.2.2 </span><span>升级</span><span lang="EN-US">Maven</span></span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在基于</span><span lang="EN-US">Unix</span><span>的系统上，可以利用符号链接这一工具来简化</span><span lang="EN-US">Maven</span><span>的升级，不必像在</span><span lang="EN-US">Windows</span><span>上那样，每次升级都必须更新环境变量。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>前一小节中我们提到，解压</span><span lang="EN-US">Maven</span><span>安装包到本地之后，平行地创建一个符号链接，然后在配置环境变量时引用该符号链接，这样做是为了方便升级。现在，假设我们需要升级到新的</span><span lang="EN-US">Maven 3.1</span><span>版本，同理，将安装包解压到与前一版本平行的目录下，然后更新符号链接指向</span><span lang="EN-US">3.1</span><span>版的目录便可：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
rm apache-maven<br>
juven@juven-ubuntu:bin$ ln -s apache-maven-3.1/ apache-maven<br>
juven@juven-ubuntu:bin$ ls -l<br>
total 8<br>
lrwxrwxrwx 1 juven juven&nbsp;&nbsp; 17 2009-09-20 16:13 apache-maven -&gt;
apache-maven-3.1 /<br>
drwxr-xr-x 6 juven juven 4096 2009-09-20 15:39 apache-maven-3.0drwxr-xr-x 2
juven juven 4096 2009-09-20 16:09 apache-maven-3.1</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>同理，可以很方便地切换到</span><span lang="EN-US">Maven</span><span>的任意一个版本。现在升级完成了，可以运行</span><strong><span lang="EN-US">mvn -v</span></strong><span>进行检查。</span></span></p>
</div>
<h2>
        2.3 安装目录分析
        <a name="3340" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;"><span>本章前面的内容讲述了如何在各种操作系统中安装和升级</span><span lang="EN-US">Maven</span><span>。现在我们来仔细分析一下</span><span lang="EN-US">Maven</span><span>的安装文件。</span></span></p>
<h2><span style="font-size: small;"><span lang="EN-US">2.3.1 M2_HOME</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>前面我们讲到设置</span><span lang="EN-US">M2_HOME</span><span>环境变量指向</span><span lang="EN-US">Maven</span><span>的安装目录，本书之后所有使用</span><span lang="EN-US">M2_HOME</span><span>的地方都指代了该安装目录，让我们看一下该目录的结构和内容：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">bin<br>
boot<br>
conf<br>
lib<br>
LICENSE.txt<br>
NOTICE.txt<br>
README.txt</span></span></p>
<ul>
<li><span style="font-size: small;"><span style="font-family: Wingdings;"><span>&nbsp;</span></span><span lang="EN-US">Bin</span><span>：</span> <span>该目录包含了</span><span lang="EN-US">mvn</span><span>运行的脚本，这些脚本用来配置</span><span lang="EN-US">Java</span><span>命令，准备好</span><span lang="EN-US">classpath</span><span>和相关的</span><span lang="EN-US">Java</span><span>系统属性，然后执行</span><span lang="EN-US">Java</span><span>命令。其中</span><em><span lang="EN-US">mvn</span></em><span>是基于</span><span lang="EN-US">UNIX</span><span>平台的</span><span lang="EN-US">shell</span><span>脚本，</span><em><span lang="EN-US">mvn.bat</span></em><span>是基于</span><span lang="EN-US">Windows</span><span>平台的</span><span lang="EN-US">bat</span><span>脚本。在命令行输入任何一条</span><span lang="EN-US">mvn</span><span>命令时，实际上就是在调用这些脚本。该目录还包含了</span><em><span lang="EN-US">mvnDebug</span></em><span>和</span><em><span lang="EN-US">mvnDebug.bat</span></em><span>两个文件，同样，前者是</span><span lang="EN-US">UNIX</span><span>平台的</span><span lang="EN-US">shell</span><span>脚本，后者是</span><span lang="EN-US">windows</span><span>的</span><span lang="EN-US">bat</span><span>脚本。那么</span><span lang="EN-US">mvn</span><span>和</span><span lang="EN-US">mvnDebug</span><span>有什么区别和关系呢？打开文件我们就可以看到，两者基本是一样的，只是</span><span lang="EN-US">mvnDebug</span><span>多了一条</span><span lang="EN-US">MAVEN_DEBUG_OPTS</span><span>配置，作用就是在运行</span><span lang="EN-US">Maven</span><span>时开启</span><span lang="EN-US">debug</span><span>，以便调试</span><span lang="EN-US">Maven</span><span>本身。此外，该目录还包含</span><em><span lang="EN-US">m2.conf</span></em><span>文件，这是</span><span lang="EN-US">classworlds</span><span>的配置文件，稍微会介绍</span><span lang="EN-US">classworlds</span><span>。</span></span></li>
<li><span style="font-size: small;"><span lang="EN-US">Boot</span><span>：</span> <span>该目录只包含一个文件，以</span><span lang="EN-US">maven 3.0</span><span>为例，该文件为</span><em><span lang="EN-US">plexus-classworlds-2.2.3.jar</span></em><span>。</span><span lang="EN-US">plexus-classworlds</span><span>是一个类加载器框架，相对于默认的</span><span lang="EN-US">java</span><span>类加载器，它提供了更丰富的语法以方便配置，</span><span lang="EN-US">Maven</span><span>使用该框架加载自己的类库。更多关于</span><span lang="EN-US">classworlds</span><span>的信息请参考</span><span lang="EN-US"><a href="http://classworlds.codehaus.org/">http://classworlds.codehaus.org/</a></span><span>。对于一般的</span><span lang="EN-US">Maven</span><span>用户来说，不必关心该文件。</span></span></li>
<li>
<span style="font-size: small;"><span lang="EN-US">Conf</span><span>：</span> <span>该目录包含了一个非常重要的文件</span><em><span lang="EN-US">settings.xml</span></em><span>。直接修改该文件，就能在机器上全局地定制</span><span lang="EN-US">Maven</span><span>的行为。一般情况下，我们更偏向于复制该文件至</span><em><span lang="EN-US">~/.m2/</span></em><span>目录下（这里</span><span lang="EN-US">~</span><span>表示用户目录），然后修改该文件，在用户范围定制</span><span lang="EN-US">Maven</span><span>的行为。本书的后面将会多次提到该</span><span lang="EN-US">settings.xml</span><span>，并逐步分析其中的各个元素。</span></span><span style="font-size: small;">&nbsp;</span>
</li>
<li>
<span style="font-size: small;"><span lang="EN-US">Lib</span><span>：</span> <span>该目录包含了所有</span><span lang="EN-US">Maven</span><span>运行时需要的</span><span lang="EN-US">Java</span><span>类库，</span><span lang="EN-US">Maven</span><span>本身是分模块开发的，因此用户能看到诸如</span><span lang="EN-US">mavn-core-3.0.jar</span><span>、</span><span lang="EN-US">maven-model-3.0.jar</span><span>之类的文件，此外这里还包含一些</span><span lang="EN-US">Maven</span><span>用到的第三方依赖如</span><span lang="EN-US">common-cli-1.2.jar</span><span>、</span><span lang="EN-US">google-collection-1.0.jar</span><span>等等。（对于</span><span lang="EN-US">Maven 2</span><span>来说，该目录只包含一个如</span><em><span lang="EN-US">maven-2.2.1-uber.jar</span></em><span>的文件原本各为独立</span><span lang="EN-US">JAR</span><span>文件的</span><span lang="EN-US">Maven</span><span>模块和第三方类库都被拆解后重新合并到了这个</span><span lang="EN-US">JAR</span><span>文件中）。可以说，这个</span><span lang="EN-US">lib</span><span>目录就是真正的</span><span lang="EN-US">Maven</span><span>。关于该文件，还有一点值得一提的是，用户可以在这个目录中找到</span><span lang="EN-US">Maven</span><span>内置的超级</span><span lang="EN-US">POM</span><span>，这一点在</span><span lang="EN-US">8.5</span><span>小节详细解释。其他：</span> <em><span lang="EN-US">LICENSE.txt</span></em><span>记录了</span><span lang="EN-US">Maven</span><span>使用的软件许可证</span><span lang="EN-US">Apache
License Version 2.0</span><span>；</span> <em><span lang="EN-US">NOTICE.txt</span></em><span>记录了</span><span lang="EN-US">Maven</span><span>包含的第三方软件；而</span><em><span lang="EN-US">README.txt</span></em><span>则包含了</span><span lang="EN-US">Maven</span><span>的简要介绍，包括安装需求及如何安装的简要指令等等。</span></span><span style="font-size: small;">&nbsp;</span>
</li>
</ul>
<p><span style="font-size: small;">&nbsp;</span></p>
<h2><span style="font-size: small;"><span lang="EN-US">2.3.2 ~/.m2</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在讲述该小节之前，我们先运行一条简单的命令：</span><strong><span lang="EN-US">mvn help:system</span></strong><span>。该命令会打印出所有的</span><span lang="EN-US">Java</span><span>系统属性和环境变量，这些信息对我们日常的编程工作很有帮助。这里暂不解释</span><span lang="EN-US">help:system</span><span>涉及的语法，运行这条命令的目的是为了让</span><span lang="EN-US">Maven</span><span>执行一个真正的任务。我们可以从命令行输出看到</span><span lang="EN-US">Maven</span><span>会下载</span><span lang="EN-US">maven-help-plugin</span><span>，包括</span><span lang="EN-US">pom</span><span>文件和</span><span lang="EN-US">jar</span><span>文件。这些文件都被下载到了</span><span lang="EN-US">Maven</span><span>本地仓库中。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>现在打开用户目录，比如当前的用户目录是</span><em><span lang="EN-US">C:\Users\Juven Xu\</span></em><span>，你可以在</span><span lang="EN-US">Vista</span><span>和</span><span lang="EN-US">Windows7</span><span>中找到类似的用户目录。如果是更早版本的</span><span lang="EN-US">Windows</span><span>，该目录应该类似于</span><span lang="EN-US">C:\Document and Settings\Juven
Xu\</span><span>。在基于</span><span lang="EN-US">Unix</span><span>的系统上，直接输入</span><strong><span lang="EN-US">cd </span></strong><span>回车，就可以转到用户目录。为了方便，本书统一使用符号</span>
<strong><span lang="EN-US">~ </span></strong><span>指代用户目录。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在用户目录下，我们可以发现</span><span lang="EN-US">.m2</span><span>文件夹。默认情况下，该文件夹下放置了</span><span lang="EN-US">Maven</span><span>本地仓库</span><span lang="EN-US">.m2/repository</span><span>。所有的</span><span lang="EN-US">Maven</span><span>构件（</span><span lang="EN-US">artifact</span><span>）都被存储到该仓库中，以方便重用。我们可以到</span><em><span lang="EN-US">~/.m2/repository/org/apache/maven/plugins/maven-help-plugins/</span></em><span>目录下找到刚才下载的</span><span lang="EN-US">maven-help-plugin</span><span>的</span><span lang="EN-US">pom</span><span>文件和</span><span lang="EN-US">jar</span><span>文件。</span><span lang="EN-US">Maven</span><span>根据一套规则来确定任何一个构件在仓库中的位置，这一点本书第</span><span lang="EN-US">6</span><span>章将会详细阐述。由于</span><span lang="EN-US">Maven</span><span>仓库是通过简单文件系统透明地展示给</span><span lang="EN-US">Maven</span><span>用户的，有些时候可以绕过</span><span lang="EN-US">Maven</span><span>直接查看或修改仓库文件，在遇到疑难问题时，这往往十分有用。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>默认情况下，</span><em><span lang="EN-US">~/.m2</span></em><span>目录下除了</span><span lang="EN-US">repository</span><span>仓库之外就没有其他目录和文件了，不过大多数</span><span lang="EN-US">Maven</span><span>用户需要复制</span><em><span lang="EN-US">M2_HOME/conf/settings.xml</span></em><span>文件到</span><em><span lang="EN-US">~/.m2/settings.xml</span></em><span>。这是一条最佳实践，我们将在本章最后一小节详细解释。</span></span></p>
</div>
<h2>
        2.4 设置HTTP代理
        <a name="3341" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>有时候你所在的公司由于安全因素考虑，要求你使用通过安全认证的代理访问因特网。这种情况下，就需要为</span><span lang="EN-US">Maven</span><span>配置</span><span lang="EN-US">HTTP</span><span>代理，才能让它正常访问外部仓库，以下载所需要的资源。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>首先确认自己无法直接访问公共的</span><span lang="EN-US">Maven</span><span>中央仓库，直接运行命令</span><strong><span lang="EN-US">ping repo1.maven.org</span></strong><span>可以检查网络。如果真的需要代理，先检查一下代理服务器是否畅通，比如现在有一个</span><span lang="EN-US">IP</span><span>地址为</span><span lang="EN-US">218.14.227.197</span><span>，端口为</span><span lang="EN-US">3128</span><span>的代理服务，我们可以运行</span><strong><span lang="EN-US">telnet 218.14.227.197 3128</span></strong><span>来检测该地址的该端口是否畅通。如果得到出错信息，需要先获取正确的代理服务信息；如果</span><span lang="EN-US">telnet</span><span>连接正确，则输入</span><span lang="EN-US">ctrl+]</span><span>，然后</span><span lang="EN-US">q</span><span>，回车，退出即可。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>检查完毕之后，编辑</span><span lang="EN-US">~/.m2/settings.xml</span><span>文件（如果没有该文件，则复制</span><span lang="EN-US">$M2_HOME/conf/settings.xml</span><span>）。添加代理配置如下：</span></span>
</p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">&lt;settings&gt;<br>
…<span>&nbsp; </span><br>
&lt;proxies&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp; </span>&lt;proxy&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;id&gt;my-proxy&lt;/id&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;active&gt;true&lt;/active&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>&nbsp;</span>&lt;protocol&gt;http&lt;/protocol&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;host&gt;218.14.227.197&lt;/host&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;port&gt;3128&lt;/port&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;!-- </span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;username&gt;***&lt;/username&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;password&gt;***&lt;/password&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;nonProxyHosts&gt;repository.mycom.com|*.google.com&lt;/nonProxyHosts&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>--&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp; </span>&lt;/proxy&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp; </span>&lt;/proxies&gt;<br><span>&nbsp; </span>…<br>
&lt;/settings&gt;</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>这段配置十分简单，</span><span lang="EN-US">proxies</span><span>下可以有多个</span><span lang="EN-US">proxy</span><span>元素，如果你声明了多个</span><span lang="EN-US">proxy</span><span>元素，则默认情况下第一个被激活的</span><span lang="EN-US">proxy</span><span>会生效。这里声明了一个</span><span lang="EN-US">id</span><span>为</span><span lang="EN-US">my-proxy</span><span>的代理，</span><span lang="EN-US">active</span><span>的值为</span><span lang="EN-US">true</span><span>表示激活该代理，</span><span lang="EN-US">protocol</span><span>表示使用的代理协议，这里是</span><span lang="EN-US">http</span><span>。当然，最重要的是指定正确的主机名（</span><span lang="EN-US">host</span><span>元素）和端口（</span><span lang="EN-US">port</span><span>元素）。上述</span><span lang="EN-US">XML</span><span>配置中我注释掉了</span><span lang="EN-US">username</span><span>、</span><span lang="EN-US">password</span><span>、</span><span lang="EN-US">nonProxyHost</span><span>几个元素，当你的代理服务需要认证时，就需要配置</span><span lang="EN-US">username</span><span>和</span><span lang="EN-US">password</span><span>。</span><span lang="EN-US">nonProxyHost</span><span>元素用来指定哪些主机名不需要代理，可以使用</span><span lang="EN-US"> | </span><span>符号来分隔多个主机名。此外，该配置也支持通配符，如</span><span lang="EN-US">*.google.com</span><span>表示所有以</span><span lang="EN-US">google.com</span><span>结尾的域名访问都不要通过代理。</span></span></p>
</div>
<h2>
        2.5 安装m2eclipse
        <a name="3342" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">Eclipse</span><span>是一款非常优秀的</span><span lang="EN-US">IDE</span><span>。除了基本的语法标亮、代码补齐、</span><span lang="EN-US">XML</span><span>编辑等基本功能外，最新版的</span><span lang="EN-US">Eclipse</span><span>还能很好地支持重构，并且集成了</span><span lang="EN-US">JUnit</span><span>、</span><span lang="EN-US">CVS</span><span>、</span><span lang="EN-US">Mylyn</span><span>等各种流行工具。可惜</span><span lang="EN-US">Eclipse</span><span>默认没有集成对</span><span lang="EN-US">Maven</span><span>的支持。幸运的是，由</span><span lang="EN-US">Maven</span><span>之父</span><span lang="EN-US">Jason Van Zyl</span><span>创立的</span><span lang="EN-US">Sonatype</span><span>公司建立了</span><span lang="EN-US">m2eclipse</span><span>项目，这是</span><span lang="EN-US">Eclipse</span><span>下的一款十分强大的</span><span lang="EN-US">Maven</span><span>插件，可以访问</span><span lang="EN-US"><a href="http://m2eclipse.sonatype.org/">http://m2eclipse.sonatype.org/</a> </span><span>了解更多该项目的信息。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本小节将先介绍如何安装</span><span lang="EN-US">m2eclipse</span><span>插件，本书后续的章节会逐步介绍</span><span lang="EN-US">m2eclipse</span><span>插件的使用。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>现在我以</span><span lang="EN-US">Eclipse 3.6</span><span>为例逐步讲解</span><span lang="EN-US">m2eclipse</span><span>的安装。启动</span><span lang="EN-US">Eclipse</span><span>之后，在菜单栏中选择</span><strong><span lang="EN-US">Help</span></strong><span>，然后选择</span><strong><span lang="EN-US">Install New Software…</span></strong><span>，接着你会看到一个</span><span lang="EN-US">Install</span><span>对话框，点击</span><strong><span lang="EN-US">Work with:</span></strong><span>字段边上的</span><strong><span lang="EN-US">Add</span></strong><strong><span>按钮</span></strong><span>，你会得到一个新的</span><span lang="EN-US">Add Repository</span><span>对话框，在</span><strong><span lang="EN-US">Name</span></strong><span>字段中输入</span><em><span lang="EN-US">m2e</span></em><span>，</span><span lang="EN-US">Location</span><span>字段中输入</span><span lang="EN-US"><a href="http://m2eclipse.sonatype.org/sites/m2e">http://m2eclipse.sonatype.org/sites/m2e</a></span><span>，然后点击</span><strong><span lang="EN-US">OK</span></strong><span>。</span><span lang="EN-US">Eclipse</span><span>会下载</span><span lang="EN-US">m2eclipse</span><span>安装站点上的资源信息。等待资源载入完成之后，我们再将其全部展开，就能看到图</span><span lang="EN-US">2-6</span><span>所示的界面：</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span style="font-size: small;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/1ae54751-ad82-3066-ba5a-e8818cfc504d.jpg" height="671" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-6<span>&nbsp; </span>m2eclipse</span><span>的核心安装资源列表</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">&nbsp;</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>如图显示了</span><span lang="EN-US">m2eclipse</span><span>的核心模块</span><span lang="EN-US">Maven Integration for Eclipse (Required)</span><span>，选择后点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，</span><span lang="EN-US">Eclipse</span><span>会自动计算模块间依赖，然后给出一个将被安装的模块列表，确认无误后，继续点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，这时我们会看到许可证信息，</span><span lang="EN-US">m2eclipse</span><span>使用的开源许可证是</span><span lang="EN-US">Eclipse Public License v1.0</span><span>，选择</span><strong><span lang="EN-US">I accept the terms of the license agreements</span></strong><span>，然后点击</span><strong><span lang="EN-US">Finish</span></strong><span>，接着就耐心等待</span><span lang="EN-US">Eclipse</span><span>下载安装这些模块，如图</span><span lang="EN-US">2-7</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/d36bea18-262e-35e3-8a44-e3bac9ba225b.jpg"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-7</span><span>：</span><span lang="EN-US">m2eclipse</span><span>安装进度</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>除了核心组件之外，</span><span lang="EN-US">m2eclipse</span><span>还提供了一组额外组件，主要是为了方便与其它工具如</span><span lang="EN-US">Subversion</span><span>进行集成，这些组件的安装地址为</span><span lang="EN-US"><a href="http://m2eclipse.sonatype.org/sites/m2e-extras">http://m2eclipse.sonatype.org/sites/m2e-extras</a></span><span>。使用前面类似的安装方法，我们可以看到如图</span><span lang="EN-US">2-8</span><span>的组件列表：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/8c938c76-5859-33ea-aee2-b1f6e3a182ac.jpg" height="568" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-8</span><span>：</span><span lang="EN-US">m2eclipse</span><span>的额外组件安装资源列表</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>下面简单解释一下这些组件的用途：</span></span></p>
<p class="MsoListParagraph" style="margin: 6pt 0cm; text-indent: 0cm;"><span style="font-size: small;"><strong><span lang="EN-US">1. </span></strong><strong><span>重要的</span></strong></span></p>
<ul>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven SCM handler for Subclipse <span>&nbsp;</span>(Optional</span><span>）：</span><span lang="EN-US">Subversion</span><span>是非常流行的版本管理工具，该模块能够帮助我们直接从</span><span lang="EN-US">Subversion</span><span>服务器签出</span><span lang="EN-US">Maven</span><span>项目，不过前提是需要首先安装</span><span lang="EN-US">Subclipse</span><span>（</span><span lang="EN-US"><a href="http://subclipse.tigris.org/">http://subclipse.tigris.org/</a></span><span>）。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;"><span><span>&nbsp;</span></span></span><span lang="EN-US">Maven SCM Integration (Optional</span><span>）：</span><span lang="EN-US">Eclipse</span><span>环境中</span><span lang="EN-US">Maven</span><span>与</span><span lang="EN-US">SCM</span><span>集成核心的模块，它利用各种</span><span lang="EN-US">SCM</span><span>工具如</span><span lang="EN-US">SVN</span><span>实现</span><span lang="EN-US">Maven</span><span>项目的签出和具体化等操作。</span></span></li>
</ul>
<p class="MsoListParagraph" style="margin: 6pt 0cm; text-indent: 0cm;"><span style="font-size: small;"><strong><span lang="EN-US">2. </span></strong><strong><span>不重要的</span></strong></span></p>
<ul>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven issue tracking configurator for Mylyn 3.x (Optional</span><span>）：该模块能够帮助我们使用</span><span lang="EN-US">POM</span><span>中的缺陷跟踪系统信息连接</span><span lang="EN-US">Mylyn</span><span>至服务器。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven SCM handler for Team/CVS (Optional</span><span>）：该模块帮助我们从</span><span lang="EN-US">CVS</span><span>服务器签出</span><span lang="EN-US">Maven</span><span>项目，如果你还在使用</span><span lang="EN-US">CVS</span><span>，就需要安装它。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven Integration for WTP (Optional</span><span>）：使用该模块可以让</span><span lang="EN-US">Eclipse</span><span>自动读取</span><span lang="EN-US">POM</span><span>信息并配置</span><span lang="EN-US">WTP</span><span>项目。、</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">M2eclipse Extensions Development Support (Optional)</span><span>：用来支持扩展</span><span lang="EN-US">m2eclipse</span><span>，一般用户不会用到。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;"><span><span>&nbsp;</span></span></span><span lang="EN-US">Project configurators for commonly used maven plugins (temporary)</span><span>：一个临时的组件，用来支持一些</span><span lang="EN-US">Maven</span><span>插件与</span><span lang="EN-US">Eclipse</span><span>的集成，建议安装。</span></span></li>
</ul>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>读者可以根据自己的需要安装相应组件，具体步骤不再赘述。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>待安装完毕后，重启</span><span lang="EN-US">Eclipse</span><span>，现在让我们验证一下</span><span lang="EN-US">m2eclipse</span><span>是否正确安装了。首先，点击菜单栏中的</span><strong><span lang="EN-US">Help</span></strong><span>，然后选择</span><strong><span lang="EN-US">About Eclipse</span></strong><span>，在弹出的对话框中，点击</span><strong><span lang="EN-US">Installation Details</span></strong><span>按钮，会得到一个对话框，在</span><strong><span lang="EN-US">Installed Software</span></strong><span>标签栏中，检查刚才我们选择的模块是否在这个列表中，如图</span><span lang="EN-US">2-9</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/c6793b02-251d-3e1f-833c-8ff12d14ba05.jpg" height="459" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-9m2eclipse</span><span>安装结果</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>如果一切没问题，我们再检查一下</span><span lang="EN-US">Eclipse</span><span>现在是否已经支持创建</span><span lang="EN-US">Maven</span><span>项目，依次点击菜单栏中的</span><strong><span lang="EN-US">File</span></strong><span>→</span><strong><span lang="EN-US">New</span></strong><span>→</span><strong><span lang="EN-US">Other</span></strong><span>，在弹出的对话框中，找到</span><span lang="EN-US">Maven</span><span>一项，再将其展开，你应该能够看到如图</span><span lang="EN-US">2-10</span><span>所示的对话框：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/897a084a-6965-3d4a-b437-36c3a4ea5c09.jpg"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-10 Eclipse</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目向导</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>如果一切正常，说明</span><span lang="EN-US">m2eclipse</span><span>已经正确安装了。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>最后，关于</span><span lang="EN-US">m2eclipse</span><span>的安装，需要提醒的一点是，你可能会在使用</span><span lang="EN-US">m2eclipse</span><span>时遇到类似这样的错误：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">09-10-6 </span><span>上午</span><span lang="EN-US">01</span><span>时</span><span lang="EN-US">14</span><span>分</span><span lang="EN-US">49</span><span>秒</span><span lang="EN-US">:
Eclipse is running in a JRE, but a JDK is required<br>
Some Maven plugins may not work when importing projects or updating source
folders.</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>这是因为</span><span lang="EN-US">Eclipse</span><span>默认是运行在</span><span lang="EN-US">JRE</span><span>上的，而</span><span lang="EN-US">m2eclipse</span><span>的一些功能要求使用</span><span lang="EN-US">JDK</span><span>，解决方法是配置</span><span lang="EN-US">Eclipse</span><span>安装目录的</span><span lang="EN-US">eclipse.ini</span><span>文件，添加</span><span lang="EN-US">vm</span><span>配置指向</span><span lang="EN-US">JDK</span><span>，如：</span></span> </p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">--launcher.XXMaxPermSize</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">256m</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-vm</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">D:\java\jdk1.6.0_07\bin\javaw.exe</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-vmargs</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-Dosgi.requiredJavaVersion=1.5</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-Xms128m</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-Xmx256m</span></span></p>
</div>
<h2>
        2.6 安装NetBeans Maven插件
        <a name="3343" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>本小节会先介绍如何在</span><span lang="EN-US">NetBeans</span><span>上安装</span><span lang="EN-US">Maven</span><span>插件，后面的章节中还会介绍</span><span lang="EN-US">NetBeans</span><span>中具体的</span><span lang="EN-US">Maven</span><span>操作。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>首先，如果你正在使用</span><span lang="EN-US">NetBeans 6.7</span><span>及以上版本，那么</span><span lang="EN-US">Maven</span><span>插件已经预装了。你可以检查</span><span lang="EN-US">Maven</span><span>插件安装，点击菜单栏中的<strong>工具</strong>，接着选择<strong>插件</strong>，在弹出的插件对话框中选择<strong>已安装</strong>标签，你应该能够看到</span><span lang="EN-US">Maven</span><span>插件，如图</span><span lang="EN-US">2-11</span><span>所示：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/0b324a36-c6c4-338d-9fe8-775cab5e75f5.jpg" height="400" width="650"><br>&nbsp;<span>图</span><span lang="EN-US">2-11 </span><span>已安装的</span><span lang="EN-US">NetBeans Maven</span><span>插件</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果你在使用</span><span lang="EN-US">NetBeans 6.7</span><span>之前的版本，或者由于某些原因</span><span lang="EN-US">NetBeans Maven</span><span>插件被卸载了，那么你就需要安装</span><span lang="EN-US">NetBeans Maven</span><span>插件，下面我们以</span><span lang="EN-US">NetBeans 6.1</span><span>为例，介绍</span><span lang="EN-US">Maven</span><span>插件的安装。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>同样，点击菜单栏中的<strong>工具</strong>，选择<strong>插件</strong>，在弹出的插件对话框中选择<strong>可用插件</strong>标签，接着在右边的搜索框内输入</span><span lang="EN-US">Maven</span><span>，这时你会在左边的列表中看到一个名为</span><span lang="EN-US">Maven</span><span>的插件，选择该插件，然后点击下面的安装按钮，如图</span><span lang="EN-US">2-12</span><span>所示：</span></p>
<p style="text-align: center;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/d6c9e5b4-543c-39b6-8036-1572f7da6bce.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 0cm;" align="center"><span lang="EN-US">
 
</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">2-12 </span><span>安装</span><span lang="EN-US">NetBeans Maven</span><span>插件</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>接着在随后的对话框中根据提示操作，阅读相关许可证并接受，</span><span lang="EN-US">NetBeans</span><span>会自动帮我们下载并安装</span><span lang="EN-US">Maven</span><span>插件，结束之后会提示安装完成，之后再点击插件对话框的<strong>已安装</strong>标签，就能看到已经激活的</span><span lang="EN-US">Maven</span><span>插件。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">
 
</span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;"><span>最后，为了确认</span><span lang="EN-US">Maven</span><span>插件确实已经正确安装了，可以看一下</span><span lang="EN-US">NetBeans</span><span>是否已经拥有创建</span><span lang="EN-US">Maven</span><span>项目的相关菜单。在菜单栏中选择<strong>文件</strong>，然后选择<strong>新建项目</strong>，这时应该能够看到项目类别中有</span><strong><span lang="EN-US">Maven</span></strong><span>一项，选择该类别，右边会相应地显示</span><strong><span lang="EN-US">Maven</span></strong><strong><span>项目</span></strong><span>和<strong>基于现有</strong></span><strong><span lang="EN-US">POM</span></strong><strong><span>的</span><span lang="EN-US">Maven</span></strong><strong><span>项目</span></strong><span>，如图</span><span lang="EN-US">2-13</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/cb652365-a437-33e7-8774-bdd5fdc32e41.jpg"><br>&nbsp;<span>图</span><span lang="EN-US">2-13 NetBeans</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目向导</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果你能看到类似的对话框，说明</span><span lang="EN-US">NetBeans Maven</span><span>已经正确安装了。</span></p>
</div>
<h2>
        2.7 Maven安装最佳实践
        <a name="3344" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本节介绍一些在安装</span><span lang="EN-US">Maven</span><span>过程中不是必须的，但十分有用的实践。</span></span></p>
<h2 style="text-indent: 28pt;"><span style="font-size: small;"><span lang="EN-US">2.7.1 </span><span>设置</span><span lang="EN-US">MAVEN_OPTS</span><span>环境变量</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本章前面介绍</span><span lang="EN-US">Maven</span><span>安装目录时我们了解到，运行</span><span lang="EN-US">mvn</span><span>命令实际上是执行了</span><span lang="EN-US">Java</span><span>命令，既然是运行</span><span lang="EN-US">Java</span><span>，那么运行</span><span lang="EN-US">Java</span><span>命令可用的参数当然也应该在运行</span><span lang="EN-US">mvn</span><span>命令时可用。这个时候，</span><span lang="EN-US">MAVEN_OPTS</span><span>环境变量就能派上用场。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>我们通常需要设置</span><span lang="EN-US">MAVEN_OPTS</span><span>的值为：</span><em><span lang="EN-US">-Xms128m -Xmx512m</span></em><span>，因为</span><span lang="EN-US">Java</span><span>默认的最大可用内存往往不能够满足</span><span lang="EN-US">Maven</span><span>运行的需要，比如在项目较大时，使用</span><span lang="EN-US">Maven</span><span>生成项目站点需要占用大量的内存，如果没有该配置，我们很容易得到</span><em><span lang="EN-US">java.lang.OutOfMemeoryError</span></em><span>。因此，一开始就配置该变量是推荐的做法。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>关于如何设置环境变量，请参考前面设置</span><span lang="EN-US">M2_HOME</span><span>环境变量的做法，尽量不要直接修改</span><span lang="EN-US">mvn.bat</span><span>或者</span><span lang="EN-US">mvn</span><span>这两个</span><span lang="EN-US">Maven</span><span>执行脚本文件。因为如果修改了脚本文件，升级</span><span lang="EN-US">Maven</span><span>时你就不得不再次修改，一来麻烦，二来容易忘记。同理，我们应该尽可能地不去修改任何</span><span lang="EN-US">Maven</span><span>安装目录下的文件。</span></span></p>
<h2 style="text-indent: 28pt;"><span style="font-size: small;"><span lang="EN-US">2.7.2 </span><span>配置用户范围</span><span lang="EN-US">settings.xml</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">Maven</span><span>用户可以选择配置</span><em><span lang="EN-US">$M2_HOME/conf/settings.xml</span></em><span>或者</span><em><span lang="EN-US">~/.m2/settings.xml</span></em><span>。前者是全局范围的，整台机器上的所有用户都会直接受到该配置的影响，而后者是用户范围的，只有当前用户才会受到该配置的影响。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>我们推荐使用用户范围的</span><span lang="EN-US">settings.xml</span><span>，主要原因是为了避免无意识地影响到系统中的其他用户。当然，如果你有切实的需求，需要统一系统中所有用户的</span><span lang="EN-US">settings.xml</span><span>配置，当然应该使用全局范围的</span><span lang="EN-US">settings.xml</span><span>。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>除了影响范围这一因素，配置用户范围</span><span lang="EN-US">settings.xml</span><span>文件还便于</span><span lang="EN-US">Maven</span><span>升级。直接修改</span><span lang="EN-US">conf</span><span>目录下的</span><span lang="EN-US">settings.xml</span><span>会导致</span><span lang="EN-US">Maven</span><span>升级不便，每次升级到新版本的</span><span lang="EN-US">Maven</span><span>，都需要复制</span><span lang="EN-US">settings.xml</span><span>文件，如果使用</span><em><span lang="EN-US">~/.m2</span></em><span>目录下的</span><span lang="EN-US">settings.xml</span><span>，就不会影响到</span><span lang="EN-US">Maven</span><span>安装文件，升级时就不需要触动</span><span lang="EN-US">settings.xml</span><span>文件。</span></span></p>
<h2 class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">2.7.3 </span><span>不要使用</span><span lang="EN-US">IDE</span><span>内嵌的</span><span lang="EN-US">Maven</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>无论是</span><span lang="EN-US">Eclipse</span><span>还是</span><span lang="EN-US">NetBeans</span><span>，当我们集成</span><span lang="EN-US">Maven</span><span>时，都会安装上一个内嵌的</span><span lang="EN-US">Maven</span><span>，这个内嵌的</span><span lang="EN-US">Maven</span><span>通常会比较新，但不一定很稳定，而且往往也会和我们在命令行使用的</span><span lang="EN-US">Maven</span><span>不是同一个版本。这里有会出现两个潜在的问题：首先，较新版本的</span><span lang="EN-US">Maven</span><span>存在很多不稳定因素，容易造成一些难以理解的问题；其次，除了</span><span lang="EN-US">IDE</span><span>，我们也经常还会使用命令行的</span><span lang="EN-US">Maven</span><span>，如果版本不一致，容易造成构建行为的不一致，这是我们所不希望看到的。因此，我们应该在</span><span lang="EN-US">IDE</span><span>中配置</span><span lang="EN-US">Maven</span><span>插件时使用与命令行一致的</span><span lang="EN-US">Maven</span><span>。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在</span><span lang="EN-US">m2eclipse</span><span>环境中，点击菜单栏中的</span><strong><span lang="EN-US">Windows</span></strong><span>，然后选择</span><strong><span lang="EN-US">Preferences</span></strong><span>，在弹出的对话框中，展开左边的</span><strong><span lang="EN-US">Maven</span></strong><span>项，选择</span><strong><span lang="EN-US">Installation</span></strong><span>子项，在右边的面板中，我们能够看到有一个默认的</span><strong><span lang="EN-US">Embedded</span></strong><span lang="EN-US"> Maven</span><span>安装被选中了，点击</span><strong><span lang="EN-US">Add…</span></strong><span>然后选择我们的</span><span lang="EN-US">Maven</span><span>安装目录</span><span lang="EN-US">M2_HOME</span><span>，添加完毕之后选择这一个外部的</span><span lang="EN-US">Maven</span><span>，如图</span><span lang="EN-US">2-14</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/93cb4cf7-4027-397d-9e42-185acb6fc868.jpg"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-14 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中使用外部</span><span lang="EN-US">Maven</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">NetBeans Maven</span><span>插件默认会侦测</span><span lang="EN-US">PATH</span><span>环境变量，因此会直接使用与命令行一致的</span><span lang="EN-US">Maven</span><span>环境。依次点击菜单栏中的<strong>工具</strong>→<strong>选项</strong>→<strong>其他</strong>→</span><strong><span lang="EN-US">Maven</span></strong><span>标签栏，你就能看到如图</span><span lang="EN-US">2-15</span><span>所示的配置：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/8881d976-4ee5-3c10-b355-b02bac6efbd2.jpg" height="467" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-15 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中使用外部</span><span lang="EN-US">Maven</span></span></p>
</div>
<h2>
        2.8 小结
        <a name="3345" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本章详细介绍了在各种操作系统平台上安装</span><span lang="EN-US">Maven</span><span>，并对</span><span lang="EN-US">Maven</span><span>安装目录进行了深入的分析，在命令行的基础上，本章又进一步介绍了</span><span lang="EN-US">Maven</span><span>与主流</span><span lang="EN-US">IDE Eclipse</span><span>及</span><span lang="EN-US">NetBeans</span><span>的集成，本章最后还介绍了一些与</span><span lang="EN-US">Maven</span><span>安装相关的最佳实践。本书下一章会创建一个</span><span lang="EN-US">Hello World</span><span>项目，带领读者配置和构建</span><span lang="EN-US">Maven</span><span>项目。</span></span></p>
</div>
<h2>
        第3章 Maven使用入门
        <a name="3346" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
        <span style="font-size: medium;">到目前为止，我们已经大概了解并安装好了Maven，现在，我们开始
创建一个最简单的Hello 
World项目。如果你是初次接触Maven，我建议你按照本章的内容一步步地编写代码并执行，可能你会碰到一些概念暂时难以理解，不用着急，记下这些疑
难点，相信本书的后续章节会帮你逐一解答。
<br>3.1 编写POM
<br>3.2 编写主代码
<br>3.3 编写测试代码
<br>3.4 打包和运行
<br>3.5 使用Archetype生成项目骨架
<br>3.6 m2eclipse简单使用
<br>3.7 NetBeans Maven插件简单使用
<br>3.8 小结</span>
      </div>
<h2>
        3.1 编写POM
        <a name="3347" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>就像</span></span><span style="font-size: small;"><span lang="EN-US">Make</span></span><span style="font-size: small;"><span>的</span></span><span style="font-size: small;"><span lang="EN-US">Makefile</span></span><span style="font-size: small;"><span>，</span></span><span style="font-size: small;"><span lang="EN-US">Ant</span></span><span style="font-size: small;"><span>的</span></span><span style="font-size: small;"><span lang="EN-US">build.xml</span></span><span style="font-size: small;"><span>一样，</span></span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span style="font-size: small;"><span>项目的核心是</span></span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span style="font-size: small;"><span>。</span></span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span style="font-size: small;"><span>（</span></span><span style="font-size: small;"><strong><span lang="EN-US">P</span></strong><span lang="EN-US">roject <strong>O</strong>bject <strong>M</strong>odel</span></span><span style="font-size: small;"><span>，项目对象模型）定义了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。现在我们先为</span></span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span style="font-size: small;"><span>项目编写一个最简单的</span></span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span style="font-size: small;"><span>。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>首先创建一个名为</span></span><span style="font-size: small;"><span lang="EN-US">hello-world</span></span><span style="font-size: small;"><span>的文件夹（本书中各章的代码都会对应一个以</span></span><span style="font-size: small;"><span lang="EN-US">ch</span></span><span style="font-size: small;"><span>开头的项目），打开该文件夹，新建一个名为</span></span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span style="font-size: small;"><span>的文件，输入其内容如代码清单</span></span><span style="font-size: small;"><span lang="EN-US">3-1</span></span><span style="font-size: small;"><span>：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span style="font-size: small;"><span lang="EN-US">3-1</span></span><span>：</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>的</span><span style="font-size: small;"><span lang="EN-US">POM</span></span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;&lt;?xml&nbsp;version=</span><span class="string">"1.0"</span><span>&nbsp;encoding=</span><span class="string">"UTF-8"</span><span>?&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&lt;project&nbsp;xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation="http:<span class="comment">//maven.apache.org/POM/4.0.0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>http:<span class="comment">//maven.apache.org/maven-v4_0_0.xsd"&gt;</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;modelVersion&gt;<span class="number">4.0</span><span>.</span><span class="number">0</span><span>&lt;/modelVersion&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;groupId&gt;com.juvenxu.mvnbook&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;artifactId&gt;hello-world&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;version&gt;<span class="number">1.0</span><span>-SNAPSHOT&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;name&gt;Maven&nbsp;Hello&nbsp;World&nbsp;Project&lt;/name&gt;&nbsp;&nbsp;</span></li>
<li><span>&lt;/project&gt;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;</span><span>&nbsp;&nbsp;&nbsp; 代码的第一行是</span><span style="font-size: small;"><span lang="EN-US">XML</span></span><span>头，指定了该</span><span style="font-size: small;"><span lang="EN-US">xml</span></span><span>文档的版本和编码方式。紧接着是</span><span style="font-size: small;"><span lang="EN-US">project</span></span><span>元素，</span><span style="font-size: small;"><span lang="EN-US">project</span></span><span>是所有</span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span>的根元素，它还声明了一些</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>相关的命名空间及</span><span style="font-size: small;"><span lang="EN-US">xsd</span></span><span>元素，虽然这些属性不是必须的，但使用这些属性能够让第三方工具（如</span><span style="font-size: small;"><span lang="EN-US">IDE</span></span><span>中的</span><span style="font-size: small;"><span lang="EN-US">XML</span></span><span>编辑器）帮助我们快速编辑</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>根元素下的第一个子元素</span><span style="font-size: small;"><span lang="EN-US">modelVersion</span></span><span>指定了当前</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>模型的版本，对于</span><span style="font-size: small;"><span lang="EN-US">Maven2</span></span><span>及</span><span style="font-size: small;"><span lang="EN-US">Maven 3</span></span><span>来说，它只能是</span><span style="font-size: small;"><span lang="EN-US">4.0.0</span></span><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>这段代码中最重要的是</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>，</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>和</span><span style="font-size: small;"><span lang="EN-US">version</span></span><span>三行。这三个元素定义了一个项目基本的坐标，在</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的世界，任何的</span><span style="font-size: small;"><span lang="EN-US">jar</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">pom</span></span><span>或者</span><span style="font-size: small;"><span lang="EN-US">war</span></span><span>都是以基于这些基本的坐标进行区分的。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>定义了项目属于哪个组，这个组往往和项目所在的组织或公司存在关联，譬如你在</span><span style="font-size: small;"><span lang="EN-US">googlecode</span></span><span>上建立了一个名为</span><span style="font-size: small;"><span lang="EN-US">myapp</span></span><span>的项目，那么</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>就应该是</span><span style="font-size: small;"><span lang="EN-US">com.googlecode.myapp</span></span><span>，如果你的公司是</span><span style="font-size: small;"><span lang="EN-US">mycom</span></span><span>，有一个项目为</span><span style="font-size: small;"><span lang="EN-US">myapp</span></span><span>，那么</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>就应该是</span><span style="font-size: small;"><span lang="EN-US">com.mycom.myapp</span></span><span>。本书中所有的代码都基于</span><span style="font-size: small;"><span lang="EN-US">groupId com.juvenxu.mvnbook</span></span><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>定义了当前</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>项目在组中唯一的</span><span style="font-size: small;"><span lang="EN-US">ID</span></span><span>，我们为这个</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>项目定义</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>为</span><span style="font-size: small;"><span lang="EN-US">hello-world</span></span><span>，本书其他章节代码会被分配其他的</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>。而在前面的</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>为</span><span style="font-size: small;"><span lang="EN-US">com.googlecode.myapp</span></span><span>的例子中，你可能会为不同的子项目（模块）分配</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>，如：</span><span style="font-size: small;"><span lang="EN-US">myapp-util</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">myapp-domain</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">myapp-web</span></span><span>等等。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>顾名思义，</span><span style="font-size: small;"><span lang="EN-US">version</span></span><span>指定了</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>项目当前的版本——</span><span style="font-size: small;"><span lang="EN-US">1.0-SNAPSHOT</span></span><span>。</span><span style="font-size: small;"><span lang="EN-US">SNAPSHOT</span></span><span>意为快照，说明该项目还处于开发中，是不稳定的版本。随着项目的发展，</span><span style="font-size: small;"><span lang="EN-US">version</span></span><span>会不断更新，如升级为</span><span style="font-size: small;"><span lang="EN-US">1.0</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">1.1-SNAPSHOT</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">1.1</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">2.0</span></span><span>等等。本书的</span><span style="font-size: small;"><span lang="EN-US">6.5</span></span><span>小节会详细介绍</span><span style="font-size: small;"><span lang="EN-US">SNAPSHOT</span></span><span>，第</span><span style="font-size: small;"><span lang="EN-US">13</span></span><span>章介绍如何使用</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>管理项目版本的升级发布。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>最后一个</span><span style="font-size: small;"><span lang="EN-US">name</span></span><span>元素声明了一个对于用户更为友好的项目名称，虽然这不是必须的，但我还是推荐为每个</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>声明</span><span style="font-size: small;"><span lang="EN-US">name</span></span><span>，以方便信息交流。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>没有任何实际的</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码，我们就能够定义一个</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>项目的</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>，这体现了</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的一大优点，它能让项目对象模型最大程度地与实际代码相独立，我们可以称之为解耦，或者正交性，这在很大程度上避免了</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码和</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>代码的相互影响。比如当项目需要升级版本时，只需要修改</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>，而不需要更改</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码；而在</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>稳定之后，日常的</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码开发工作基本不涉及</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>的修改。</span></p>
</div>
<h2>
        3.2 编写主代码
        <a name="3348" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>项目主代码和测试代码不同，项目的主代码会被打包到最终的构件中（比如</span><span style="font-size: small;"><span lang="EN-US">jar</span></span><span>），而测试代码只在运行测试时用到，不会被打包。默认情况下，</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>假设项目主代码位于</span><span style="font-size: small;"><em><span lang="EN-US">src/main/java</span></em></span><span>目录，我们遵循</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的约定，创建该目录，然后在该目录下创建文件</span><span style="font-size: small;"><span lang="EN-US">com/juvenxu/mvnbook/helloworld/<em>HelloWorld.java</em></span></span><span>，其内容如代码清单</span><span style="font-size: small;"><span lang="EN-US">3-2</span></span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span style="font-size: small;"><span lang="EN-US">3-2</span></span><span>：</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>的主代码</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;</span><span class="keyword">package</span><span>&nbsp;com.juvenxu.mvnbook.helloworld;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;HelloWorld&nbsp;&nbsp;</span></span></li>
<li><span>{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;sayHello()&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">"Hello&nbsp;Maven"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&nbsp;<span class="keyword">new</span><span>&nbsp;HelloWorld().sayHello()&nbsp;);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>这是一个简单的</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类，它有一个</span><span style="font-size: small;"><span lang="EN-US">sayHello()</span></span><span>方法，返回一个</span><span style="font-size: small;"><span lang="EN-US">String</span></span><span>。同时这个类还带有一个</span><span style="font-size: small;"><span lang="EN-US">main</span></span><span>方法，创建一个</span><span style="font-size: small;"><span lang="EN-US">HelloWorld</span></span><span>实例，调用</span><span style="font-size: small;"><span lang="EN-US">sayHello()</span></span><span>方法，并将结果输出到控制台。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>关于该</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码有两点需要注意。首先，在</span><span style="font-size: small;"><span lang="EN-US">95%</span></span><span>以上的情况下，我们应该把项目主代码放到</span><span style="font-size: small;"><em><span lang="EN-US">src/main/java/</span></em></span><span>目录下（遵循</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的约定），而无须额外的配置，</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>会自动搜寻该目录找到项目主代码。其次，该</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类的包名是</span><span style="font-size: small;"><span lang="EN-US">com.juvenxu.mvnbook.helloworld</span></span><span>，这与我们之前在</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>中定义的</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>和</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>相吻合。一般来说，项目中</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类的包都应该基于项目的</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>和</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>，这样更加清晰，更加符合逻辑，也方便搜索构件或者</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码编写完毕后，我们使用</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>进行编译，在项目根目录下运行命令</span><span style="font-size: small;"> <strong><span lang="EN-US">mvn clean compile </span></strong></span><span>，我们会得到如下输出：</span></p>
<p><span style="font-size: small;"><br></span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;[INFO]&nbsp;Scanning&nbsp;</span><span class="keyword">for</span><span>&nbsp;projects...&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Building&nbsp;Maven&nbsp;Hello&nbsp;World&nbsp;Project&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;&nbsp;&nbsp;&nbsp;task-segment:&nbsp;[clean,&nbsp;compile]&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[clean:clean&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-clean}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Deleting&nbsp;directory&nbsp;D:\code\hello-world\target&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[resources:resources&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-resources}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;skip&nbsp;non&nbsp;existing&nbsp;resourceDirectory&nbsp;D:&nbsp;\code\hello-world\src\main\resources&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[compiler:compile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-compile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:&nbsp;\code\hello-world\target\classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Total&nbsp;time:&nbsp;<span class="number">1</span><span>&nbsp;second&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Finished&nbsp;at:&nbsp;Fri&nbsp;Oct&nbsp;<span class="number">09</span><span>&nbsp;</span><span class="number">02</span><span>:</span><span class="number">08</span><span>:</span><span class="number">09</span><span>&nbsp;CST&nbsp;</span><span class="number">2009</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Final&nbsp;Memory:&nbsp;9M/16M&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">clean</span></span><span>告诉</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>清理输出目录</span><span style="font-size: small;"><em><span lang="EN-US">target/</span></em></span><span>，</span><span style="font-size: small;"><span lang="EN-US">compile</span></span><span>告诉</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>编译项目主代码，从输出中我们看到</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>首先执行了</span><span style="font-size: small;"><span lang="EN-US">clean:clean</span></span><span>任务，删除</span><span style="font-size: small;"><em><span lang="EN-US">target/</span></em></span><span>目录，默认情况下</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>构建的所有输出都在</span><span style="font-size: small;"><em><span lang="EN-US">target/</span></em></span><span>目录中；接着执行</span><span style="font-size: small;"><span lang="EN-US">resources:resources</span></span><span>任务（未定义项目资源，暂且略过）；最后执行</span><span style="font-size: small;"><span lang="EN-US">compiler:compile</span></span><span>任务，将项目主代码编译至</span><span style="font-size: small;"><em><span lang="EN-US">target/classes</span></em></span><span>目录</span><span style="font-size: small;"><span lang="EN-US">(</span></span><span>编译好的类为</span><span style="font-size: small;"><em><span lang="EN-US">com/juvenxu/mvnbook/helloworld/HelloWorld.Class</span></em></span><span>）。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>上文提到的</span><span style="font-size: small;"><span lang="EN-US">clean:clean</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">resources:resources</span></span><span>，以及</span><span style="font-size: small;"><span lang="EN-US">compiler:compile</span></span><span>对应了一些</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>插件及插件目标，比如</span><span style="font-size: small;"><span lang="EN-US">clean:clean</span></span><span>是</span><span style="font-size: small;"><span lang="EN-US">clean</span></span><span>插件的</span><span style="font-size: small;"><span lang="EN-US">clean</span></span><span>目标，</span><span style="font-size: small;"><span lang="EN-US">compiler:compile</span></span><span>是</span><span style="font-size: small;"><span lang="EN-US">compiler</span></span><span>插件的</span><span style="font-size: small;"><span lang="EN-US">compile</span></span><span>目标，后文会详细讲述</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>插件及其编写方法。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>至此，</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>在没有任何额外的配置的情况下就执行了项目的清理和编译任务，接下来，我们编写一些单元测试代码并让</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>执行自动化测试。</span></p>
</div>
<h2>
        3.3 编写测试代码
        <a name="3349" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>为了使项目结构保持清晰，主代码与测试代码应该分别位于独立的目录中。</span><span lang="EN-US">3.2</span><span>节讲过</span><span lang="EN-US">Maven</span><span>项目中默认的主代码目录是</span><em><span lang="EN-US">src/main/java</span></em><span>，对应地，</span><span lang="EN-US">Maven</span><span>项目中默认的测试代码目录是</span><em><span lang="EN-US">src/test/java</span></em><span>。因此，在编写测试用例之前，我们先创建该目录。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在</span><span lang="EN-US">Java</span><span>世界中，由</span><span lang="EN-US">Kent Beck</span><span>和</span><span lang="EN-US">Erich Gamma</span><span>建立的</span><span lang="EN-US">JUnit</span><span>是事实上的单元测试标准。要使用</span><span lang="EN-US">JUnit</span><span>，我们首先需要为</span><span lang="EN-US">Hello World</span><span>项目添加一个</span><span lang="EN-US">JUnit</span><span>依赖，修改项目的</span><span lang="EN-US">POM</span><span>如代码清单</span><span lang="EN-US">3-3</span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span lang="EN-US">3-3</span><span>：为</span><span lang="EN-US">Hello World</span><span>的</span><span lang="EN-US">POM</span><span>添加依赖</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;?xml&nbsp;version=</span><span class="string">"1.0"</span><span>&nbsp;encoding=</span><span class="string">"UTF-8"</span><span>?&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&lt;project&nbsp;xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation="http:<span class="comment">//maven.apache.org/POM/4.0.0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>http:<span class="comment">//maven.apache.org/maven-v4_0_0.xsd"&gt;</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;modelVersion&gt;<span class="number">4.0</span><span>.</span><span class="number">0</span><span>&lt;/modelVersion&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;groupId&gt;com.juvenxu.mvnbook&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;artifactId&gt;hello-world&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;version&gt;<span class="number">1.0</span><span>-SNAPSHOT&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;name&gt;Maven&nbsp;Hello&nbsp;World&nbsp;Project&lt;/name&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;dependencies&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;junit&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;junit&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;<span class="number">4.7</span><span>&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;scope&gt;test&lt;/scope&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependency&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;/dependencies&gt;&nbsp;&nbsp;</span></li>
<li><span>&lt;/project&gt;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;<span>&nbsp;&nbsp;&nbsp; 代码中添加了</span><span lang="EN-US">dependencies</span><span>元素，该元素下可以包含多个</span><span lang="EN-US">dependency</span><span>元素以声明项目的依赖，这里我们添加了一个依赖——</span><span lang="EN-US">groupId</span><span>是</span><span lang="EN-US">junit</span><span>，</span><span lang="EN-US">artifactId</span><span>是</span><span lang="EN-US">junit</span><span>，</span><span lang="EN-US">version</span><span>是</span><span lang="EN-US">4.7</span><span>。前面我们提到</span><span lang="EN-US">groupId</span><span>、</span><span lang="EN-US">artifactId</span><span>和</span><span lang="EN-US">version</span><span>是任何一个</span><span lang="EN-US">Maven</span><span>项目最基本的坐标，</span><span lang="EN-US">JUnit</span><span>也不例外，有了这段声明，</span><span lang="EN-US">Maven</span><span>就能够自动下载</span><span lang="EN-US">junit-4.7.jar</span><span>。也许你会问，</span><span lang="EN-US">Maven</span><span>从哪里下载这个</span><span lang="EN-US">jar</span><span>呢？在</span><span lang="EN-US">Maven</span><span>之前，我们可以去</span><span lang="EN-US">JUnit</span><span>的官网下载分发包。而现在有了</span><span lang="EN-US">Maven</span><span>，它会自动访问中央仓库（</span><span lang="EN-US"><a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</a></span><span>），下载需要的文件。读者也可以自己访问该仓库，打开路径</span><span lang="EN-US">junit/junit/4.7/</span><span>，就能看到</span><span lang="EN-US">junit-4.7.pom</span><span>和</span><span lang="EN-US">junit-4.7.jar</span><span>。本书第</span><span lang="EN-US">6</span><span>章会详细介绍</span><span lang="EN-US">Maven</span><span>仓库及中央仓库。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>上述</span><span lang="EN-US">POM</span><span>代码中还有一个值为</span><span lang="EN-US">test</span><span>的元素</span><span lang="EN-US">scope</span><span>，</span><span lang="EN-US">scope</span><span>为依赖范围，若依赖范围为</span><span lang="EN-US">test</span><span>则表示该依赖只对测试有效，换句话说，测试代码中的</span><span lang="EN-US">import JUnit</span><span>代码是没有问题的，但是如果我们在主代码中用</span><span lang="EN-US">import JUnit</span><span>代码，就会造成编译错误。如果不声明依赖范围，那么默认值就是</span><span lang="EN-US">compile</span><span>，表示该依赖对主代码和测试代码都有效。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>配置了测试依赖，接着就可以编写测试类，回顾一下前面的</span><span lang="EN-US">HelloWorld</span><span>类，现在我们要测试该类的</span><span lang="EN-US">sayHello()</span><span>方法，检查其返回值是否为“</span><span lang="EN-US">Hello Maven</span><span>”。在</span><span lang="EN-US">src/test/java</span><span>目录下创建文件，其内容如代码清单</span><span lang="EN-US">3-4</span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span lang="EN-US">3-4</span><span>：</span><span lang="EN-US">Hello World</span><span>的测试代码</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;com.juvenxu.mvnbook.helloworld;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;org.junit.Assert.assertEquals;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;org.junit.Test;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;HelloWorldTest&nbsp;&nbsp;</span></span></li>
<li><span>{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Test</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;testSayHello()&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld&nbsp;helloWorld&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;HelloWorld();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;result&nbsp;=&nbsp;helloWorld.sayHello();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(&nbsp;<span class="string">"Hello&nbsp;Maven"</span><span>,&nbsp;result&nbsp;);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>一个典型的单元测试包含三个步骤：一，准备测试类及数据；二，执行要测试的行为；三，检查结果。上述样例中，我们首先初始化了一个要测试的</span><span lang="EN-US">HelloWorld</span><span>实例，接着执行该实例的</span><span lang="EN-US">sayHello()</span><span>方法并保存结果到</span><span lang="EN-US">result</span><span>变量中，最后使用</span><span lang="EN-US">JUnit</span><span>框架的</span><span lang="EN-US">Assert</span><span>类检查结果是否为我们期望的</span><span lang="EN-US">”Hello Maven”</span><span>。在</span><span lang="EN-US">JUnit 3</span><span>中，约定所有需要执行测试的方法都以</span><span lang="EN-US">test</span><span>开头，这里我们使用了</span><span lang="EN-US">JUnit 4</span><span>，但我们仍然遵循这一约定，在</span><span lang="EN-US">JUnit 4</span><span>中，需要执行的测试方法都应该以</span><span lang="EN-US">@Test</span><span>进行标注。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>测试用例编写完毕之后就可以调用</span><span lang="EN-US">Maven</span><span>执行测试，运行</span> <strong><span lang="EN-US">mvn clean test</span></strong><span lang="EN-US"> </span><span>：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>[INFO]&nbsp;Scanning&nbsp;</span><span class="keyword">for</span><span>&nbsp;projects...&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Building&nbsp;Maven&nbsp;Hello&nbsp;World&nbsp;Project&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;&nbsp;&nbsp;&nbsp;task-segment:&nbsp;[clean,&nbsp;test]&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[clean:clean&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-clean}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Deleting&nbsp;directory&nbsp;D:\git-juven\mvnbook\code\hello-world\target&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[resources:resources&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-resources}]&nbsp;&nbsp;</span></span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>Downloading:&nbsp;http:<span class="comment">//repo1.maven.org/maven2/junit/junit/4.7/junit-4.7.pom</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>1K&nbsp;downloaded&nbsp;&nbsp;(junit-<span class="number">4.7</span><span>.pom)&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[compiler:compile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-compile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:&nbsp;\code\hello-world\target\classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[resources:testResources&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-testResources}]&nbsp;&nbsp;</span></span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>Downloading:&nbsp;http:<span class="comment">//repo1.maven.org/maven2/junit/junit/4.7/junit-4.7.jar</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>226K&nbsp;downloaded&nbsp;&nbsp;(junit-<span class="number">4.7</span><span>.jar)&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[compiler:testCompile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-testCompile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:\&nbsp;code\hello-world\target\test-classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[ERROR]&nbsp;BUILD&nbsp;FAILURE&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Compilation&nbsp;failure&nbsp;&nbsp;</span></li>
<li><span>D:\code\hello-world\src\test\java\com\juvenxu\mvnbook\helloworld\HelloWorldTest.java:[<span class="number">8</span><span>,</span><span class="number">5</span><span>]&nbsp;-source&nbsp;</span><span class="number">1.3</span><span>&nbsp;中不支持注释&nbsp;&nbsp;</span></span></li>
<li><span>（请使用&nbsp;-source&nbsp;<span class="number">5</span><span>&nbsp;或更高版本以启用注释）&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Test</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;For&nbsp;more&nbsp;information,&nbsp;run&nbsp;Maven&nbsp;with&nbsp;the&nbsp;-e&nbsp;<span class="keyword">switch</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;…&nbsp;&nbsp;</span></li>
</ol></div>
&nbsp;
<p class="MsoNormal" style="text-indent: 21pt;"><span>不幸的是构建失败了，不过我们先耐心分析一下这段输出（为了本书的简洁，一些不重要的信息我用省略号略去了）。命令行输入的是</span><span lang="EN-US">mvn clean test</span><span>，而</span><span lang="EN-US">Maven</span><span>实际执行的可不止这两个任务，还有</span><span lang="EN-US">clean:clean</span><span>、</span><span lang="EN-US">resources:resources</span><span>、</span><span lang="EN-US">compiler:compile</span><span>、</span><span lang="EN-US">resources:testResources</span><span>以及</span><span lang="EN-US">compiler:testCompile</span><span>。暂时我们需要了解的是，在</span><span lang="EN-US">Maven</span><span>执行测试（</span><span lang="EN-US">test</span><span>）之前，它会先自动执行项目主资源处理，主代码编译，测试资源处理，测试代码编译等工作，这是</span><span lang="EN-US">Maven</span><span>生命周期的一个特性，本书后续章节会详细解释</span><span lang="EN-US">Maven</span><span>的生命周期。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>从输出中我们还看到：</span><span lang="EN-US">Maven</span><span>从中央仓库下载了</span><span lang="EN-US">junit-4.7.pom</span><span>和</span><span lang="EN-US">junit-4.7.jar</span><span>这两个文件到本地仓库（</span><em><span lang="EN-US">~/.m2/repository</span></em><span>）中，供所有</span><span lang="EN-US">Maven</span><span>项目使用。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>构建在执行</span><span lang="EN-US">compiler:testCompile</span><span>任务的时候失败了，</span><span lang="EN-US">Maven</span><span>输出提示我们需要使用</span><span lang="EN-US">-source
5</span><span>或更高版本以启动注释，也就是前面提到的</span><span lang="EN-US">JUnit 4</span><span>的</span><span lang="EN-US">@Test</span><span>注解。这是</span><span lang="EN-US">Maven</span><span>初学者常常会遇到的一个问题。由于历史原因，</span><span lang="EN-US">Maven</span><span>的核心插件之一</span><span lang="EN-US">compiler</span><span>插件默认只支持编译</span><span lang="EN-US">Java 1.3</span><span>，因此我们需要配置该插件使其支持</span><span lang="EN-US">Java 5</span><span>，见代码清单</span><span lang="EN-US">3-5</span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span lang="EN-US">3-5</span><span>：配置</span><span lang="EN-US">maven-compiler-plugin</span><span>支持</span><span lang="EN-US">Java 5</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;project&gt;&nbsp;&nbsp;</span></span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;build&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;source&gt;<span class="number">1.5</span><span>&lt;/source&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&gt;<span class="number">1.5</span><span>&lt;/target&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;/build&gt;&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>&lt;/project&gt;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>该</span><span lang="EN-US">POM</span><span>省略了除插件配置以外的其他部分，我们暂且不去关心插件配置的细节，只需要知道</span><span lang="EN-US">compiler</span><span>插件支持</span><span lang="EN-US">Java 5</span><span>的编译。现在再执行</span><strong><span lang="EN-US">mvn clean test</span></strong><strong><span>，</span></strong><span>输出如下：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>…&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[compiler:testCompile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-testCompile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:&nbsp;\code\hello-world\target\test-classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[surefire:test&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-test}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Surefire&nbsp;report&nbsp;directory:&nbsp;D:\code\hello-world\target\surefire-reports&nbsp;&nbsp;</span></li>
<li><span>-------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>&nbsp;T&nbsp;E&nbsp;S&nbsp;T&nbsp;S&nbsp;&nbsp;</span></li>
<li><span>-------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>Running&nbsp;com.juvenxu.mvnbook.helloworld.HelloWorldTest&nbsp;&nbsp;</span></li>
<li><span>Tests&nbsp;run:&nbsp;<span class="number">1</span><span>,&nbsp;Failures:&nbsp;</span><span class="number">0</span><span>,&nbsp;Errors:&nbsp;</span><span class="number">0</span><span>,&nbsp;Skipped:&nbsp;</span><span class="number">0</span><span>,&nbsp;Time&nbsp;elapsed:&nbsp;</span><span class="number">0.055</span><span>&nbsp;sec&nbsp;&nbsp;</span></span></li>
<li><span>Results&nbsp;:&nbsp;&nbsp;</span></li>
<li><span>Tests&nbsp;run:&nbsp;<span class="number">1</span><span>,&nbsp;Failures:&nbsp;</span><span class="number">0</span><span>,&nbsp;Errors:&nbsp;</span><span class="number">0</span><span>,&nbsp;Skipped:&nbsp;</span><span class="number">0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们看到</span><span lang="EN-US">compiler:testCompile</span><span>任务执行成功了，测试代码通过编译之后在</span><em><span lang="EN-US">target/test-classes</span></em><span>下生成了二进制文件，紧接着</span><span lang="EN-US">surefire:test</span><span>任务运行测试，</span><span lang="EN-US">surefire</span><span>是</span><span lang="EN-US">Maven</span><span>世界中负责执行测试的插件，这里它运行测试用例</span><span lang="EN-US">HelloWorldTest</span><span>，并且输出测试报告，显示一共运行了多少测试，失败了多少，出错了多少，跳过了多少。显然，我们的测试通过了——</span><span lang="EN-US">BUILD SUCCESSFUL</span><span>。</span></p>
</div>
<h2>
        3.4 打包和运行
        <a name="3350" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>将项目进行编译、测试之后，下一个重要步骤就是打包（</span><span lang="EN-US">package</span><span>）。</span><span lang="EN-US">Hello World</span><span>的</span><span lang="EN-US">POM</span><span>中没有指定打包类型，使用默认打包类型</span><span lang="EN-US">jar</span><span>，我们可以简单地执行命令</span> <strong><span lang="EN-US">mvn clean package</span></strong><span lang="EN-US"> </span><span>进行打包，可以看到如下输出：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>…&nbsp;&nbsp;</span></span></li>
<li><span>Tests&nbsp;run:&nbsp;<span class="number">1</span><span>,&nbsp;Failures:&nbsp;</span><span class="number">0</span><span>,&nbsp;Errors:&nbsp;</span><span class="number">0</span><span>,&nbsp;Skipped:&nbsp;</span><span class="number">0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[jar:jar&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-jar}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Building&nbsp;jar:&nbsp;D:\code\hello-world\target\hello-world-<span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;&nbsp;&nbsp;</span></li>
<li><span>--------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
</ol></div>
&nbsp;
<p class="MsoNormal" style="text-indent: 21pt;"><span>类似地，</span><span lang="EN-US">Maven</span><span>会在打包之前执行编译、测试等操作。这里我们看到</span><span lang="EN-US">jar:jar</span><span>任务负责打包，实际上就是</span><span lang="EN-US">jar</span><span>插件的</span><span lang="EN-US">jar</span><span>目标将项目主代码打包成一个名为</span><em><span lang="EN-US">hello-world-1.0-SNAPSHOT.jar</span></em><span>的文件，该文件也位于</span><em><span lang="EN-US">target/</span></em><span>输出目录中，它是根据</span><span lang="EN-US">artifact-version.jar</span><span>规则进行命名的，如有需要，我们还可以使用</span><em><span lang="EN-US">finalName</span></em><span>来自定义该文件的名称，这里暂且不展开，本书后面会详细解释。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>至此，我们得到了项目的输出，如果有需要的话，就可以复制这个</span><span lang="EN-US">jar</span><span>文件到其他项目的</span><span lang="EN-US">Classpath</span><span>中从而使用</span><span lang="EN-US">HelloWorld</span><span>类。但是，如何才能让其他的</span><span lang="EN-US">Maven</span><span>项目直接引用这个</span><span lang="EN-US">jar</span><span>呢？我们还需要一个安装的步骤，执行</span> <strong><span lang="EN-US">mvn clean install</span></strong><span>：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&nbsp;&nbsp;&nbsp;…&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;[jar:jar&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-jar}]&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;Building&nbsp;jar:&nbsp;D:&nbsp;\code\hello-world\target\hello-world-<span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;[install:install&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-install}]&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;Installing&nbsp;D:\code\hello-world\target\hello-world-<span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;to&nbsp;C:\Users\juven\.m2\repository\com\juvenxu\mvnbook\hello-world\</span><span class="number">1.0</span><span>-SNAPSHOT\hello-world-</span><span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;&nbsp;</span></li>
<li><span>------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;…&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在打包之后，我们又执行了安装任务</span><span lang="EN-US">install:install</span><span>，从输出我们看到该任务将项目输出的</span><span lang="EN-US">jar</span><span>安装到了</span><span lang="EN-US">Maven</span><span>本地仓库中，我们可以打开相应的文件夹看到</span><span lang="EN-US">Hello World</span><span>项目的</span><span lang="EN-US">pom</span><span>和</span><span lang="EN-US">jar</span><span>。之前讲述</span><span lang="EN-US">JUnit</span><span>的</span><span lang="EN-US">POM</span><span>及</span><span lang="EN-US">jar</span><span>的下载的时候，我们说只有构件被下载到本地仓库后，才能由所有</span><span lang="EN-US">Maven</span><span>项目使用，这里是同样的道理，只有将</span><span lang="EN-US">Hello World</span><span>的构件安装到本地仓库之后，其他</span><span lang="EN-US">Maven</span><span>项目才能使用它。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们已经将体验了</span><span lang="EN-US">Maven</span><span>最主要的命令：</span><strong><span lang="EN-US">mvn clean compile</span></strong><strong><span>、</span><span lang="EN-US">mvn clean
test</span></strong><strong><span>、</span><span lang="EN-US">mvn clean package</span></strong><strong><span>、</span><span lang="EN-US">mvn clean install</span></strong><span>。执行</span><span lang="EN-US">test</span><span>之前是会先执行</span><span lang="EN-US">compile</span><span>的，执行</span><span lang="EN-US">package</span><span>之前是会先执行</span><span lang="EN-US">test</span><span>的，而类似地，</span><span lang="EN-US">install</span><span>之前会执行</span><span lang="EN-US">package</span><span>。我们可以在任何一个</span><span lang="EN-US">Maven</span><span>项目中执行这些命令，而且我们已经清楚它们是用来做什么的。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>到目前为止，我们还没有运行</span><span lang="EN-US">Hello World</span><span>项目，不要忘了</span><span lang="EN-US">HelloWorld</span><span>类可是有一个</span><span lang="EN-US">main</span><span>方法的。默认打包生成的</span><span lang="EN-US">jar</span><span>是不能够直接运行的，因为带有</span><span lang="EN-US">main</span><span>方法的类信息不会添加到</span><span lang="EN-US">manifest</span><span>中</span><span lang="EN-US">(</span><span>我们可以打开</span><span lang="EN-US">jar</span><span>文件中的</span><em><span lang="EN-US">META-INF/MANIFEST.MF</span></em><span>文件，将无法看到</span><span lang="EN-US">Main-Class</span><span>一行</span><span lang="EN-US">)</span><span>。为了生成可执行的</span><span lang="EN-US">jar</span><span>文件，我们需要借助</span><span lang="EN-US">maven-shade-plugin</span><span>，配置该插件如下：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;plugin&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;version&gt;<span class="number">1.2</span><span>.</span><span class="number">1</span><span>&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;executions&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;execution&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;phase&gt;<span class="keyword">package</span><span>&lt;/phase&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;goals&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;goal&gt;shade&lt;/goal&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/goals&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transformers&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transformer&nbsp;implementation=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span><span>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;mainClass&gt;com.juvenxu.mvnbook.helloworld.HelloWorld&lt;/mainClass&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/transformer&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/transformers&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/execution&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;/executions&gt;&nbsp;&nbsp;</span></li>
<li><span>&lt;/plugin&gt;&nbsp;&nbsp;</span></li>
</ol></div>
&nbsp;
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">plugin</span><span>元素在</span><span lang="EN-US">POM</span><span>中的相对位置应该在</span><span lang="EN-US">&lt;project&gt;&lt;build&gt;&lt;plugins&gt;</span><span>下面。我们配置了</span><span lang="EN-US">mainClass</span><span>为</span><span lang="EN-US">com.juvenxu.mvnbook.helloworld.HelloWorld</span><span>，项目在打包时会将该信息放到</span><span lang="EN-US">MANIFEST</span><span>中。现在执行</span><span> <strong><span lang="EN-US">mvn clean install</span></strong><span lang="EN-US"> </span></span><span>，待构建完成之后打开</span><span lang="EN-US">target/</span><span>目录，我们可以看到</span><em><span lang="EN-US">hello-world-1.0-SNAPSHOT.jar</span></em><span>和</span><em><span lang="EN-US">original-hello-world-1.0-SNAPSHOT.jar</span></em><span>，前者是带有</span><span lang="EN-US">Main-Class</span><span>信息的可运行</span><span lang="EN-US">jar</span><span>，后者是原始的</span><span lang="EN-US">jar</span><span>，打开</span><em><span lang="EN-US">hello-world-1.0-SNAPSHOT.jar</span></em><span>的</span><em><span lang="EN-US">META-INF/MANIFEST.MF</span></em><span>，可以看到它包含这样一行信息：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">Main-Class: com.juvenxu.mvnbook.helloworld.HelloWorld</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>现在，我们在项目根目录中执行该</span><span lang="EN-US">jar</span><span>文件：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">D:
\code\hello-world&gt;java -jar target\hello-world-1.0-SNAPSHOT.jar</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">Hello Maven</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>控制台输出为</span><span lang="EN-US">Hello Maven</span><span>，这正是我们所期望的。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>本小节介绍了</span><span lang="EN-US">Hello World</span><span>项目，侧重点是</span><span lang="EN-US">Maven</span><span>而非</span><span lang="EN-US">Java</span><span>代码本身，介绍了</span><span lang="EN-US">POM</span><span>、</span><span lang="EN-US">Maven</span><span>项目结构、以及如何编译、测试、打包，等等。</span></p>
</div>
<h2>
        3.5 使用Archetype生成项目骨架
        <a name="3351" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Hello World</span><span>项目中有一些</span><span lang="EN-US">Maven</span><span>的约定：在项目的根目录中放置</span><span lang="EN-US">pom.xml</span><span>，在</span><span lang="EN-US">src/main/java</span><span>目录中放置项目的主代码，在</span><span lang="EN-US">src/test/java</span><span>中放置项目的测试代码。我之所以一步一步地展示这些步骤，是为了能让可能是</span><span lang="EN-US">Maven</span><span>初学者的你得到最实际的感受。我们称这些基本的目录结构和</span><span lang="EN-US">pom.xml</span><span>文件内容称为项目的骨架，当你第一次创建项目骨架的时候，你还会饶有兴趣地去体会这些默认约定背后的思想，第二次，第三次，你也许还会满意自己的熟练程度，但第四、第五次做同样的事情，就会让程序员恼火了，为此</span><span lang="EN-US">Maven</span><span>提供了</span><span lang="EN-US">Archetype</span><span>以帮助我们快速勾勒出项目骨架。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>还是以</span><span lang="EN-US">Hello World</span><span>为例，我们使用</span><span lang="EN-US">maven archetype</span><span>来创建该项目的骨架，离开当前的</span><span lang="EN-US">Maven</span><span>项目目录。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果是</span><span lang="EN-US">Maven 3</span><span>，简单的运行：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">mvn archetype:generate</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果是</span><span lang="EN-US">Maven 2</span><span>，最好运行如下命令：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">mvn
org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-5:generate</span></p>
<p class="MsoNormal" style="margin-left: 5.25pt; text-indent: 15.75pt;"><span>很多资料会让你直接使用更为简单的</span><span lang="EN-US"> mvn archetype:generate </span><span>命令，但在</span><span lang="EN-US">Maven2</span><span>中这是不安全的，因为该命令没有指定</span><span lang="EN-US">archetype</span><span>插件的版本，于是</span><span lang="EN-US">Maven</span><span>会自动去下载最新的版本，进而可能得到不稳定的</span><span lang="EN-US">SNAPSHOT</span><span>版本，导致运行失败。然而在</span><span lang="EN-US">Maven 3</span><span>中，即使用户没有指定版本，</span><span lang="EN-US">Maven</span><span>也只会解析最新的稳定版本，因此这是安全的，具体内容见</span><span lang="EN-US">7.7</span><span>小节。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们实际上是在运行插件</span><span lang="EN-US">maven-archetype-plugin</span><span>，注意冒号的分隔，其格式为</span>
<em><span lang="EN-US">groupId:artifactId:version:goal
</span></em><span>，</span><span lang="EN-US">org.apache.maven.plugins
</span><span>是</span><span lang="EN-US">maven</span><span>官方插件的</span><span lang="EN-US">groupId</span><span>，</span><span lang="EN-US">maven-archetype-plugin </span><span>是</span><span lang="EN-US">archetype</span><span>插件的</span><span lang="EN-US">artifactId</span><span>，</span><span lang="EN-US">2.0-alpha-5 </span><span>是目前该插件最新的稳定版，</span><span lang="EN-US">generate</span><span>是我们要使用的插件目标。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>紧接着我们会看到一段长长的输出，有很多可用的</span><span lang="EN-US">archetype</span><span>供我们选择，包括著名的</span><span lang="EN-US">Appfuse</span><span>项目的</span><span lang="EN-US">archetype</span><span>，</span><span lang="EN-US">JPA</span><span>项目的</span><span lang="EN-US">archetype</span><span>等等。每一个</span><span lang="EN-US">archetype</span><span>前面都会对应有一个编号，同时命令行会提示一个默认的编号，其对应的</span><span lang="EN-US">archetype</span><span>为</span><span lang="EN-US">maven-archetype-quickstart</span><span>，我们直接回车以选择该</span><span lang="EN-US">archetype</span><span>，紧接着</span><span lang="EN-US">Maven</span><span>会提示我们输入要创建项目的</span><span lang="EN-US">groupId</span><span>、</span><span lang="EN-US">artifactId</span><span>、</span><span lang="EN-US"> version</span><span>、以及包名</span><span lang="EN-US">package</span><span>，如下输入并确认：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>Define&nbsp;value&nbsp;</span><span class="keyword">for</span><span>&nbsp;groupId:&nbsp;:&nbsp;com.juvenxu.mvnbook&nbsp;&nbsp;</span></span></li>
<li><span>Define&nbsp;value&nbsp;<span class="keyword">for</span><span>&nbsp;artifactId:&nbsp;:&nbsp;hello-world&nbsp;&nbsp;</span></span></li>
<li><span>Define&nbsp;value&nbsp;<span class="keyword">for</span><span>&nbsp;version:&nbsp;&nbsp;</span><span class="number">1.0</span><span>-SNAPSHOT:&nbsp;:&nbsp;&nbsp;</span></span></li>
<li><span>Define&nbsp;value&nbsp;<span class="keyword">for</span><span>&nbsp;</span><span class="keyword">package</span><span>:&nbsp;&nbsp;com.juvenxu.mvnbook:&nbsp;:&nbsp;com.juvenxu.mvnbook.helloworld&nbsp;&nbsp;</span></span></li>
<li><span>Confirm&nbsp;properties&nbsp;configuration:&nbsp;&nbsp;</span></li>
<li><span>groupId:&nbsp;com.juvenxu.mvnbook&nbsp;&nbsp;</span></li>
<li><span>artifactId:&nbsp;hello-world&nbsp;&nbsp;</span></li>
<li><span>version:&nbsp;<span class="number">1.0</span><span>-SNAPSHOT&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">package</span><span>:&nbsp;com.juvenxu.mvnbook.helloworld&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;Y:&nbsp;:&nbsp;Y&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Archetype</span><span>插件将根据我们提供的信息创建项目骨架。在当前目录下，</span><span lang="EN-US">Archetype</span><span>插件会创建一个名为</span><span lang="EN-US">hello-world</span><span>（我们定义的</span><span lang="EN-US">artifactId</span><span>）的子目录，从中可以看到项目的基本结构：基本的</span><em><span lang="EN-US">pom.xml</span></em><span>已经被创建，里面包含了必要的信息以及一个</span><span lang="EN-US">junit</span><span>依赖；主代码目录</span><em><span lang="EN-US">src/main/java</span></em><span>已经被创建，在该目录下还有一个</span><span lang="EN-US">Java</span><span>类</span><em><span lang="EN-US">com.juvenxu.mvnbook.helloworld.App</span></em><span>，注意这里使用到了我们刚才定义的包名，而这个类也仅仅只有一个简单的输出</span><span lang="EN-US">Hello
World!</span><span>的</span><span lang="EN-US">main</span><span>方法；测试代码目录</span><em><span lang="EN-US">src/test/java</span></em><span>也被创建好了，并且包含了一个测试用例</span><em><span lang="EN-US">com.juvenxu.mvnbook.helloworld.AppTest</span></em><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Archetype</span><span>可以帮助我们迅速地构建起项目的骨架，在前面的例子中，我们完全可以在</span><span lang="EN-US">Archetype</span><span>生成的骨架的基础上开发</span><span lang="EN-US">Hello World</span><span>项目以节省我们大量时间。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>此外，我们这里仅仅是看到了一个最简单的</span><span lang="EN-US">archetype</span><span>，如果你有很多项目拥有类似的自定义项目结构以及配置文件，你完全可以一劳永逸地开发自己的</span><span lang="EN-US">archetype</span><span>，然后在这些项目中使用自定义的</span><span lang="EN-US">archetype</span><span>来快速生成项目骨架，本书后面的章节会详细阐述如何开发</span><span lang="EN-US">Maven Archetype</span><span>。</span></p>
</div>
<h2>
        3.6 m2eclipse简单使用
        <a name="3352" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>介绍前面</span><span lang="EN-US">Hello World</span><span>项目的时候，我们并没有涉及</span><span lang="EN-US">IDE</span><span>，如此简单的一个项目，使用最简单的编辑器也能很快完成，但对于稍微大一些的项目来说，没有</span><span lang="EN-US">IDE</span><span>就是不可想象的，本节我们先介绍</span><span lang="EN-US">m2eclipse</span><span>的基本使用。</span></p>
<h2>
<span lang="EN-US">3.6.1 </span><span>导入</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>第</span><span lang="EN-US">2</span><span>章介绍了如何安装</span><span lang="EN-US">m2eclipse</span><span>，现在，我们使用</span><span lang="EN-US">m2ecilpse</span><span>导入</span><span lang="EN-US">Hello World</span><span>项目。选择菜单项</span><strong><span lang="EN-US">File</span></strong><span>，然后选择</span><strong><span lang="EN-US">Import</span></strong><span>，我们会看到一个</span><span lang="EN-US">Import</span><span>对话框，在该对话框中选择</span><span lang="EN-US">General</span><span>目录下的</span><strong><span lang="EN-US">Maven Projects</span></strong><span>，然后点击</span><strong><span lang="EN-US">Next</span></strong><span>，就会出现</span><strong><span lang="EN-US">Import Projects</span></strong><span>对话框，在该对话框中点击</span><strong><span lang="EN-US">Browse…</span></strong><span>选择</span><span lang="EN-US">Hello World</span><span>的根目录（即包含</span><span lang="EN-US">pom.xml</span><span>文件的那个目录），这时对话框中的</span><strong><span lang="EN-US">Projects:</span></strong><span>部分就会显示该目录包含的</span><span lang="EN-US">Maven</span><span>项目，如图</span><span lang="EN-US">3-1</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/9a71aa9f-dc5e-32e1-8d0e-f71de55de5e9.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-1 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中导入</span><span lang="EN-US">Maven</span><span>项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>点击</span><span lang="EN-US">Finish</span><span>之后，</span><span lang="EN-US">m2ecilpse</span><span>就会将该项目导入到当前的</span><span lang="EN-US">workspace</span><span>中，导入完成之后，我们就可以在</span><span lang="EN-US">Package Explorer</span><span>视图中看到如图</span><span lang="EN-US">3-2</span><span>所示的项目结构：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/dc2c1bfc-ce95-3395-a5d7-16bdf5894101.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-2 Eclipse</span><span>中导入的</span><span lang="EN-US">Maven</span><span>项目结构</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们看到主代码目录</span><em><span lang="EN-US">src/main/java</span></em><span>和测试代码目录</span><em><span lang="EN-US">src/test/java</span></em><span>成了</span><span lang="EN-US">Eclipse</span><span>中的资源目录，包和类的结构也十分清晰，当然</span><span lang="EN-US">pom.xml</span><span>永远在项目的根目录下，而从这个视图中我们甚至还能看到项目的依赖</span><span lang="EN-US">junit-4.7.jar</span><span>，其实际的位置指向了</span><span lang="EN-US">Maven</span><span>本地仓库（这里我自定义了</span><span lang="EN-US">Maven</span><span>本地仓库地址为</span><em><span lang="EN-US">D:\java\repository</span></em><span>，后续章节会介绍如何自定义本地仓库位置）。</span></p>
<h2>
<span lang="EN-US">3.6.2 </span><span>创建</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>创建一个</span><span lang="EN-US">Maven</span><span>项目也十分简单，选择菜单项</span><strong><span lang="EN-US">File -&gt; New -&gt; Other</span></strong><span>，在弹出的对话框中选择</span><span lang="EN-US">Maven</span><span>下的</span><strong><span lang="EN-US">Maven Project</span></strong><span>，然后点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，在弹出的</span><strong><span lang="EN-US">New Maven Project</span></strong><span>对话框中，我们使用默认的选项（不要选择</span><span lang="EN-US">Create a simple project</span><span>选项，那样我们就能使用</span><span lang="EN-US">Maven Archetype</span><span>），点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，此时</span><span lang="EN-US">m2eclipse</span><span>会提示我们选择一个</span><span lang="EN-US">Archetype</span><span>，我们选择</span><strong><span lang="EN-US">maven-archetype-quickstart</span></strong><span>，再点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>。由于</span><span lang="EN-US">m2eclipse</span><span>实际上是在使用</span><span lang="EN-US">maven-archetype-plugin</span><span>插件创建项目，因此这个步骤与上一节我们使用</span><span lang="EN-US">archetype</span><span>创建项目骨架类似，输入</span><span lang="EN-US">groupId,</span><span>、</span><span lang="EN-US">artifactId</span><span>、</span><span lang="EN-US">version</span><span>、</span><span lang="EN-US">package</span><span>（暂时我们不考虑</span><span lang="EN-US">Properties</span><span>），如图</span><span lang="EN-US">3-3</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/bb255ca9-2341-37fb-aa9c-de619c2bf80a.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-3 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中使用</span><span lang="EN-US">Archetype</span><span>创建项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>注意，为了不和前面已导入的</span><span lang="EN-US">Hello World</span><span>项目产生冲突和混淆，我们使用不同的</span><span lang="EN-US">artifactId</span><span>和</span><span lang="EN-US">package</span><span>。</span><span lang="EN-US">OK</span><span>，点击</span><span lang="EN-US">Finish</span><span>，</span><span lang="EN-US">Maven</span><span>项目就创建完成了，其结构与前一个已导入的</span><span lang="EN-US">Hello World</span><span>项目基本一致。</span></p>
<h2>
<span lang="EN-US">3.6.3 </span><span>运行</span><span lang="EN-US">mvn</span><span>命令</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们需要在命令行输入如</span><span lang="EN-US">mvn clean install</span><span>之类的命令来执行</span><span lang="EN-US">maven</span><span>构建，</span><span lang="EN-US">m2eclipse</span><span>中也有对应的功能，在</span><span lang="EN-US">Maven</span><span>项目或者</span><span lang="EN-US">pom.xml</span><span>上右击，再选择</span><span lang="EN-US">Run As</span><span>，就能看到如下的常见</span><span lang="EN-US">Maven</span><span>命令，如图</span><span lang="EN-US">3-4</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/09f3ec72-eb31-3f25-97af-545213fe4793.jpg" height="286" width="650"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-4 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中运行默认</span><span lang="EN-US">mvn</span><span>命令</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>选择想要执行的</span><span lang="EN-US">Maven</span><span>命令就能执行相应的构建，同时我们也能在</span><span lang="EN-US">Eclipse</span><span>的</span><span lang="EN-US">console</span><span>中看到构建输出。这里常见的一个问题是，默认选项中没有我们想要执行的</span><span lang="EN-US">Maven</span><span>命令怎么办？比如，默认带有</span><span lang="EN-US">mvn
test</span><span>，但我们想执行</span><span lang="EN-US">mvn
clean test</span><span>，很简单，选择</span><strong><span lang="EN-US">Maven buid… </span></strong><span>以自定义</span><span lang="EN-US">Maven</span><span>运行命令，在弹出对话框中的</span><strong><span lang="EN-US">Goals</span></strong><span>一项中输入我们想要执行的命令，如</span><span lang="EN-US">clean test</span><span>，设置一下</span><span lang="EN-US">Name</span><span>，点击</span><strong><span lang="EN-US">Run</span></strong><span>即可。并且，下一次我们选择</span><strong><span lang="EN-US">Maven build</span></strong><span>，或者使用快捷键</span><span lang="EN-US">Alt + Shift + X, M</span><span>快速执行</span><span lang="EN-US">Maven</span><span>构建的时候，上次的配置直接就能在历史记录中找到。图</span><span lang="EN-US">3-5</span><span>就是自定义</span><span lang="EN-US">Maven</span><span>运行命令的界面：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/e5d87183-1eee-3ac6-ba33-577fc7098dcf.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-5 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中自定义</span><span lang="EN-US">mvn</span><span>命令</span></p>
</div>
<h2>
        3.7  NetBeans Maven插件简单使用
        <a name="3353" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">NetBeans</span><span>的</span><span lang="EN-US">Maven</span><span>插件也十分简单易用，我们可以轻松地在</span><span lang="EN-US">NetBeans</span><span>中导入现有的</span><span lang="EN-US">Maven</span><span>项目，或者使用</span><span lang="EN-US">Archetype</span><span>创建</span><span lang="EN-US">Maven</span><span>项目，我们也能够在</span><span lang="EN-US">NetBeans</span><span>中直接运行</span><span lang="EN-US">mvn</span><span>命令。</span></p>
<h2>
<span lang="EN-US">3.7.1 </span><span>打开</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>与其说<strong><em>打开</em></strong></span><span lang="EN-US">Maven</span><span>项目，不如称之为<strong><em>导入</em></strong>更为合适，因为这个项目不需要是</span><span lang="EN-US">NetBeans</span><span>创建的</span><span lang="EN-US">Maven</span><span>项目，不过这里我们还是遵照</span><span lang="EN-US">NetBeans</span><span>菜单中使用的名称。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>选择菜单栏中的<strong>文件</strong>，然后选择<strong>打开项目</strong>，直接定位到</span><span lang="EN-US">Hello World</span><span>项目的根目录，</span><span lang="EN-US">NetBeans</span><span>会十分智能地识别出</span><span lang="EN-US">Maven</span><span>项目，如图</span><span lang="EN-US">3-6</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/2466e26a-6ded-3b86-974e-4fbc8398a281.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">3-6 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中导入</span><span lang="EN-US">Maven</span><span>项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Maven</span><span>项目的图标有别于一般的文件夹，点击<strong>打开项目</strong>后，</span><span lang="EN-US">Hello World</span><span>项目就会被导入到</span><span lang="EN-US">NetBeans</span><span>中，在<strong>项目</strong>视图中可以看到如图</span><span lang="EN-US">3-7</span><span>所示的项目结构：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/142d7729-7fcd-33ee-9fd2-5949990bcde5.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-7 NetBeans</span><span>中导入的</span><span lang="EN-US">Maven</span><span>项目结构</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">NetBeans</span><span>中项目主代码目录的名称为<strong>源包</strong>，测试代码目录成了<strong>测试包</strong>，编译范围依赖为<strong>库</strong>，测试范围依赖为<strong>测试库</strong>，这里我们也能看到</span><span lang="EN-US">pom.xml</span><span>，</span><span lang="EN-US">NetBeans</span><span>甚至还帮我们引用了</span><span lang="EN-US">settings.xml</span><span>。</span></p>
<h2>
<span lang="EN-US">3.7.2 </span><span>创建</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在</span><span lang="EN-US">NetBeans</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目同样十分轻松，在菜单栏中选择<strong>文件</strong>，然后<strong>新建项目</strong>，在弹出的对话框中，选择项目类别为</span><strong><span lang="EN-US">Maven</span></strong><span>，项目为</span><strong><span lang="EN-US">Maven</span></strong><strong><span>项目</span></strong><span>，点击“下一步”之后，对话框会提示我们选择</span><span lang="EN-US">Maven</span><span>原型（即</span><span lang="EN-US">Maven Archtype</span><span>），我们选择</span><strong><span lang="EN-US">Maven</span></strong><strong><span>快速启动原型（</span><span lang="EN-US">1.0</span></strong><strong><span>）</span></strong><span>，（即前文提到的</span><span lang="EN-US">maven-archetype-quickstart</span><span>），点击“下一步”之后，输入项目的基本信息，这些信息在之前讨论</span><span lang="EN-US">archetype</span><span>及在</span><span lang="EN-US">m2eclipse</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目的时候都仔细解释过，不再详述，如图</span><span lang="EN-US">3-8</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/ad86aae9-6350-3f80-939f-02532892a5b7.jpg" height="354" width="650"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-8 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中使用</span><span lang="EN-US">Archetype</span><span>创建</span><span lang="EN-US">Maven</span><span>项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>点击完成之后，一个新的</span><span lang="EN-US">Maven</span><span>项目就创建好了。</span></p>
<h2>
<span lang="EN-US">3.7.3 </span><span>运行</span><span lang="EN-US">mvn</span><span>命令</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">NetBeans</span><span>在默认情况下提供两种</span><span lang="EN-US">Maven</span><span>运行方式，点击菜单栏中的<strong>运行</strong>，我们可以看到<strong>生成项目</strong>和<strong>清理并生成项目</strong>两个选项，我们可以尝试“点击运行</span><span lang="EN-US">Maven</span><span>构建”，根据</span><span lang="EN-US">NetBeans</span><span>控制台的输出，我们就能发现它们实际上对应了</span><strong><span lang="EN-US">mvn install</span></strong><span>和</span><strong><span lang="EN-US">mvn clean install</span></strong><span>两个命令。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在实际开发过程中，我们往往不会满足于这两种简单的方式，比如，有时候我们只想执行项目的测试，而不需要打包，这时我们就希望能够执行</span><strong><span lang="EN-US">mvn clean test</span></strong><span>命令，所幸的是</span><span lang="EN-US">NetBeans Maven</span><span>插件完全支持自定义的</span><span lang="EN-US">mvn</span><span>命令配置。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在菜单栏中选择<strong>工具</strong>，接着选择<strong>选项</strong>，在对话框中，最上面一栏选择<strong>其他</strong>，下面选择</span><strong><span lang="EN-US">Maven</span></strong><span>标签栏，在这里我们可以对</span><span lang="EN-US">NetBeans Maven</span><span>插件进行全局的配置（还记得第</span><span lang="EN-US">2</span><span>章中我们如何配置</span><span lang="EN-US">NetBeans</span><span>使用外部</span><span lang="EN-US">Maven</span><span>么？）。现在，选择倒数第三行的<strong>编辑全局定制目标定义</strong></span><strong><span lang="EN-US">…</span></strong><span>，我们添加一个名为</span><strong><span lang="EN-US">Maven Test</span></strong><span>的操作，执行目标为</span><span lang="EN-US">clean test</span><span>，暂时不考虑其他配置选项，如图</span><span lang="EN-US">3-9</span><span>所示：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;">&nbsp;</p>
<p style="text-align: center;"><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/287a8c73-1313-3b22-a960-e6d6cf5d16a6.jpg" height="467" width="650"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">3-9 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中自定义</span><span lang="EN-US">mvn</span><span>命令</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>点击“缺省保存该配置”，在</span><span lang="EN-US">Maven</span><span>项目上右击，选择<strong>定制</strong>，就能看到刚才配置好的</span><span lang="EN-US">Maven</span><span>运行操作，选择</span><strong><span lang="EN-US">Maven Test</span></strong><span>之后，终端将执行</span><span lang="EN-US">mvn clean test</span><span>。值得一提的是，我们也可以在项目上右击，选择<strong>定制</strong>，再选择<strong>目标</strong></span><strong><span lang="EN-US">…</span></strong><span>再输入想要执行的</span><span lang="EN-US">Maven</span><span>目标（如</span><span lang="EN-US">clean package)</span><span>，点击确定之后</span><span lang="EN-US">NetBeans</span><span>就会执行相应的</span><span lang="EN-US">Maven</span><span>命令。这种方式十分便捷，但这是临时的，该配置不会被保存，也不会有历史记录。</span></p>
</div>
<h2>
        3.8 小结
        <a name="3354" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
        <span style="font-size: medium;">本章以尽可能简单且详细的方式叙述了一个Hello 
World项目，重点解释了POM的基本内容、Maven项目的基本结构、以及构建项目基本的Maven命令。在此基础上，还介绍了如何使用
Archetype快速创建项目骨架。最后讲述的是如何在Eclipse和NetBeans中导入、创建及构建Maven项目。</span>
      </div>
<div style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;" class="mcePaste" id="_mcePaste">
<h2>
        第1章  Maven简介
        <a name="3332" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span>1.1&nbsp; 何为Maven/2</span></p>
<p><span>1.2&nbsp; 为什么需要Maven/4</span></p>
<p><span>1.3&nbsp; Maven与极限编程/7<br>1.4&nbsp; 被误解的Maven/8<br>1.5&nbsp; 小结/9</span></p>
</div>
<h2>
        1.1  何为Maven
        <a name="3333" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;">Maven这个词可以翻译为“知识的积累”，也可以翻译为“专
家”或“内行”。本书将介绍Maven这一跨平台的项目管理工具。作为Apache组织中的一个颇为成功的开源项目，Maven主要服务于基于Java平
台的项目构建、依赖管理和项目信息管理。无论是小型的开源类库项目，还是大型的企业级应用；无论是传统的瀑布式开发，还是流行的敏捷模式，Maven都能
大显身手。</span></p>
<h2><span>1.1.1&nbsp; 何为构建</span></h2>
<p><span style="font-size: small;">不管你是否意识到，构建（build）是每一位程序员每天都在做的工作。早上来
到公司，我们做的第一件事情就是从源码库签出最新的源码，然后进行单元测试，如果发现失败的测试，会找相关的同事一起调试，修复错误代码。接着回到自己的
工作上来，编写自己的单元测试及产品代码，我们会感激IDE随时报出的编译错误提示。<br>忙到午饭时间，代码编写得差不多了，测试也通过了，开心地享
用午餐，然后休息。下午先在昏昏沉沉中开了个例会，会议结束后喝杯咖啡继续工作。刚才在会上经理要求看测试报告，于是找了相关工具集成进IDE，生成了像
模像样的测试覆盖率报告，接着发了一封电子邮件给经理，松了口气。谁料QA小组又发过来了几个bug，没办法，先本地重现再说，于是熟练地用IDE生成了
一个WAR包，部署到Web容器下，启动容器。看到熟悉的界面了，遵循bug报告，一步步重现了bug……快下班的时候，bug修好了，提交代码，通知
QA小组，在愉快中结束了一天的工作。</span></p>
<p><span style="font-size: small;">仔细总结一下，我们会发现，除了编写源代码，我们每天有相当一部分时间花在了编
译、运行单元测试、生成文档、打包和部署等烦琐且不起眼的工作上，这就是构建。如果我们现在还手工这样做，那成本也太高了，于是有人用软件的方法让这一系
列工作完全自动化，使得软件的构建可以像全自动流水线一样，只需要一条简单的命令，所有烦琐的步骤都能够自动完成，很快就能得到最终结果。</span></p>
<h2>1.1.2&nbsp; Maven是优秀的构建工具</h2>
<p><span style="font-size: small;">前面介绍了Maven的用途之一是服务于构建，它是一个异常强大的构建工具，能
够帮我们自动化构建过程，从清理、编译、测试到生成报告，再到打包和部署。我们不需要也不应该一遍又一遍地输入命令，一次又一次地点击鼠标，我们要做的是
使用Maven配置好项目，然后输入简单的命令(如mvn clean install)，Maven会帮我们处理那些烦琐的任务。</span></p>
<p><span style="font-size: small;">Maven是跨平台的，这意味着无论是在Windows上，还是在Linux或者Mac上，都可以使用同样的命令。</span></p>
<p><span style="font-size: small;">我们一直在不停地寻找避免重复的方法。设计的重复、编码的重复、文档的重复，当
然还有构建的重复。Maven最大化地消除了构建的重复，抽象了构建生命周期，并且为绝大部分的构建任务提供了已实现的插件，我们不再需要定义过程，甚至
不需要再去实现这些过程中的一些任务。最简单的例子是测试，我们没必要告诉Maven去测试，更不需要告诉Maven如何运行测试，只需要遵循Maven
的约定编写好测试用例，当我们运行构建的时候，这些测试便会自动运行。</span></p>
<p><span style="font-size: small;">想象一下，Maven抽象了一个完整的构建生命周期模型，这个模型吸取了大量其
他的构建脚本和构建工具的优点，总结了大量项目的实际需求。如果遵循这个模型，可以避免很多不必要的错误，可以直接使用大量成熟的Maven插件来完成我
们的任务（很多时候我们可能都不知道自己在使用Maven插件）。此外，如果有非常特殊的需求，我们也可以轻松实现自己的插件。</span></p>
<p><span style="font-size: small;">Maven还有一个优点，它能帮助我们标准化构建过程。在Maven之前，十个项目可能有十种构建方式；有了Maven之后，所有项目的构建命令都是简单一致的，这极大地避免了不必要的学习成本，而且有利于促进项目团队的标准化。</span></p>
<p><span style="font-size: small;">综上所述，Maven作为一个构建工具，不仅能帮我们自动化构建，还能够抽象构建过程，提供构建任务实现；它跨平台，对外提供了一致的操作接口，这一切足以使它成为优秀的、流行的构建工具。</span></p>
<h2>1.1.3&nbsp; Maven不仅仅是构建工具</h2>
<p><span style="font-size: small;">Java不仅是一门编程语言，还是一个平台，通过JRuby和Jython，我
们可以在Java平台上编写和运行Ruby和Python程序。我们也应该认识到，Maven不仅是构建工具，还是一个依赖管理工具和项目信息管理工具。
它提供了中央仓库，能帮我们自动下载构件。</span></p>
<p><span style="font-size: small;">在这个开源的年代里，几乎任何Java应用都会借用一些第三方的开源类库，这些
类库都可通过依赖的方式引入到项目中来。随着依赖的增多，版本不一致、版本冲突、依赖臃肿等问题都会接踵而来。手工解决这些问题是十分枯燥的，幸运的是
Maven提供了一个优秀的解决方案，它通过一个坐标系统准确地定位每一个构件（artifact），也就是通过一组坐标Maven能够找到任何一个
Java类库（如jar文件）。Maven给这个类库世界引入了经纬，让它们变得有秩序，于是我们可以借助它来有序地管理依赖，轻松地解决那些繁杂的依赖
问题。</span></p>
<p><span style="font-size: small;">Maven还能帮助我们管理原本分散在项目中各个角落的项目信息，包括项目描
述、开发者列表、版本控制系统地址、许可证、缺陷管理系统地址等。这些微小的变化看起来很琐碎，并不起眼，但却在不知不觉中为我们节省了大量寻找信息的时
间。除了直接的项目信息，通过Maven自动生成的站点，以及一些已有的插件，我们还能够轻松获得项目文档、测试报告、静态分析报告、源码版本日志报告等
非常具有价值的项目信息。</span></p>
<p><span style="font-size: small;">Maven还为全世界的Java开发者提供了一个免费的中央仓库，在其中几乎可以找到任何的流行开源类库。通过一些Maven的衍生工具（如Nexus），我们还能对其进行快速地搜索。只要定位了坐标，Maven就能够帮我们自动下载，省去了手工劳动。</span></p>
<p><span style="font-size: small;">使用Maven还能享受一个额外的好处，即Maven对于项目目录结构、测试用
例命名方式等内容都有既定的规则，只要遵循了这些成熟的规则，用户在项目间切换的时候就免去了额外的学习成本，可以说是约定优于配置
（Convention Over Configuration）。</span></p>
</div>
<h2>
        1.2  为什么需要Maven
        <a name="3334" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Maven</span><span>不是<span lang="EN-US">Java</span>领域唯一的构建管理的解决方案。本节将通过一些简单的例子解释<span lang="EN-US">Maven</span>的必要性，并介绍其他构建解决方案，如<span lang="EN-US">IDE</span>、<span lang="EN-US">Make</span>和<span lang="EN-US">Ant</span>，并将它们与<span lang="EN-US">Maven</span>进行比较。</span></span></p>
<h2>
<span style="font-size: small;"><strong><span>1.2.1&nbsp; </span></strong><strong><span>组装<span lang="EN-US">PC</span>和品牌<span lang="EN-US">PC</span></span></strong></span>
</h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>笔者初中时开始接触计算机，到了高中时更是梦寐以求希望拥有一台自己的计算机。我的第一台计算机是赛扬<span lang="EN-US">733</span>的，选购是一个漫长的过程，我先阅读了大量的杂志以了解各类配件的优劣，<span lang="EN-US">CPU</span>、内存、主板、显卡，甚至声卡，我都仔细地挑选，后来还跑了很多商家，调货、讨价还价，组装好后自己装操作系统和驱动程序……虽然这花费了我大量时间，但我很享受这个过程。可是事实证明，装出来的机器稳定性不怎么好。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>一年前我需要配一台工作站，这时候我已经没有太多时间去研究电脑配件了。我选择了某知名<span lang="EN-US">PC</span>供应商的在线商店，大概浏览了一下主流的机型，选择了我需要的配置，然后下单、付款。接着<span lang="EN-US">PC</span>供应商帮我组装电脑、安装操作系统和驱动程序。一周后，物流公司将电脑送到我的家里，我接上显示器、电源、鼠标和键盘就能直接使用了。这为我节省了大量时间，而且这台电脑十分稳定，商家在把电脑发送给我之前已经进行了很好的测试。对了，我还能享受两年的售后服务。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>使用脚本建立高度自定义的构建系统就像买组装<span lang="EN-US">PC</span>，耗时费力，结果也不一定很好。当然，你可以享受从无到有的乐趣，但恐怕实际项目中无法给你那么多时间。使用<span lang="EN-US">Maven</span>就像购买品牌<span lang="EN-US">PC</span>，省时省力，并能得到成熟的构建系统，还能得到来自于<span lang="EN-US">Maven</span>社区的大量支持。唯一与购买品牌<span lang="EN-US">PC</span>不同的是，<span lang="EN-US">Maven</span>是开源的，你无须为此付费。如果有兴趣，你还能去了解<span lang="EN-US">Maven</span>是如何工作的，而我们无法知道那些<span lang="EN-US">PC</span>巨头的商业秘密。</span></span></p>
<h2>
<span style="font-size: small;"><strong><span>1.2.2&nbsp; IDE</span></strong><strong><span>不是万能的</span></strong></span>
</h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>当然，我们无法否认优秀的<span lang="EN-US">IDE</span>能大大提高开发效率。当前主流的<span lang="EN-US">IDE</span>如<span lang="EN-US">Eclipse</span>和<span lang="EN-US">NetBeans</span>等都提供了强大的文本编辑、调试甚至重构功能。虽然使用简单的文本编辑器和命令行也能完成绝大部分开发工作，但很少有人愿意那样做。然而，<span lang="EN-US">IDE</span>是有其天生缺陷的：</span></span></p>
<ul type="disc">
<li class="MsoNormal" style="text-align: left;">
<span style="font-size: small;"><span>IDE</span><span>依赖大量的手工操作。编译、测试、代码生成等工作都是相互独立的，很难一键完成所有工作。手工劳动往往意味着低效，意味着容易出错。</span></span>
</li>
<li class="MsoNormal" style="text-align: left;"><span style="font-size: small;"><span>很难在项目中统一所有的<span lang="EN-US">IDE</span>配置，每个人都有自己的喜好。也正是由于这个原因，一个在机器<span lang="EN-US">A</span>上可以成功运行的任务，到了机器<span lang="EN-US">B</span>的<span lang="EN-US">IDE</span>中可能就会失败。</span></span></li>
</ul>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>我们应该合理利用<span lang="EN-US">IDE</span>，而不是过多地依赖它。对于构建这样的任务，在<span lang="EN-US">IDE</span>中一次次地点击鼠标是愚蠢的行为。<span lang="EN-US">Maven</span>是这方面的专家，而且主流<span lang="EN-US">IDE</span>都集成了<span lang="EN-US">Maven</span>，我们可以在<span lang="EN-US">IDE</span>中方便地运行<span lang="EN-US">Maven</span>执行构建。</span></span></p>
<h2 class="MsoNormal" style="text-align: left;"><span style="font-size: small;"><strong><span>1.2.3&nbsp; Make</span></strong></span></h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Make</span><span>也许是最早的构建工具，它由<span lang="EN-US">Stuart
Feldman</span>于<span lang="EN-US">1977</span>年在<span lang="EN-US">Bell</span>实验室创建。<span lang="EN-US">Stuart Feldman</span>也因此于<span lang="EN-US">2003</span>年获得了<span lang="EN-US">ACM</span>国际计算机组织颁发的软件系统奖。目前<span lang="EN-US">Make</span>有很多衍生实现，包括最流行的<span lang="EN-US">GNU Make</span>和<span lang="EN-US">BSD Make</span>，还有<span lang="EN-US">Windows</span>平台的<span lang="EN-US">Microsoft nmake</span>等。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Make</span><span>由一个名为<span lang="EN-US">Makefile</span>的脚本文件驱动，该文件使用<span lang="EN-US">Make</span>自己定义的语法格式。其基本组成部分为一系列规则（<span lang="EN-US">Rules</span>），而每一条规则又包括目标（<span lang="EN-US">Target</span>）、依赖（<span lang="EN-US">Prerequisite</span>）和命令（<span lang="EN-US">Command</span>）。<span lang="EN-US">Makefile</span>的基本结构如下：</span></span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;TARGET…&nbsp;:&nbsp;PREREQUISITE…&nbsp;&nbsp;</span></span></li>
<li><span>COMMAND&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;<span>&nbsp;&nbsp;&nbsp; Make</span><span>通过一系列目标和依赖将整个构建过程串联起来，同时利用本地命令完成每个目标的实际行为。<span lang="EN-US">Make</span>的强大之处在于它可以利用所有系统的本地命令，尤其是<span lang="EN-US">UNIX/Linux</span>系统，丰富的功能、强大的命令能够帮助<span lang="EN-US">Make</span>快速高效地完成任务。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>但是，<span lang="EN-US">Make</span>将自己和操作系统绑定在一起了。也就是说，使用<span lang="EN-US">Make</span>，就不能实现（至少很难）跨平台的构建，这对于<span lang="EN-US">Java</span>来说是非常不友好的。此外，<span lang="EN-US">Makefile</span>的语法也成问题，很多人抱怨<span lang="EN-US">Make</span>构建失败的原因往往是一个难以发现的空格或<span lang="EN-US">Tab</span>使用错误。</span></span></p>
<h2 class="MsoNormal" style="text-align: left;"><span style="font-size: small;"><strong><span>1.2.4&nbsp; Ant</span></strong></span></h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Ant</span><span>不是指蚂蚁，而是意指“另一个整洁的工具”（<span lang="EN-US">Another Neat Tool</span>），它最早用来构建著名的<span lang="EN-US">Tomcat</span>，其作者<span lang="EN-US">James Duncan Davidson</span>创作它的动机就是因为受不了<span lang="EN-US">Makefile</span>的语法格式。我们可以将<span lang="EN-US">Ant</span>看成是一个<span lang="EN-US">Java</span>版本的<span lang="EN-US">Make</span>，也正因为使用了<span lang="EN-US">Java</span>，<span lang="EN-US">Ant</span>是跨平台的。此外，<span lang="EN-US">Ant</span>使用<span lang="EN-US">XML</span>定义构建脚本，相对于<span lang="EN-US">Makefile</span>来说，这也更加友好。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>与<span lang="EN-US">Make</span>类似，<span lang="EN-US">Ant</span>有一个构建脚本<span lang="EN-US">build.xml</span>，如下所示： </span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>&lt;?xml version="1.0"?&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>&lt;project name="Hello"
default="compile"&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;target name="compile"
description="compile the Java source code to class files"&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;mkdir dir="classes"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;javac srcdir="."
destdir="classes"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;/target&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;target name="jar"
depends="compile" description="create a Jar file "&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;jar destfile="hello.jar"&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 84pt;" align="left"><span style="font-size: small;"><span>&lt;fileset dir="classes" includes="**/*.class"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 84pt;" align="left"><span style="font-size: small;"><span>&lt;manifest&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 105pt;" align="left"><span style="font-size: small;"><span>&lt;attribute name="Main.Class"
value="HelloProgram"/&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 84pt;" align="left"><span style="font-size: small;"><span>&lt;/manifest&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 63pt;" align="left"><span style="font-size: small;"><span>&lt;/jar&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 42pt;" align="left"><span style="font-size: small;"><span>&lt;/target&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>&lt;/project&gt;</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>build.xml</span><span>的基本结构也是目标（<span lang="EN-US">target</span>）、依赖（<span lang="EN-US">depends</span>），以及实现目标的任务。比如在上面的脚本中，<span lang="EN-US">jar</span>目标用来创建应用程序<span lang="EN-US">jar</span>文件，该目标依赖于<span lang="EN-US">compile</span>目标，后者执行的任务是创建一个名为<span lang="EN-US">classes</span>的文件夹，编译当前目录的<span lang="EN-US">java</span>文件至<span lang="EN-US">classes</span>目录。<span lang="EN-US">compile</span>目标完成后，<span lang="EN-US">jar</span>目标再执行自己的任务。<span lang="EN-US">Ant</span>有大量内置的用<span lang="EN-US">Java</span>实现的任务，这保证了其跨平台的特质，同时，<span lang="EN-US">Ant</span>也有特殊的任务<span lang="EN-US">exec</span>来执行本地命令。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>和<span lang="EN-US">Make</span>一样，<span lang="EN-US">Ant</span>也都是过程式的，开发者显式地指定每一个目标，以及完成该目标所需要执行的任务。针对每一个项目，开发者都需要重新编写这一过程，这里其实隐含着很大的重复。<span lang="EN-US">Maven</span>是声明式的，项目构建过程和过程各个阶段所需的工作都由插件实现，并且大部分插件都是现成的，开发者只需要声明项目的基本元素，<span lang="EN-US">Maven</span>就执行内置的、完整的构建过程。这在很大程度上消除了重复。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>Ant</span><span>是没有依赖管理的，所以很长一段时间<span lang="EN-US">Ant</span>用户都不得不手工管理依赖，这是一个令人头疼的问题。幸运的是，<span lang="EN-US">Ant</span>用户现在可以借助<span lang="EN-US">Ivy</span>管理依赖。而对于<span lang="EN-US">Maven</span>用户来说，依赖管理是理所当然的，<span lang="EN-US">Maven</span>不仅内置了依赖管理，更有一个可能拥有全世界最多<span lang="EN-US">Java</span>开源软件包的中央仓库，<span lang="EN-US">Maven</span>用户无须进行任何配置就可以直接享用。</span></span></p>
<h2>
<span style="font-size: small;"><strong><span>1.2.5&nbsp; </span></strong><strong><span>不重复发明轮子</span></strong></span>
</h2>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><strong><span style="color: #0000ff;"><span>【该小节内容整理自网友<span lang="EN-US">Arthas</span>最早在<span lang="EN-US">Maven</span>中文<span lang="EN-US">MSN</span>的群内的讨论，在此表示感谢】</span></span></strong></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>小张是一家小型民营软件公司的程序员，他所在的公司要开发一个新的<span lang="EN-US">Web</span>项目。经过协商，决定使用<span lang="EN-US">Spring</span>、<span lang="EN-US">iBatis</span>和<span lang="EN-US">Tapstry</span>。<span lang="EN-US">jar</span>包去哪里找呢？公司里估计没有人能把<span lang="EN-US">Spring</span>、<span lang="EN-US">iBatis</span>和<span lang="EN-US">Tapstry</span>所使用的<span lang="EN-US">jar</span>包一个不少地找出来。大家的做法是，先到<span lang="EN-US">Spring</span>的站点上去找一个<span lang="EN-US">spring.with.dependencies</span>，然后去<span lang="EN-US">iBatis</span>的网站上把所有列出来的<span lang="EN-US">jar</span>包下载下来，对<span lang="EN-US">Tapstry</span>、<span lang="EN-US">Apache commons</span>等执行同样的操作。项目还没有开始，<span lang="EN-US">WEB.INF/lib</span>下已经有近百个<span lang="EN-US">jar</span>包了，带版本号的、不带版本号的、有用的、没用的、相冲突的，怎一个“乱”字了得！</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>在项目开发过程中，小张不时地发现版本错误和版本冲突问题，他只能硬着头皮逐一解决。项目开发到一半，经理发现最终部署的应用的体积实在太大了，要求小张去掉一些没用的<span lang="EN-US">jar</span>包，于是小张只能加班加点地一个个删……</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>小张隐隐地觉得这些依赖需要一个框架或者系统来进行管理。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>小张喜欢学习流行的技术，前几年<span lang="EN-US">Ant</span>十分流行，他学了，并成为了公司这方面的专家。小张知道，<span lang="EN-US">Ant</span>打包，无非就是创建目录，复制文件，编译源代码，使用一堆任务，如<span lang="EN-US">copydir</span>、<span lang="EN-US">fileset</span>、<span lang="EN-US">classpath</span>、<span lang="EN-US">ref</span>、<span lang="EN-US">target</span>，然后再<span lang="EN-US">jar</span>、<span lang="EN-US">zip</span>、<span lang="EN-US">war</span>，打包就成功了。</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>项目经理发话了：“兄弟们，新项目来了，小张，你来写<span lang="EN-US">Ant</span>脚本！”</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>“是，保证完成任务！”接着，小张继续创建一个新的<span lang="EN-US">XML</span>文件。<span lang="EN-US">target
clean; target compile; target jar; </span>…… 不知道他是否想过，在他写的这么多的<span lang="EN-US">Ant</span>脚本中，有多少是重复劳动，有多少代码会在一个又一个项目中重现。既然都差不多，有些甚至完全相同，为什么每次都要重新编写？</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>终于有一天，小张意识到了这个问题，想复用<span lang="EN-US">Ant</span>脚本，于是在开会时他说：“以后就都用我这个规范的<span lang="EN-US">Ant</span>脚本吧，新的项目只要遵循我定义的目录结构就可以了。”经理听后觉得很有道理：“嗯，确实是个进步。”</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>这时新来的研究生发言了：“经理，用<span lang="EN-US">Maven</span>吧，这个在开源社区很流行，比<span lang="EN-US">Ant</span>更方便。”小张一听很惊讶，<span lang="EN-US">Maven</span>真比自己的“规范化<span lang="EN-US">Ant</span>”强大？其实他不知道自己只是在重新发明轮子，<span lang="EN-US">Maven</span>已经有一大把现成的插件，全世界都在用，你自己不用写任何代码！</span></span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;" align="left"><span style="font-size: small;"><span>为什么没有人说“我自己写的代码最灵活，所以我不用<span lang="EN-US">Spring</span>，我自己实现<span lang="EN-US">IoC</span>；我不用<span lang="EN-US">Hibernate</span>，我自己封装<span lang="EN-US">JDBC</span>”？</span></span></p>
</div>
<h2>
        1.3  Maven与极限编程
        <a name="3336" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;">极限编程（XP）是近些年在软件行业红得发紫的敏捷开发方法，它强调拥抱变化。该软件开发方法的创始人Kent Beck提出了XP所追求的价值、实施原则和推荐实践。下面看一下Maven是如何适应XP的。<br>首先看一下Maven如何帮助XP团队实现一些核心价值：<br></span></p>
<ul>
<li><span style="font-size: small;">简单。Maven暴露了一组一致、简洁的操作接口，能帮助团队成员从原来的高度自定义的、复杂的构建系统中解脱出来，使用Maven现有的成熟的、稳定的组件也能简化构建系统的复杂度。</span></li>
<li><span style="font-size: small;">交流与反馈。与版本控制系统结合后，所有人都能执行最新的构建并快速得到反馈。此外，自动生成的项目报告也能帮助成员了解项目的状态，促进团队的交流。</span></li>
</ul>
<p><span style="font-size: small;">此外，Maven更能无缝地支持或者融入到一些主要的XP实践中：<br></span></p>
<ul>
<li><span style="font-size: small;">测试驱动开发（TDD）。TDD强调测试先行，所有产品都应该由测试用例覆盖。而测试是Maven生命周期的最重要的组成部分之一，并且Maven有现成的成熟插件支持业界流行的测试框架，如JUnit和TestNG。</span></li>
<li><span style="font-size: small;">十分钟构建。十分钟构建强调我们能够随时快速地从源码构建出最终的产品。这正是Maven所擅长的，只需要一些配置，之后用一条简单的命令就能让Maven帮你清理、编译、测试、打包、部署，然后得到最终的产品。</span></li>
<li><span style="font-size: small;">持续集成（CI）。CI强调项目以很短的周期（如15分钟）集成最新的代码。
实际上,CI的前提是源码管理系统和构建系统。目前业界流行的CI服务器如Hudson和CruiseControl都能很好地和Maven进行集成。也
就是说，使用Maven后，持续集成会变得更加方便。</span></li>
<li><span style="font-size: small;">富有信息的工作区。 
这条实践强调开发者能够快速方便地了解到项目的最新状态。当然，Maven并不会帮你把测试覆盖率报告贴到墙上，也不会在你的工作台上放个鸭子告诉你构建
失败了。不过使用Maven发布的项目报告站点，并配置你需要的项目报告，如测试覆盖率报告，都能帮你把信息推送到开发者眼前。</span></li>
</ul>
<p><span style="font-size: small;">上述这些实践并非只在XP中适用。事实上，除了其他敏捷开发方法如SCRUM之外，几乎任何软件开发方法都能借鉴这些实践。也就是说，Maven几乎能够很好地支持任何软件开发方法。<br>例
如，在传统的瀑布模型开发中，项目依次要经历需求开发、分析、设计、编码、测试和集成发布阶段。从设计和编码阶段开始，就可以使用Maven来建立项目的
构建系统。在设计阶段，也完全可以针对设计开发测试用例，然后再编写代码来满足这些测试用例。然而，有了自动化构建系统，我们可以节省很多手动的测试时
间。此外，尽早地使用构建系统集成团队的代码，对项目也是百利而无一害。最后，Maven还能帮助我们快速地发布项目。<br></span></p>
</div>
<h2>
        第2章 Maven的安装和配置
        <a name="3337" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;">第1章介绍了Maven是什么，以及为什么要使用Maven，
我们将从本章实际开始实际接触Maven。本章首先将介绍如何在主流的操作系统下安装Maven，并详细解释Maven的安装文件；其次还会介绍如何在主
流的IDE中集成Maven，以及Maven安装的最佳实践。<br>2.1 在Windows上安装Maven<br>2.2 在基于Unix的系统上安装Maven<br>2.3 安装目录分析<br>2.4 设置HTTP代理<br>2.5 安装m2eclipse<br>2.6 安装NetBeans Maven插件<br>2.7 Maven安装最佳实践<br>2.8 小结</span></p>
</div>
<h2>
        2.1 在Windows上安装Maven
        <a name="3338" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<h2>
<span lang="EN-US">2.1.1 </span><span>检查</span><span lang="EN-US">JDK</span><span>安装</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在安装</span><span lang="EN-US">Maven</span><span>之前，首先要确认你已经正确安装了</span><span lang="EN-US">JDK</span><span>。</span><span lang="EN-US">Maven</span><span>可以运行在</span><span lang="EN-US">JDK 1.4</span><span>及以上的版本上。本书的所有样例都基于</span><span lang="EN-US">JDK 5</span><span>及以上版本。打开</span><span lang="EN-US">Windows</span><span>的命令行，运行如下的命令来检查你的</span><span lang="EN-US">Java</span><span>安装：</span><span lang="EN-US"> </span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven
Xu&gt;echo %JAVA_HOME%</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven
Xu&gt;java -version</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>结果如图</span><span lang="EN-US">2-1</span><span>所示：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/e4f32577-29ad-35a7-b384-753eb4df2e37.jpg"><br>&nbsp;<span>图</span><span lang="EN-US">2-1 Windows</span><span>中检查</span><span lang="EN-US">Java</span><span>安装</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>上述命令首先检查环境变量</span><span lang="EN-US">JAVA_HOME</span><span>是否指向了正确的</span><span lang="EN-US">JDK</span><span>目录，接着尝试运行</span><span lang="EN-US">java</span><span>命令。如果</span><span lang="EN-US">Windows</span><span>无法执行</span><span lang="EN-US">java</span><span>命令，或者无法找到</span><span lang="EN-US">JAVA_HOME</span><span>环境变量。你就需要检查</span><span lang="EN-US">Java</span><span>是否安装了，或者环境变量是否设置正确。关于环境变量的设置，请参考</span><span lang="EN-US">2.1.3</span><span>节。</span></p>
<h2>
<span lang="EN-US">2.1.2 </span><span>下载</span><span lang="EN-US">Maven</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>请访问</span><span lang="EN-US">Maven</span><span>的下载页面：</span><span lang="EN-US"><a href="http://maven.apache.org/download.html">http://maven.apache.org/download.html</a></span><span>，其中包含针对不同平台的各种版本的</span><span lang="EN-US">Maven</span><span>下载文件。对于首次接触</span><span lang="EN-US">Maven</span><span>的读者来说，推荐使用</span><span lang="EN-US">Maven 3.0</span><span>，，因此下载</span><span lang="EN-US">apache-maven-3.0-bin.zip</span><span>。当然，如果你对</span><span lang="EN-US">Maven</span><span>的源代码感兴趣并想自己构建</span><span lang="EN-US">Maven</span><span>，还可以下载</span><span lang="EN-US">apache-maven-3.0 -src.zip</span><span>。该下载页面还提供了</span><span lang="EN-US">md5</span><span>校验和（</span><span lang="EN-US">checksum</span><span>）文件和</span><span lang="EN-US">asc</span><span>数字签名文件，可以用来检验</span><span lang="EN-US">Maven</span><span>分发包的正确性和安全性。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在本书编写的时候，</span><span lang="EN-US">Maven 2</span><span>的最新版本是</span><span lang="EN-US">2.2.1</span><span>，</span><span lang="EN-US">Maven 3</span><span>基本完全兼容</span><span lang="EN-US">Maven 2</span><span>，而且较之于</span><span lang="EN-US">Maven 2</span><span>它性能更好，还有不少功能的改进，如果你之前一直使用</span><span lang="EN-US">Maven 2</span><span>，现在正犹豫是否要升级，那就大可不必担心了，快点尝试下</span><span lang="EN-US">Maven 3</span><span>吧！</span><em>&nbsp;</em></p>
<h2>
<span lang="EN-US">2.1.3 </span><span>本地安装</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>将安装文件解压到你指定的目录中，如：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">D:\bin&gt;jar xvf
"C:\Users\Juven Xu\Downloads\apache-maven-3.0--bin.zip"</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>这里的</span><span lang="EN-US">Maven</span><span>安装目录是</span><span lang="EN-US">D:\bin\apache-maven-3.0</span><span>，接着需要设置环境变量，将</span><span lang="EN-US">Maven</span><span>安装配置到操作系统环境中。</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>打开系统属性面板（桌面上右键单击“我的电脑”→“属性”），点击<strong>高级系统设置</strong>，再点击<strong>环境变量</strong>，在<strong>系统变量</strong>中新建一个变量，变量名为</span><em><span lang="EN-US">M2_HOME</span></em><span>，变量值为</span><span lang="EN-US">Maven</span><span>的安装目录</span><em><span lang="EN-US">D:\bin\apache-maven-3.0</span></em><span>。点击<strong>确定</strong>，接着在系统变量中找到一个名为</span><span lang="EN-US">Path</span><span>的变量，在变量值的末尾加上</span><em><span lang="EN-US">%M2_HOME%\bin;</span></em><span>，注意多个值之间需要有分号隔开，然后点击<strong>确定</strong>。至此，环境变量设置完成，详细情况如图</span><span lang="EN-US">2-2</span><span>所示：</span></p>
<p style="text-align: center;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/e6eb45c3-d0a4-351b-9aad-d23df67422cf.jpg"></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: center; text-indent: 21pt;" align="center"><span lang="EN-US">
 
</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">2-2 Windows</span><span>中系统环境变量配置</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>这里需要提一下的是</span><span lang="EN-US">Path</span><span>环境变量，当我们在</span><span lang="EN-US">cmd</span><span>中输入命令时，</span><span lang="EN-US">Windows</span><span>首先会在当前目录中寻找可执行文件或脚本，如果没有找到，</span><span lang="EN-US">Windows</span><span>会接着遍历环境变量</span><span lang="EN-US">Path</span><span>中定义的路径。由于我们将</span><em><span lang="EN-US">%M2_HOME%\bin</span></em><span>添加到了</span><span lang="EN-US">Path</span><span>中，而这里</span><span lang="EN-US">%M2_HOME%</span><span>实际上是引用了我们前面定义的另一个变量，其值是</span><span lang="EN-US">Maven</span><span>的安装目录。因此，</span><span lang="EN-US">Windows</span><span>会在执行命令时搜索目录</span><em><span lang="EN-US">D:\bin\apache-maven-3.0\bin</span></em><span>，而</span><span lang="EN-US">mvn</span><span>执行脚本的位置就是这里。</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>明白了环境变量的作用，现在打开一个新的</span><span lang="EN-US">cmd</span><span>窗口（这里强调新的窗口是因为新的环境变量配置需要新的</span><span lang="EN-US">cmd</span><span>窗口才能生效），运行如下命令检查</span><span lang="EN-US">Maven</span><span>的安装情况：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven Xu&gt;<strong>echo %M2_HOME%</strong></span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">C:\Users\Juven Xu&gt;mvn
-v </span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: left; text-indent: 21pt;"><span>运行结果如图</span><span lang="EN-US">2-3</span><span>所示：</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-align: center; text-indent: 21pt;"><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/5f9c6a8e-f021-3f3c-850d-aad3e71ff083.jpg" height="238" width="650"><br>&nbsp;<span>图</span><span lang="EN-US">2-3 Windows</span><span>中检查</span><span lang="EN-US">Maven</span><span>安装</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>第一条命令</span><strong><span lang="EN-US">echo %M2_HOME%</span></strong><span>用来检查环境变量</span><span lang="EN-US">M2_HOME</span><span>是否指向了正确的</span><span lang="EN-US">Maven</span><span>安装目录；而</span><strong><span lang="EN-US">mvn –version</span></strong><span>执行了第一条</span><span lang="EN-US">Maven</span><span>命令，以检查</span><span lang="EN-US">Windows</span><span>是否能够找到正确的</span><span lang="EN-US">mvn</span><span>执行脚本。</span></p>
<h2>
<span lang="EN-US">2.1.4 </span><span>升级</span><span lang="EN-US">Maven</span>
</h2>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span lang="EN-US">Maven</span><span>还比较年轻，更新比较频繁，因此用户往往会需要更新</span><span lang="EN-US">Maven</span><span>安装以获得更多更酷的新特性，以及避免一些旧的</span><span lang="EN-US">bug</span><span>。</span></p>
<p class="MsoNormal" style="margin-right: 10.5pt; text-indent: 21pt;"><span>在</span><span lang="EN-US">Windows</span><span>上更新</span><span lang="EN-US">Maven</span><span>非常简便，只需要下载新的</span><span lang="EN-US">Maven</span><span>安装文件，解压至本地目录，然后更新</span><span lang="EN-US">M2_HOME</span><span>环境变量便可。例如，假设</span><span lang="EN-US">Maven</span><span>推出了新版本</span><span lang="EN-US">3.1</span><span>，我们将其下载然后解压至目录</span><em><span lang="EN-US">D:\bin\apache-maven-3.1</span></em><span>，接着遵照前一节描述的步骤编辑环境变量</span><span lang="EN-US">M2_HOME</span><span>，更改其值为</span><span lang="EN-US">D:\bin\apache-maven-3.1</span><span>。至此，更新就完成了。同理，如果你需要使用某一个旧版本的</span><span lang="EN-US">Maven</span><span>，也只需要编辑</span><span lang="EN-US">M2_HOME</span><span>环境变量指向旧版本的安装目录。</span></p>
</div>
<h2>
        2.2 在基于Unix的系统上安装Maven
        <a name="3339" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">Maven</span><span>是跨平台的，它可以在任何一种主流的操作系统上运行，本节将介绍如何在基于</span><span lang="EN-US">Unix</span><span>的系统（包括</span><span lang="EN-US">Linux</span><span>、</span><span lang="EN-US">Mac OS</span><span>以及</span><span lang="EN-US">FreeBSD</span><span>等）上安装</span><span lang="EN-US">Maven</span><span>。</span></span></p>
<h2>
<span style="font-size: small;"><span lang="EN-US">2.2.1 </span><span>下载和安装</span></span>
</h2>
<p class="MsoNormal" style="margin-bottom: 12pt; text-indent: 21pt;"><span style="font-size: small;"><span>首先，与在</span><span lang="EN-US">Windows</span><span>上安装</span><span lang="EN-US">Maven</span><span>一样，需要检查</span><span lang="EN-US">JAVA_HOME</span><span>环境变量以及</span><span lang="EN-US">Java</span><span>命令，细节不再赘述，命令如下：</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:~$
echo $JAVA_HOME</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:~$
java –version</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>运行结果如图</span><span lang="EN-US">2-4</span><span>所示：</span><br></span></p>
<p style="text-align: center;"><span style="font-size: small;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/36e9efed-0a2b-316b-aa38-b07d7db76249.jpg"></span></p>
<p class="MsoNormal" style="margin-bottom: 12pt; text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 12pt 21pt; text-align: center; text-indent: 0cm;" align="center"><span style="font-size: small;"><span>图</span><span lang="EN-US">2-4 Linux</span><span>中检查</span><span lang="EN-US">Java</span><span>安装</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span>接着到</span><span lang="EN-US">http://maven.apache.org/download.html</span><span>下载</span><span lang="EN-US">Maven</span><span>安装文件，如</span><span lang="EN-US">apache-maven-3.0-bin.tar.gz</span><span lang="EN-US">，然后解压到本地目录：</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$ tar
-xvzf apache-maven-3.0-bin.tar.gz </span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>现在已经创建好了一个</span><span lang="EN-US">Maven</span><span>安装目录</span><span lang="EN-US">apache-maven-3.0</span><span>，虽然直接使用该目录配置环境变量之后就能使用</span><span lang="EN-US">Maven</span><span>了，但这里我更推荐做法是，在安装目录旁平行地创建一个符号链接，以方便日后的升级：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span class="Char0"><span style="font-size: 10.5pt;" lang="EN-US">juven@juven-ubuntu:bin$
ln -s apache-maven-3.0 apache-maven<br>
juven@juven-ubuntu:bin$ ls -l<br>
total 4<br>
lrwxrwxrwx 1 juven juven&nbsp;&nbsp; 18 2009-09-20 15:43 apache-maven -&gt;
apache-maven-3.0</span></span><span lang="EN-US"><br>
drwxr-xr-x 6 juven juven 4096 2009-09-20 15:39 apache-maven-3.0</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>接下来，我们需要设置</span><span lang="EN-US">M2_HOME</span><span>环境变量指向符号链接</span><span lang="EN-US">apache-maven-</span><span>，并且把</span><span lang="EN-US">Maven</span><span>安装目录下的</span><span lang="EN-US">bin/</span><span>文件夹添加到系统环境变量</span><span lang="EN-US">PATH</span><span>中去：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
export M2_HOME=/home/juven/bin/apache-maven<br>
juven@juven-ubuntu:bin$ export PATH=$PATH:$M2_HOME/bin</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>一般来说，需要将这两行命令加入到系统的登录</span><span lang="EN-US">shell</span><span>脚本中去，以我现在的</span><span lang="EN-US">Ubuntu
8.10</span><span>为例，编辑</span><span lang="EN-US">~/.bashrc</span><span>文件，添加这两行命令。这样，每次启动一个终端，这些配置就能自动执行。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>至此，安装完成，我们可以运行以下命令检查</span><span lang="EN-US">Maven</span><span>安装：</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
echo $M2_HOME</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
mvn –version</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt; text-align: left;"><span style="font-size: small;"><span>运行结果如图</span><span lang="EN-US">2-5</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt; text-align: center;"><span style="font-size: small;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/959d44eb-7c3b-3987-be2e-bf28c3936c8b.jpg"></span></p>
<p style="text-align: center;"><span style="font-size: small;">&nbsp;<span>图</span><span lang="EN-US">2-5 Linux</span><span>中检查</span><span lang="EN-US">Maven</span><span>安装</span></span></p>
<h2>
<span style="font-size: small;"><span lang="EN-US">2.2.2 </span><span>升级</span><span lang="EN-US">Maven</span></span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在基于</span><span lang="EN-US">Unix</span><span>的系统上，可以利用符号链接这一工具来简化</span><span lang="EN-US">Maven</span><span>的升级，不必像在</span><span lang="EN-US">Windows</span><span>上那样，每次升级都必须更新环境变量。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>前一小节中我们提到，解压</span><span lang="EN-US">Maven</span><span>安装包到本地之后，平行地创建一个符号链接，然后在配置环境变量时引用该符号链接，这样做是为了方便升级。现在，假设我们需要升级到新的</span><span lang="EN-US">Maven 3.1</span><span>版本，同理，将安装包解压到与前一版本平行的目录下，然后更新符号链接指向</span><span lang="EN-US">3.1</span><span>版的目录便可：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">juven@juven-ubuntu:bin$
rm apache-maven<br>
juven@juven-ubuntu:bin$ ln -s apache-maven-3.1/ apache-maven<br>
juven@juven-ubuntu:bin$ ls -l<br>
total 8<br>
lrwxrwxrwx 1 juven juven&nbsp;&nbsp; 17 2009-09-20 16:13 apache-maven -&gt;
apache-maven-3.1 /<br>
drwxr-xr-x 6 juven juven 4096 2009-09-20 15:39 apache-maven-3.0drwxr-xr-x 2
juven juven 4096 2009-09-20 16:09 apache-maven-3.1</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>同理，可以很方便地切换到</span><span lang="EN-US">Maven</span><span>的任意一个版本。现在升级完成了，可以运行</span><strong><span lang="EN-US">mvn -v</span></strong><span>进行检查。</span></span></p>
</div>
<h2>
        2.3 安装目录分析
        <a name="3340" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p><span style="font-size: small;"><span>本章前面的内容讲述了如何在各种操作系统中安装和升级</span><span lang="EN-US">Maven</span><span>。现在我们来仔细分析一下</span><span lang="EN-US">Maven</span><span>的安装文件。</span></span></p>
<h2><span style="font-size: small;"><span lang="EN-US">2.3.1 M2_HOME</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>前面我们讲到设置</span><span lang="EN-US">M2_HOME</span><span>环境变量指向</span><span lang="EN-US">Maven</span><span>的安装目录，本书之后所有使用</span><span lang="EN-US">M2_HOME</span><span>的地方都指代了该安装目录，让我们看一下该目录的结构和内容：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">bin<br>
boot<br>
conf<br>
lib<br>
LICENSE.txt<br>
NOTICE.txt<br>
README.txt</span></span></p>
<ul>
<li><span style="font-size: small;"><span style="font-family: Wingdings;"><span>&nbsp;</span></span><span lang="EN-US">Bin</span><span>：</span> <span>该目录包含了</span><span lang="EN-US">mvn</span><span>运行的脚本，这些脚本用来配置</span><span lang="EN-US">Java</span><span>命令，准备好</span><span lang="EN-US">classpath</span><span>和相关的</span><span lang="EN-US">Java</span><span>系统属性，然后执行</span><span lang="EN-US">Java</span><span>命令。其中</span><em><span lang="EN-US">mvn</span></em><span>是基于</span><span lang="EN-US">UNIX</span><span>平台的</span><span lang="EN-US">shell</span><span>脚本，</span><em><span lang="EN-US">mvn.bat</span></em><span>是基于</span><span lang="EN-US">Windows</span><span>平台的</span><span lang="EN-US">bat</span><span>脚本。在命令行输入任何一条</span><span lang="EN-US">mvn</span><span>命令时，实际上就是在调用这些脚本。该目录还包含了</span><em><span lang="EN-US">mvnDebug</span></em><span>和</span><em><span lang="EN-US">mvnDebug.bat</span></em><span>两个文件，同样，前者是</span><span lang="EN-US">UNIX</span><span>平台的</span><span lang="EN-US">shell</span><span>脚本，后者是</span><span lang="EN-US">windows</span><span>的</span><span lang="EN-US">bat</span><span>脚本。那么</span><span lang="EN-US">mvn</span><span>和</span><span lang="EN-US">mvnDebug</span><span>有什么区别和关系呢？打开文件我们就可以看到，两者基本是一样的，只是</span><span lang="EN-US">mvnDebug</span><span>多了一条</span><span lang="EN-US">MAVEN_DEBUG_OPTS</span><span>配置，作用就是在运行</span><span lang="EN-US">Maven</span><span>时开启</span><span lang="EN-US">debug</span><span>，以便调试</span><span lang="EN-US">Maven</span><span>本身。此外，该目录还包含</span><em><span lang="EN-US">m2.conf</span></em><span>文件，这是</span><span lang="EN-US">classworlds</span><span>的配置文件，稍微会介绍</span><span lang="EN-US">classworlds</span><span>。</span></span></li>
<li><span style="font-size: small;"><span lang="EN-US">Boot</span><span>：</span> <span>该目录只包含一个文件，以</span><span lang="EN-US">maven 3.0</span><span>为例，该文件为</span><em><span lang="EN-US">plexus-classworlds-2.2.3.jar</span></em><span>。</span><span lang="EN-US">plexus-classworlds</span><span>是一个类加载器框架，相对于默认的</span><span lang="EN-US">java</span><span>类加载器，它提供了更丰富的语法以方便配置，</span><span lang="EN-US">Maven</span><span>使用该框架加载自己的类库。更多关于</span><span lang="EN-US">classworlds</span><span>的信息请参考</span><span lang="EN-US"><a href="http://classworlds.codehaus.org/">http://classworlds.codehaus.org/</a></span><span>。对于一般的</span><span lang="EN-US">Maven</span><span>用户来说，不必关心该文件。</span></span></li>
<li>
<span style="font-size: small;"><span lang="EN-US">Conf</span><span>：</span> <span>该目录包含了一个非常重要的文件</span><em><span lang="EN-US">settings.xml</span></em><span>。直接修改该文件，就能在机器上全局地定制</span><span lang="EN-US">Maven</span><span>的行为。一般情况下，我们更偏向于复制该文件至</span><em><span lang="EN-US">~/.m2/</span></em><span>目录下（这里</span><span lang="EN-US">~</span><span>表示用户目录），然后修改该文件，在用户范围定制</span><span lang="EN-US">Maven</span><span>的行为。本书的后面将会多次提到该</span><span lang="EN-US">settings.xml</span><span>，并逐步分析其中的各个元素。</span></span><span style="font-size: small;">&nbsp;</span>
</li>
<li>
<span style="font-size: small;"><span lang="EN-US">Lib</span><span>：</span> <span>该目录包含了所有</span><span lang="EN-US">Maven</span><span>运行时需要的</span><span lang="EN-US">Java</span><span>类库，</span><span lang="EN-US">Maven</span><span>本身是分模块开发的，因此用户能看到诸如</span><span lang="EN-US">mavn-core-3.0.jar</span><span>、</span><span lang="EN-US">maven-model-3.0.jar</span><span>之类的文件，此外这里还包含一些</span><span lang="EN-US">Maven</span><span>用到的第三方依赖如</span><span lang="EN-US">common-cli-1.2.jar</span><span>、</span><span lang="EN-US">google-collection-1.0.jar</span><span>等等。（对于</span><span lang="EN-US">Maven 2</span><span>来说，该目录只包含一个如</span><em><span lang="EN-US">maven-2.2.1-uber.jar</span></em><span>的文件原本各为独立</span><span lang="EN-US">JAR</span><span>文件的</span><span lang="EN-US">Maven</span><span>模块和第三方类库都被拆解后重新合并到了这个</span><span lang="EN-US">JAR</span><span>文件中）。可以说，这个</span><span lang="EN-US">lib</span><span>目录就是真正的</span><span lang="EN-US">Maven</span><span>。关于该文件，还有一点值得一提的是，用户可以在这个目录中找到</span><span lang="EN-US">Maven</span><span>内置的超级</span><span lang="EN-US">POM</span><span>，这一点在</span><span lang="EN-US">8.5</span><span>小节详细解释。其他：</span> <em><span lang="EN-US">LICENSE.txt</span></em><span>记录了</span><span lang="EN-US">Maven</span><span>使用的软件许可证</span><span lang="EN-US">Apache
License Version 2.0</span><span>；</span> <em><span lang="EN-US">NOTICE.txt</span></em><span>记录了</span><span lang="EN-US">Maven</span><span>包含的第三方软件；而</span><em><span lang="EN-US">README.txt</span></em><span>则包含了</span><span lang="EN-US">Maven</span><span>的简要介绍，包括安装需求及如何安装的简要指令等等。</span></span><span style="font-size: small;">&nbsp;</span>
</li>
</ul>
<p><span style="font-size: small;">&nbsp;</span></p>
<h2><span style="font-size: small;"><span lang="EN-US">2.3.2 ~/.m2</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在讲述该小节之前，我们先运行一条简单的命令：</span><strong><span lang="EN-US">mvn help:system</span></strong><span>。该命令会打印出所有的</span><span lang="EN-US">Java</span><span>系统属性和环境变量，这些信息对我们日常的编程工作很有帮助。这里暂不解释</span><span lang="EN-US">help:system</span><span>涉及的语法，运行这条命令的目的是为了让</span><span lang="EN-US">Maven</span><span>执行一个真正的任务。我们可以从命令行输出看到</span><span lang="EN-US">Maven</span><span>会下载</span><span lang="EN-US">maven-help-plugin</span><span>，包括</span><span lang="EN-US">pom</span><span>文件和</span><span lang="EN-US">jar</span><span>文件。这些文件都被下载到了</span><span lang="EN-US">Maven</span><span>本地仓库中。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>现在打开用户目录，比如当前的用户目录是</span><em><span lang="EN-US">C:\Users\Juven Xu\</span></em><span>，你可以在</span><span lang="EN-US">Vista</span><span>和</span><span lang="EN-US">Windows7</span><span>中找到类似的用户目录。如果是更早版本的</span><span lang="EN-US">Windows</span><span>，该目录应该类似于</span><span lang="EN-US">C:\Document and Settings\Juven
Xu\</span><span>。在基于</span><span lang="EN-US">Unix</span><span>的系统上，直接输入</span><strong><span lang="EN-US">cd </span></strong><span>回车，就可以转到用户目录。为了方便，本书统一使用符号</span>
<strong><span lang="EN-US">~ </span></strong><span>指代用户目录。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在用户目录下，我们可以发现</span><span lang="EN-US">.m2</span><span>文件夹。默认情况下，该文件夹下放置了</span><span lang="EN-US">Maven</span><span>本地仓库</span><span lang="EN-US">.m2/repository</span><span>。所有的</span><span lang="EN-US">Maven</span><span>构件（</span><span lang="EN-US">artifact</span><span>）都被存储到该仓库中，以方便重用。我们可以到</span><em><span lang="EN-US">~/.m2/repository/org/apache/maven/plugins/maven-help-plugins/</span></em><span>目录下找到刚才下载的</span><span lang="EN-US">maven-help-plugin</span><span>的</span><span lang="EN-US">pom</span><span>文件和</span><span lang="EN-US">jar</span><span>文件。</span><span lang="EN-US">Maven</span><span>根据一套规则来确定任何一个构件在仓库中的位置，这一点本书第</span><span lang="EN-US">6</span><span>章将会详细阐述。由于</span><span lang="EN-US">Maven</span><span>仓库是通过简单文件系统透明地展示给</span><span lang="EN-US">Maven</span><span>用户的，有些时候可以绕过</span><span lang="EN-US">Maven</span><span>直接查看或修改仓库文件，在遇到疑难问题时，这往往十分有用。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>默认情况下，</span><em><span lang="EN-US">~/.m2</span></em><span>目录下除了</span><span lang="EN-US">repository</span><span>仓库之外就没有其他目录和文件了，不过大多数</span><span lang="EN-US">Maven</span><span>用户需要复制</span><em><span lang="EN-US">M2_HOME/conf/settings.xml</span></em><span>文件到</span><em><span lang="EN-US">~/.m2/settings.xml</span></em><span>。这是一条最佳实践，我们将在本章最后一小节详细解释。</span></span></p>
</div>
<h2>
        2.4 设置HTTP代理
        <a name="3341" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>有时候你所在的公司由于安全因素考虑，要求你使用通过安全认证的代理访问因特网。这种情况下，就需要为</span><span lang="EN-US">Maven</span><span>配置</span><span lang="EN-US">HTTP</span><span>代理，才能让它正常访问外部仓库，以下载所需要的资源。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>首先确认自己无法直接访问公共的</span><span lang="EN-US">Maven</span><span>中央仓库，直接运行命令</span><strong><span lang="EN-US">ping repo1.maven.org</span></strong><span>可以检查网络。如果真的需要代理，先检查一下代理服务器是否畅通，比如现在有一个</span><span lang="EN-US">IP</span><span>地址为</span><span lang="EN-US">218.14.227.197</span><span>，端口为</span><span lang="EN-US">3128</span><span>的代理服务，我们可以运行</span><strong><span lang="EN-US">telnet 218.14.227.197 3128</span></strong><span>来检测该地址的该端口是否畅通。如果得到出错信息，需要先获取正确的代理服务信息；如果</span><span lang="EN-US">telnet</span><span>连接正确，则输入</span><span lang="EN-US">ctrl+]</span><span>，然后</span><span lang="EN-US">q</span><span>，回车，退出即可。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>检查完毕之后，编辑</span><span lang="EN-US">~/.m2/settings.xml</span><span>文件（如果没有该文件，则复制</span><span lang="EN-US">$M2_HOME/conf/settings.xml</span><span>）。添加代理配置如下：</span></span>
</p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">&lt;settings&gt;<br>
…<span>&nbsp; </span><br>
&lt;proxies&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp; </span>&lt;proxy&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;id&gt;my-proxy&lt;/id&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;active&gt;true&lt;/active&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>&nbsp;</span>&lt;protocol&gt;http&lt;/protocol&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;host&gt;218.14.227.197&lt;/host&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;port&gt;3128&lt;/port&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;!-- </span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;username&gt;***&lt;/username&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;password&gt;***&lt;/password&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;nonProxyHosts&gt;repository.mycom.com|*.google.com&lt;/nonProxyHosts&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>--&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp;&nbsp;&nbsp; </span>&lt;/proxy&gt;</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US"><span>&nbsp; </span>&lt;/proxies&gt;<br><span>&nbsp; </span>…<br>
&lt;/settings&gt;</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>这段配置十分简单，</span><span lang="EN-US">proxies</span><span>下可以有多个</span><span lang="EN-US">proxy</span><span>元素，如果你声明了多个</span><span lang="EN-US">proxy</span><span>元素，则默认情况下第一个被激活的</span><span lang="EN-US">proxy</span><span>会生效。这里声明了一个</span><span lang="EN-US">id</span><span>为</span><span lang="EN-US">my-proxy</span><span>的代理，</span><span lang="EN-US">active</span><span>的值为</span><span lang="EN-US">true</span><span>表示激活该代理，</span><span lang="EN-US">protocol</span><span>表示使用的代理协议，这里是</span><span lang="EN-US">http</span><span>。当然，最重要的是指定正确的主机名（</span><span lang="EN-US">host</span><span>元素）和端口（</span><span lang="EN-US">port</span><span>元素）。上述</span><span lang="EN-US">XML</span><span>配置中我注释掉了</span><span lang="EN-US">username</span><span>、</span><span lang="EN-US">password</span><span>、</span><span lang="EN-US">nonProxyHost</span><span>几个元素，当你的代理服务需要认证时，就需要配置</span><span lang="EN-US">username</span><span>和</span><span lang="EN-US">password</span><span>。</span><span lang="EN-US">nonProxyHost</span><span>元素用来指定哪些主机名不需要代理，可以使用</span><span lang="EN-US"> | </span><span>符号来分隔多个主机名。此外，该配置也支持通配符，如</span><span lang="EN-US">*.google.com</span><span>表示所有以</span><span lang="EN-US">google.com</span><span>结尾的域名访问都不要通过代理。</span></span></p>
</div>
<h2>
        2.5 安装m2eclipse
        <a name="3342" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">Eclipse</span><span>是一款非常优秀的</span><span lang="EN-US">IDE</span><span>。除了基本的语法标亮、代码补齐、</span><span lang="EN-US">XML</span><span>编辑等基本功能外，最新版的</span><span lang="EN-US">Eclipse</span><span>还能很好地支持重构，并且集成了</span><span lang="EN-US">JUnit</span><span>、</span><span lang="EN-US">CVS</span><span>、</span><span lang="EN-US">Mylyn</span><span>等各种流行工具。可惜</span><span lang="EN-US">Eclipse</span><span>默认没有集成对</span><span lang="EN-US">Maven</span><span>的支持。幸运的是，由</span><span lang="EN-US">Maven</span><span>之父</span><span lang="EN-US">Jason Van Zyl</span><span>创立的</span><span lang="EN-US">Sonatype</span><span>公司建立了</span><span lang="EN-US">m2eclipse</span><span>项目，这是</span><span lang="EN-US">Eclipse</span><span>下的一款十分强大的</span><span lang="EN-US">Maven</span><span>插件，可以访问</span><span lang="EN-US"><a href="http://m2eclipse.sonatype.org/">http://m2eclipse.sonatype.org/</a> </span><span>了解更多该项目的信息。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本小节将先介绍如何安装</span><span lang="EN-US">m2eclipse</span><span>插件，本书后续的章节会逐步介绍</span><span lang="EN-US">m2eclipse</span><span>插件的使用。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>现在我以</span><span lang="EN-US">Eclipse 3.6</span><span>为例逐步讲解</span><span lang="EN-US">m2eclipse</span><span>的安装。启动</span><span lang="EN-US">Eclipse</span><span>之后，在菜单栏中选择</span><strong><span lang="EN-US">Help</span></strong><span>，然后选择</span><strong><span lang="EN-US">Install New Software…</span></strong><span>，接着你会看到一个</span><span lang="EN-US">Install</span><span>对话框，点击</span><strong><span lang="EN-US">Work with:</span></strong><span>字段边上的</span><strong><span lang="EN-US">Add</span></strong><strong><span>按钮</span></strong><span>，你会得到一个新的</span><span lang="EN-US">Add Repository</span><span>对话框，在</span><strong><span lang="EN-US">Name</span></strong><span>字段中输入</span><em><span lang="EN-US">m2e</span></em><span>，</span><span lang="EN-US">Location</span><span>字段中输入</span><span lang="EN-US"><a href="http://m2eclipse.sonatype.org/sites/m2e">http://m2eclipse.sonatype.org/sites/m2e</a></span><span>，然后点击</span><strong><span lang="EN-US">OK</span></strong><span>。</span><span lang="EN-US">Eclipse</span><span>会下载</span><span lang="EN-US">m2eclipse</span><span>安装站点上的资源信息。等待资源载入完成之后，我们再将其全部展开，就能看到图</span><span lang="EN-US">2-6</span><span>所示的界面：</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span style="font-size: small;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/1ae54751-ad82-3066-ba5a-e8818cfc504d.jpg" height="671" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-6<span>&nbsp; </span>m2eclipse</span><span>的核心安装资源列表</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">&nbsp;</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>如图显示了</span><span lang="EN-US">m2eclipse</span><span>的核心模块</span><span lang="EN-US">Maven Integration for Eclipse (Required)</span><span>，选择后点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，</span><span lang="EN-US">Eclipse</span><span>会自动计算模块间依赖，然后给出一个将被安装的模块列表，确认无误后，继续点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，这时我们会看到许可证信息，</span><span lang="EN-US">m2eclipse</span><span>使用的开源许可证是</span><span lang="EN-US">Eclipse Public License v1.0</span><span>，选择</span><strong><span lang="EN-US">I accept the terms of the license agreements</span></strong><span>，然后点击</span><strong><span lang="EN-US">Finish</span></strong><span>，接着就耐心等待</span><span lang="EN-US">Eclipse</span><span>下载安装这些模块，如图</span><span lang="EN-US">2-7</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/d36bea18-262e-35e3-8a44-e3bac9ba225b.jpg"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-7</span><span>：</span><span lang="EN-US">m2eclipse</span><span>安装进度</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>除了核心组件之外，</span><span lang="EN-US">m2eclipse</span><span>还提供了一组额外组件，主要是为了方便与其它工具如</span><span lang="EN-US">Subversion</span><span>进行集成，这些组件的安装地址为</span><span lang="EN-US"><a href="http://m2eclipse.sonatype.org/sites/m2e-extras">http://m2eclipse.sonatype.org/sites/m2e-extras</a></span><span>。使用前面类似的安装方法，我们可以看到如图</span><span lang="EN-US">2-8</span><span>的组件列表：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/8c938c76-5859-33ea-aee2-b1f6e3a182ac.jpg" height="568" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-8</span><span>：</span><span lang="EN-US">m2eclipse</span><span>的额外组件安装资源列表</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>下面简单解释一下这些组件的用途：</span></span></p>
<p class="MsoListParagraph" style="margin: 6pt 0cm; text-indent: 0cm;"><span style="font-size: small;"><strong><span lang="EN-US">1. </span></strong><strong><span>重要的</span></strong></span></p>
<ul>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven SCM handler for Subclipse <span>&nbsp;</span>(Optional</span><span>）：</span><span lang="EN-US">Subversion</span><span>是非常流行的版本管理工具，该模块能够帮助我们直接从</span><span lang="EN-US">Subversion</span><span>服务器签出</span><span lang="EN-US">Maven</span><span>项目，不过前提是需要首先安装</span><span lang="EN-US">Subclipse</span><span>（</span><span lang="EN-US"><a href="http://subclipse.tigris.org/">http://subclipse.tigris.org/</a></span><span>）。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;"><span><span style="font: 7pt;">&nbsp;</span></span></span><span lang="EN-US">Maven SCM Integration (Optional</span><span>）：</span><span lang="EN-US">Eclipse</span><span>环境中</span><span lang="EN-US">Maven</span><span>与</span><span lang="EN-US">SCM</span><span>集成核心的模块，它利用各种</span><span lang="EN-US">SCM</span><span>工具如</span><span lang="EN-US">SVN</span><span>实现</span><span lang="EN-US">Maven</span><span>项目的签出和具体化等操作。</span></span></li>
</ul>
<p class="MsoListParagraph" style="margin: 6pt 0cm; text-indent: 0cm;"><span style="font-size: small;"><strong><span lang="EN-US">2. </span></strong><strong><span>不重要的</span></strong></span></p>
<ul>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven issue tracking configurator for Mylyn 3.x (Optional</span><span>）：该模块能够帮助我们使用</span><span lang="EN-US">POM</span><span>中的缺陷跟踪系统信息连接</span><span lang="EN-US">Mylyn</span><span>至服务器。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven SCM handler for Team/CVS (Optional</span><span>）：该模块帮助我们从</span><span lang="EN-US">CVS</span><span>服务器签出</span><span lang="EN-US">Maven</span><span>项目，如果你还在使用</span><span lang="EN-US">CVS</span><span>，就需要安装它。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">Maven Integration for WTP (Optional</span><span>）：使用该模块可以让</span><span lang="EN-US">Eclipse</span><span>自动读取</span><span lang="EN-US">POM</span><span>信息并配置</span><span lang="EN-US">WTP</span><span>项目。、</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;">&nbsp;</span><span lang="EN-US">M2eclipse Extensions Development Support (Optional)</span><span>：用来支持扩展</span><span lang="EN-US">m2eclipse</span><span>，一般用户不会用到。</span></span></li>
<li><span style="font-size: small;"><span style="font-family: Wingdings;"><span><span style="font: 7pt;">&nbsp;</span></span></span><span lang="EN-US">Project configurators for commonly used maven plugins (temporary)</span><span>：一个临时的组件，用来支持一些</span><span lang="EN-US">Maven</span><span>插件与</span><span lang="EN-US">Eclipse</span><span>的集成，建议安装。</span></span></li>
</ul>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>读者可以根据自己的需要安装相应组件，具体步骤不再赘述。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>待安装完毕后，重启</span><span lang="EN-US">Eclipse</span><span>，现在让我们验证一下</span><span lang="EN-US">m2eclipse</span><span>是否正确安装了。首先，点击菜单栏中的</span><strong><span lang="EN-US">Help</span></strong><span>，然后选择</span><strong><span lang="EN-US">About Eclipse</span></strong><span>，在弹出的对话框中，点击</span><strong><span lang="EN-US">Installation Details</span></strong><span>按钮，会得到一个对话框，在</span><strong><span lang="EN-US">Installed Software</span></strong><span>标签栏中，检查刚才我们选择的模块是否在这个列表中，如图</span><span lang="EN-US">2-9</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/c6793b02-251d-3e1f-833c-8ff12d14ba05.jpg" height="459" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-9m2eclipse</span><span>安装结果</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>如果一切没问题，我们再检查一下</span><span lang="EN-US">Eclipse</span><span>现在是否已经支持创建</span><span lang="EN-US">Maven</span><span>项目，依次点击菜单栏中的</span><strong><span lang="EN-US">File</span></strong><span>→</span><strong><span lang="EN-US">New</span></strong><span>→</span><strong><span lang="EN-US">Other</span></strong><span>，在弹出的对话框中，找到</span><span lang="EN-US">Maven</span><span>一项，再将其展开，你应该能够看到如图</span><span lang="EN-US">2-10</span><span>所示的对话框：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/897a084a-6965-3d4a-b437-36c3a4ea5c09.jpg"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-10 Eclipse</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目向导</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>如果一切正常，说明</span><span lang="EN-US">m2eclipse</span><span>已经正确安装了。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>最后，关于</span><span lang="EN-US">m2eclipse</span><span>的安装，需要提醒的一点是，你可能会在使用</span><span lang="EN-US">m2eclipse</span><span>时遇到类似这样的错误：</span></span> </p>
<p class="a" style="text-indent: 0cm;"><span style="font-size: small;"><span lang="EN-US">09-10-6 </span><span>上午</span><span lang="EN-US">01</span><span>时</span><span lang="EN-US">14</span><span>分</span><span lang="EN-US">49</span><span>秒</span><span lang="EN-US">:
Eclipse is running in a JRE, but a JDK is required<br>
Some Maven plugins may not work when importing projects or updating source
folders.</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>这是因为</span><span lang="EN-US">Eclipse</span><span>默认是运行在</span><span lang="EN-US">JRE</span><span>上的，而</span><span lang="EN-US">m2eclipse</span><span>的一些功能要求使用</span><span lang="EN-US">JDK</span><span>，解决方法是配置</span><span lang="EN-US">Eclipse</span><span>安装目录的</span><span lang="EN-US">eclipse.ini</span><span>文件，添加</span><span lang="EN-US">vm</span><span>配置指向</span><span lang="EN-US">JDK</span><span>，如：</span></span> </p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">--launcher.XXMaxPermSize</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">256m</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-vm</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">D:\java\jdk1.6.0_07\bin\javaw.exe</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-vmargs</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-Dosgi.requiredJavaVersion=1.5</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-Xms128m</span></span></p>
<p class="a" style="text-indent: 17pt;"><span style="font-size: small;"><span lang="EN-US">-Xmx256m</span></span></p>
</div>
<h2>
        2.6 安装NetBeans Maven插件
        <a name="3343" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>本小节会先介绍如何在</span><span lang="EN-US">NetBeans</span><span>上安装</span><span lang="EN-US">Maven</span><span>插件，后面的章节中还会介绍</span><span lang="EN-US">NetBeans</span><span>中具体的</span><span lang="EN-US">Maven</span><span>操作。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>首先，如果你正在使用</span><span lang="EN-US">NetBeans 6.7</span><span>及以上版本，那么</span><span lang="EN-US">Maven</span><span>插件已经预装了。你可以检查</span><span lang="EN-US">Maven</span><span>插件安装，点击菜单栏中的<strong>工具</strong>，接着选择<strong>插件</strong>，在弹出的插件对话框中选择<strong>已安装</strong>标签，你应该能够看到</span><span lang="EN-US">Maven</span><span>插件，如图</span><span lang="EN-US">2-11</span><span>所示：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/0b324a36-c6c4-338d-9fe8-775cab5e75f5.jpg" height="400" width="650"><br>&nbsp;<span>图</span><span lang="EN-US">2-11 </span><span>已安装的</span><span lang="EN-US">NetBeans Maven</span><span>插件</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果你在使用</span><span lang="EN-US">NetBeans 6.7</span><span>之前的版本，或者由于某些原因</span><span lang="EN-US">NetBeans Maven</span><span>插件被卸载了，那么你就需要安装</span><span lang="EN-US">NetBeans Maven</span><span>插件，下面我们以</span><span lang="EN-US">NetBeans 6.1</span><span>为例，介绍</span><span lang="EN-US">Maven</span><span>插件的安装。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>同样，点击菜单栏中的<strong>工具</strong>，选择<strong>插件</strong>，在弹出的插件对话框中选择<strong>可用插件</strong>标签，接着在右边的搜索框内输入</span><span lang="EN-US">Maven</span><span>，这时你会在左边的列表中看到一个名为</span><span lang="EN-US">Maven</span><span>的插件，选择该插件，然后点击下面的安装按钮，如图</span><span lang="EN-US">2-12</span><span>所示：</span></p>
<p style="text-align: center;"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/d6c9e5b4-543c-39b6-8036-1572f7da6bce.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 0cm;" align="center"><span lang="EN-US">
 
</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">2-12 </span><span>安装</span><span lang="EN-US">NetBeans Maven</span><span>插件</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>接着在随后的对话框中根据提示操作，阅读相关许可证并接受，</span><span lang="EN-US">NetBeans</span><span>会自动帮我们下载并安装</span><span lang="EN-US">Maven</span><span>插件，结束之后会提示安装完成，之后再点击插件对话框的<strong>已安装</strong>标签，就能看到已经激活的</span><span lang="EN-US">Maven</span><span>插件。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">
 
</span></p>
<p class="MsoNormal" style="text-align: left; text-indent: 21pt;"><span>最后，为了确认</span><span lang="EN-US">Maven</span><span>插件确实已经正确安装了，可以看一下</span><span lang="EN-US">NetBeans</span><span>是否已经拥有创建</span><span lang="EN-US">Maven</span><span>项目的相关菜单。在菜单栏中选择<strong>文件</strong>，然后选择<strong>新建项目</strong>，这时应该能够看到项目类别中有</span><strong><span lang="EN-US">Maven</span></strong><span>一项，选择该类别，右边会相应地显示</span><strong><span lang="EN-US">Maven</span></strong><strong><span>项目</span></strong><span>和<strong>基于现有</strong></span><strong><span lang="EN-US">POM</span></strong><strong><span>的</span><span lang="EN-US">Maven</span></strong><strong><span>项目</span></strong><span>，如图</span><span lang="EN-US">2-13</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/cb652365-a437-33e7-8774-bdd5fdc32e41.jpg"><br>&nbsp;<span>图</span><span lang="EN-US">2-13 NetBeans</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目向导</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果你能看到类似的对话框，说明</span><span lang="EN-US">NetBeans Maven</span><span>已经正确安装了。</span></p>
</div>
<h2>
        2.7 Maven安装最佳实践
        <a name="3344" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本节介绍一些在安装</span><span lang="EN-US">Maven</span><span>过程中不是必须的，但十分有用的实践。</span></span></p>
<h2 style="text-indent: 28pt;"><span style="font-size: small;"><span lang="EN-US">2.7.1 </span><span>设置</span><span lang="EN-US">MAVEN_OPTS</span><span>环境变量</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本章前面介绍</span><span lang="EN-US">Maven</span><span>安装目录时我们了解到，运行</span><span lang="EN-US">mvn</span><span>命令实际上是执行了</span><span lang="EN-US">Java</span><span>命令，既然是运行</span><span lang="EN-US">Java</span><span>，那么运行</span><span lang="EN-US">Java</span><span>命令可用的参数当然也应该在运行</span><span lang="EN-US">mvn</span><span>命令时可用。这个时候，</span><span lang="EN-US">MAVEN_OPTS</span><span>环境变量就能派上用场。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>我们通常需要设置</span><span lang="EN-US">MAVEN_OPTS</span><span>的值为：</span><em><span lang="EN-US">-Xms128m -Xmx512m</span></em><span>，因为</span><span lang="EN-US">Java</span><span>默认的最大可用内存往往不能够满足</span><span lang="EN-US">Maven</span><span>运行的需要，比如在项目较大时，使用</span><span lang="EN-US">Maven</span><span>生成项目站点需要占用大量的内存，如果没有该配置，我们很容易得到</span><em><span lang="EN-US">java.lang.OutOfMemeoryError</span></em><span>。因此，一开始就配置该变量是推荐的做法。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>关于如何设置环境变量，请参考前面设置</span><span lang="EN-US">M2_HOME</span><span>环境变量的做法，尽量不要直接修改</span><span lang="EN-US">mvn.bat</span><span>或者</span><span lang="EN-US">mvn</span><span>这两个</span><span lang="EN-US">Maven</span><span>执行脚本文件。因为如果修改了脚本文件，升级</span><span lang="EN-US">Maven</span><span>时你就不得不再次修改，一来麻烦，二来容易忘记。同理，我们应该尽可能地不去修改任何</span><span lang="EN-US">Maven</span><span>安装目录下的文件。</span></span></p>
<h2 style="text-indent: 28pt;"><span style="font-size: small;"><span lang="EN-US">2.7.2 </span><span>配置用户范围</span><span lang="EN-US">settings.xml</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">Maven</span><span>用户可以选择配置</span><em><span lang="EN-US">$M2_HOME/conf/settings.xml</span></em><span>或者</span><em><span lang="EN-US">~/.m2/settings.xml</span></em><span>。前者是全局范围的，整台机器上的所有用户都会直接受到该配置的影响，而后者是用户范围的，只有当前用户才会受到该配置的影响。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>我们推荐使用用户范围的</span><span lang="EN-US">settings.xml</span><span>，主要原因是为了避免无意识地影响到系统中的其他用户。当然，如果你有切实的需求，需要统一系统中所有用户的</span><span lang="EN-US">settings.xml</span><span>配置，当然应该使用全局范围的</span><span lang="EN-US">settings.xml</span><span>。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>除了影响范围这一因素，配置用户范围</span><span lang="EN-US">settings.xml</span><span>文件还便于</span><span lang="EN-US">Maven</span><span>升级。直接修改</span><span lang="EN-US">conf</span><span>目录下的</span><span lang="EN-US">settings.xml</span><span>会导致</span><span lang="EN-US">Maven</span><span>升级不便，每次升级到新版本的</span><span lang="EN-US">Maven</span><span>，都需要复制</span><span lang="EN-US">settings.xml</span><span>文件，如果使用</span><em><span lang="EN-US">~/.m2</span></em><span>目录下的</span><span lang="EN-US">settings.xml</span><span>，就不会影响到</span><span lang="EN-US">Maven</span><span>安装文件，升级时就不需要触动</span><span lang="EN-US">settings.xml</span><span>文件。</span></span></p>
<h2 class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">2.7.3 </span><span>不要使用</span><span lang="EN-US">IDE</span><span>内嵌的</span><span lang="EN-US">Maven</span></span></h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>无论是</span><span lang="EN-US">Eclipse</span><span>还是</span><span lang="EN-US">NetBeans</span><span>，当我们集成</span><span lang="EN-US">Maven</span><span>时，都会安装上一个内嵌的</span><span lang="EN-US">Maven</span><span>，这个内嵌的</span><span lang="EN-US">Maven</span><span>通常会比较新，但不一定很稳定，而且往往也会和我们在命令行使用的</span><span lang="EN-US">Maven</span><span>不是同一个版本。这里有会出现两个潜在的问题：首先，较新版本的</span><span lang="EN-US">Maven</span><span>存在很多不稳定因素，容易造成一些难以理解的问题；其次，除了</span><span lang="EN-US">IDE</span><span>，我们也经常还会使用命令行的</span><span lang="EN-US">Maven</span><span>，如果版本不一致，容易造成构建行为的不一致，这是我们所不希望看到的。因此，我们应该在</span><span lang="EN-US">IDE</span><span>中配置</span><span lang="EN-US">Maven</span><span>插件时使用与命令行一致的</span><span lang="EN-US">Maven</span><span>。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>在</span><span lang="EN-US">m2eclipse</span><span>环境中，点击菜单栏中的</span><strong><span lang="EN-US">Windows</span></strong><span>，然后选择</span><strong><span lang="EN-US">Preferences</span></strong><span>，在弹出的对话框中，展开左边的</span><strong><span lang="EN-US">Maven</span></strong><span>项，选择</span><strong><span lang="EN-US">Installation</span></strong><span>子项，在右边的面板中，我们能够看到有一个默认的</span><strong><span lang="EN-US">Embedded</span></strong><span lang="EN-US"> Maven</span><span>安装被选中了，点击</span><strong><span lang="EN-US">Add…</span></strong><span>然后选择我们的</span><span lang="EN-US">Maven</span><span>安装目录</span><span lang="EN-US">M2_HOME</span><span>，添加完毕之后选择这一个外部的</span><span lang="EN-US">Maven</span><span>，如图</span><span lang="EN-US">2-14</span><span>所示：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/93cb4cf7-4027-397d-9e42-185acb6fc868.jpg"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-14 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中使用外部</span><span lang="EN-US">Maven</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">NetBeans Maven</span><span>插件默认会侦测</span><span lang="EN-US">PATH</span><span>环境变量，因此会直接使用与命令行一致的</span><span lang="EN-US">Maven</span><span>环境。依次点击菜单栏中的<strong>工具</strong>→<strong>选项</strong>→<strong>其他</strong>→</span><strong><span lang="EN-US">Maven</span></strong><span>标签栏，你就能看到如图</span><span lang="EN-US">2-15</span><span>所示的配置：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">
 
</span></span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/8881d976-4ee5-3c10-b355-b02bac6efbd2.jpg" height="467" width="650"><br>&nbsp;<span style="font-size: small;"><span>图</span><span lang="EN-US">2-15 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中使用外部</span><span lang="EN-US">Maven</span></span></p>
</div>
<h2>
        2.8 小结
        <a name="3345" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>本章详细介绍了在各种操作系统平台上安装</span><span lang="EN-US">Maven</span><span>，并对</span><span lang="EN-US">Maven</span><span>安装目录进行了深入的分析，在命令行的基础上，本章又进一步介绍了</span><span lang="EN-US">Maven</span><span>与主流</span><span lang="EN-US">IDE Eclipse</span><span>及</span><span lang="EN-US">NetBeans</span><span>的集成，本章最后还介绍了一些与</span><span lang="EN-US">Maven</span><span>安装相关的最佳实践。本书下一章会创建一个</span><span lang="EN-US">Hello World</span><span>项目，带领读者配置和构建</span><span lang="EN-US">Maven</span><span>项目。</span></span></p>
</div>
<h2>
        第3章 Maven使用入门
        <a name="3346" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
        <span style="font-size: medium;">到目前为止，我们已经大概了解并安装好了Maven，现在，我们开始
创建一个最简单的Hello 
World项目。如果你是初次接触Maven，我建议你按照本章的内容一步步地编写代码并执行，可能你会碰到一些概念暂时难以理解，不用着急，记下这些疑
难点，相信本书的后续章节会帮你逐一解答。
<br>3.1 编写POM
<br>3.2 编写主代码
<br>3.3 编写测试代码
<br>3.4 打包和运行
<br>3.5 使用Archetype生成项目骨架
<br>3.6 m2eclipse简单使用
<br>3.7 NetBeans Maven插件简单使用
<br>3.8 小结</span>
      </div>
<h2>
        3.1 编写POM
        <a name="3347" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>就像</span></span><span style="font-size: small;"><span lang="EN-US">Make</span></span><span style="font-size: small;"><span>的</span></span><span style="font-size: small;"><span lang="EN-US">Makefile</span></span><span style="font-size: small;"><span>，</span></span><span style="font-size: small;"><span lang="EN-US">Ant</span></span><span style="font-size: small;"><span>的</span></span><span style="font-size: small;"><span lang="EN-US">build.xml</span></span><span style="font-size: small;"><span>一样，</span></span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span style="font-size: small;"><span>项目的核心是</span></span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span style="font-size: small;"><span>。</span></span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span style="font-size: small;"><span>（</span></span><span style="font-size: small;"><strong><span lang="EN-US">P</span></strong><span lang="EN-US">roject <strong>O</strong>bject <strong>M</strong>odel</span></span><span style="font-size: small;"><span>，项目对象模型）定义了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。现在我们先为</span></span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span style="font-size: small;"><span>项目编写一个最简单的</span></span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span style="font-size: small;"><span>。</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span>首先创建一个名为</span></span><span style="font-size: small;"><span lang="EN-US">hello-world</span></span><span style="font-size: small;"><span>的文件夹（本书中各章的代码都会对应一个以</span></span><span style="font-size: small;"><span lang="EN-US">ch</span></span><span style="font-size: small;"><span>开头的项目），打开该文件夹，新建一个名为</span></span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span style="font-size: small;"><span>的文件，输入其内容如代码清单</span></span><span style="font-size: small;"><span lang="EN-US">3-1</span></span><span style="font-size: small;"><span>：</span></span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span style="font-size: small;"><span lang="EN-US">3-1</span></span><span>：</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>的</span><span style="font-size: small;"><span lang="EN-US">POM</span></span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;&lt;?xml&nbsp;version=</span><span class="string">"1.0"</span><span>&nbsp;encoding=</span><span class="string">"UTF-8"</span><span>?&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&lt;project&nbsp;xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation="http:<span class="comment">//maven.apache.org/POM/4.0.0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>http:<span class="comment">//maven.apache.org/maven-v4_0_0.xsd"&gt;</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;modelVersion&gt;<span class="number">4.0</span><span>.</span><span class="number">0</span><span>&lt;/modelVersion&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;groupId&gt;com.juvenxu.mvnbook&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;artifactId&gt;hello-world&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;version&gt;<span class="number">1.0</span><span>-SNAPSHOT&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;name&gt;Maven&nbsp;Hello&nbsp;World&nbsp;Project&lt;/name&gt;&nbsp;&nbsp;</span></li>
<li><span>&lt;/project&gt;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;</span><span>&nbsp;&nbsp;&nbsp; 代码的第一行是</span><span style="font-size: small;"><span lang="EN-US">XML</span></span><span>头，指定了该</span><span style="font-size: small;"><span lang="EN-US">xml</span></span><span>文档的版本和编码方式。紧接着是</span><span style="font-size: small;"><span lang="EN-US">project</span></span><span>元素，</span><span style="font-size: small;"><span lang="EN-US">project</span></span><span>是所有</span><span style="font-size: small;"><span lang="EN-US">pom.xml</span></span><span>的根元素，它还声明了一些</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>相关的命名空间及</span><span style="font-size: small;"><span lang="EN-US">xsd</span></span><span>元素，虽然这些属性不是必须的，但使用这些属性能够让第三方工具（如</span><span style="font-size: small;"><span lang="EN-US">IDE</span></span><span>中的</span><span style="font-size: small;"><span lang="EN-US">XML</span></span><span>编辑器）帮助我们快速编辑</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>根元素下的第一个子元素</span><span style="font-size: small;"><span lang="EN-US">modelVersion</span></span><span>指定了当前</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>模型的版本，对于</span><span style="font-size: small;"><span lang="EN-US">Maven2</span></span><span>及</span><span style="font-size: small;"><span lang="EN-US">Maven 3</span></span><span>来说，它只能是</span><span style="font-size: small;"><span lang="EN-US">4.0.0</span></span><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>这段代码中最重要的是</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>，</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>和</span><span style="font-size: small;"><span lang="EN-US">version</span></span><span>三行。这三个元素定义了一个项目基本的坐标，在</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的世界，任何的</span><span style="font-size: small;"><span lang="EN-US">jar</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">pom</span></span><span>或者</span><span style="font-size: small;"><span lang="EN-US">war</span></span><span>都是以基于这些基本的坐标进行区分的。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>定义了项目属于哪个组，这个组往往和项目所在的组织或公司存在关联，譬如你在</span><span style="font-size: small;"><span lang="EN-US">googlecode</span></span><span>上建立了一个名为</span><span style="font-size: small;"><span lang="EN-US">myapp</span></span><span>的项目，那么</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>就应该是</span><span style="font-size: small;"><span lang="EN-US">com.googlecode.myapp</span></span><span>，如果你的公司是</span><span style="font-size: small;"><span lang="EN-US">mycom</span></span><span>，有一个项目为</span><span style="font-size: small;"><span lang="EN-US">myapp</span></span><span>，那么</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>就应该是</span><span style="font-size: small;"><span lang="EN-US">com.mycom.myapp</span></span><span>。本书中所有的代码都基于</span><span style="font-size: small;"><span lang="EN-US">groupId com.juvenxu.mvnbook</span></span><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>定义了当前</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>项目在组中唯一的</span><span style="font-size: small;"><span lang="EN-US">ID</span></span><span>，我们为这个</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>项目定义</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>为</span><span style="font-size: small;"><span lang="EN-US">hello-world</span></span><span>，本书其他章节代码会被分配其他的</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>。而在前面的</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>为</span><span style="font-size: small;"><span lang="EN-US">com.googlecode.myapp</span></span><span>的例子中，你可能会为不同的子项目（模块）分配</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>，如：</span><span style="font-size: small;"><span lang="EN-US">myapp-util</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">myapp-domain</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">myapp-web</span></span><span>等等。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>顾名思义，</span><span style="font-size: small;"><span lang="EN-US">version</span></span><span>指定了</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>项目当前的版本——</span><span style="font-size: small;"><span lang="EN-US">1.0-SNAPSHOT</span></span><span>。</span><span style="font-size: small;"><span lang="EN-US">SNAPSHOT</span></span><span>意为快照，说明该项目还处于开发中，是不稳定的版本。随着项目的发展，</span><span style="font-size: small;"><span lang="EN-US">version</span></span><span>会不断更新，如升级为</span><span style="font-size: small;"><span lang="EN-US">1.0</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">1.1-SNAPSHOT</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">1.1</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">2.0</span></span><span>等等。本书的</span><span style="font-size: small;"><span lang="EN-US">6.5</span></span><span>小节会详细介绍</span><span style="font-size: small;"><span lang="EN-US">SNAPSHOT</span></span><span>，第</span><span style="font-size: small;"><span lang="EN-US">13</span></span><span>章介绍如何使用</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>管理项目版本的升级发布。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>最后一个</span><span style="font-size: small;"><span lang="EN-US">name</span></span><span>元素声明了一个对于用户更为友好的项目名称，虽然这不是必须的，但我还是推荐为每个</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>声明</span><span style="font-size: small;"><span lang="EN-US">name</span></span><span>，以方便信息交流。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>没有任何实际的</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码，我们就能够定义一个</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>项目的</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>，这体现了</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的一大优点，它能让项目对象模型最大程度地与实际代码相独立，我们可以称之为解耦，或者正交性，这在很大程度上避免了</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码和</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>代码的相互影响。比如当项目需要升级版本时，只需要修改</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>，而不需要更改</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码；而在</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>稳定之后，日常的</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码开发工作基本不涉及</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>的修改。</span></p>
</div>
<h2>
        3.2 编写主代码
        <a name="3348" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>项目主代码和测试代码不同，项目的主代码会被打包到最终的构件中（比如</span><span style="font-size: small;"><span lang="EN-US">jar</span></span><span>），而测试代码只在运行测试时用到，不会被打包。默认情况下，</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>假设项目主代码位于</span><span style="font-size: small;"><em><span lang="EN-US">src/main/java</span></em></span><span>目录，我们遵循</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的约定，创建该目录，然后在该目录下创建文件</span><span style="font-size: small;"><span lang="EN-US">com/juvenxu/mvnbook/helloworld/<em>HelloWorld.java</em></span></span><span>，其内容如代码清单</span><span style="font-size: small;"><span lang="EN-US">3-2</span></span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span style="font-size: small;"><span lang="EN-US">3-2</span></span><span>：</span><span style="font-size: small;"><span lang="EN-US">Hello World</span></span><span>的主代码</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;</span><span class="keyword">package</span><span>&nbsp;com.juvenxu.mvnbook.helloworld;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;HelloWorld&nbsp;&nbsp;</span></span></li>
<li><span>{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;sayHello()&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">"Hello&nbsp;Maven"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&nbsp;<span class="keyword">new</span><span>&nbsp;HelloWorld().sayHello()&nbsp;);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>这是一个简单的</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类，它有一个</span><span style="font-size: small;"><span lang="EN-US">sayHello()</span></span><span>方法，返回一个</span><span style="font-size: small;"><span lang="EN-US">String</span></span><span>。同时这个类还带有一个</span><span style="font-size: small;"><span lang="EN-US">main</span></span><span>方法，创建一个</span><span style="font-size: small;"><span lang="EN-US">HelloWorld</span></span><span>实例，调用</span><span style="font-size: small;"><span lang="EN-US">sayHello()</span></span><span>方法，并将结果输出到控制台。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>关于该</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>代码有两点需要注意。首先，在</span><span style="font-size: small;"><span lang="EN-US">95%</span></span><span>以上的情况下，我们应该把项目主代码放到</span><span style="font-size: small;"><em><span lang="EN-US">src/main/java/</span></em></span><span>目录下（遵循</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>的约定），而无须额外的配置，</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>会自动搜寻该目录找到项目主代码。其次，该</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类的包名是</span><span style="font-size: small;"><span lang="EN-US">com.juvenxu.mvnbook.helloworld</span></span><span>，这与我们之前在</span><span style="font-size: small;"><span lang="EN-US">POM</span></span><span>中定义的</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>和</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>相吻合。一般来说，项目中</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类的包都应该基于项目的</span><span style="font-size: small;"><span lang="EN-US">groupId</span></span><span>和</span><span style="font-size: small;"><span lang="EN-US">artifactId</span></span><span>，这样更加清晰，更加符合逻辑，也方便搜索构件或者</span><span style="font-size: small;"><span lang="EN-US">Java</span></span><span>类。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码编写完毕后，我们使用</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>进行编译，在项目根目录下运行命令</span><span style="font-size: small;"> <strong><span lang="EN-US">mvn clean compile </span></strong></span><span>，我们会得到如下输出：</span></p>
<p><span style="font-size: small;"><br></span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;span&nbsp;style=</span><span class="string">"font-size:&nbsp;small;"</span><span>&gt;[INFO]&nbsp;Scanning&nbsp;</span><span class="keyword">for</span><span>&nbsp;projects...&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Building&nbsp;Maven&nbsp;Hello&nbsp;World&nbsp;Project&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;&nbsp;&nbsp;&nbsp;task-segment:&nbsp;[clean,&nbsp;compile]&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[clean:clean&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-clean}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Deleting&nbsp;directory&nbsp;D:\code\hello-world\target&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[resources:resources&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-resources}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;skip&nbsp;non&nbsp;existing&nbsp;resourceDirectory&nbsp;D:&nbsp;\code\hello-world\src\main\resources&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[compiler:compile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-compile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:&nbsp;\code\hello-world\target\classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Total&nbsp;time:&nbsp;<span class="number">1</span><span>&nbsp;second&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Finished&nbsp;at:&nbsp;Fri&nbsp;Oct&nbsp;<span class="number">09</span><span>&nbsp;</span><span class="number">02</span><span>:</span><span class="number">08</span><span>:</span><span class="number">09</span><span>&nbsp;CST&nbsp;</span><span class="number">2009</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Final&nbsp;Memory:&nbsp;9M/16M&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>&lt;/span&gt;&nbsp;&nbsp;</span></li>
</ol></div>
<p><span style="font-size: small;">&nbsp;</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span style="font-size: small;"><span lang="EN-US">clean</span></span><span>告诉</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>清理输出目录</span><span style="font-size: small;"><em><span lang="EN-US">target/</span></em></span><span>，</span><span style="font-size: small;"><span lang="EN-US">compile</span></span><span>告诉</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>编译项目主代码，从输出中我们看到</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>首先执行了</span><span style="font-size: small;"><span lang="EN-US">clean:clean</span></span><span>任务，删除</span><span style="font-size: small;"><em><span lang="EN-US">target/</span></em></span><span>目录，默认情况下</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>构建的所有输出都在</span><span style="font-size: small;"><em><span lang="EN-US">target/</span></em></span><span>目录中；接着执行</span><span style="font-size: small;"><span lang="EN-US">resources:resources</span></span><span>任务（未定义项目资源，暂且略过）；最后执行</span><span style="font-size: small;"><span lang="EN-US">compiler:compile</span></span><span>任务，将项目主代码编译至</span><span style="font-size: small;"><em><span lang="EN-US">target/classes</span></em></span><span>目录</span><span style="font-size: small;"><span lang="EN-US">(</span></span><span>编译好的类为</span><span style="font-size: small;"><em><span lang="EN-US">com/juvenxu/mvnbook/helloworld/HelloWorld.Class</span></em></span><span>）。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>上文提到的</span><span style="font-size: small;"><span lang="EN-US">clean:clean</span></span><span>、</span><span style="font-size: small;"><span lang="EN-US">resources:resources</span></span><span>，以及</span><span style="font-size: small;"><span lang="EN-US">compiler:compile</span></span><span>对应了一些</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>插件及插件目标，比如</span><span style="font-size: small;"><span lang="EN-US">clean:clean</span></span><span>是</span><span style="font-size: small;"><span lang="EN-US">clean</span></span><span>插件的</span><span style="font-size: small;"><span lang="EN-US">clean</span></span><span>目标，</span><span style="font-size: small;"><span lang="EN-US">compiler:compile</span></span><span>是</span><span style="font-size: small;"><span lang="EN-US">compiler</span></span><span>插件的</span><span style="font-size: small;"><span lang="EN-US">compile</span></span><span>目标，后文会详细讲述</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>插件及其编写方法。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>至此，</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>在没有任何额外的配置的情况下就执行了项目的清理和编译任务，接下来，我们编写一些单元测试代码并让</span><span style="font-size: small;"><span lang="EN-US">Maven</span></span><span>执行自动化测试。</span></p>
</div>
<h2>
        3.3 编写测试代码
        <a name="3349" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>为了使项目结构保持清晰，主代码与测试代码应该分别位于独立的目录中。</span><span lang="EN-US">3.2</span><span>节讲过</span><span lang="EN-US">Maven</span><span>项目中默认的主代码目录是</span><em><span lang="EN-US">src/main/java</span></em><span>，对应地，</span><span lang="EN-US">Maven</span><span>项目中默认的测试代码目录是</span><em><span lang="EN-US">src/test/java</span></em><span>。因此，在编写测试用例之前，我们先创建该目录。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在</span><span lang="EN-US">Java</span><span>世界中，由</span><span lang="EN-US">Kent Beck</span><span>和</span><span lang="EN-US">Erich Gamma</span><span>建立的</span><span lang="EN-US">JUnit</span><span>是事实上的单元测试标准。要使用</span><span lang="EN-US">JUnit</span><span>，我们首先需要为</span><span lang="EN-US">Hello World</span><span>项目添加一个</span><span lang="EN-US">JUnit</span><span>依赖，修改项目的</span><span lang="EN-US">POM</span><span>如代码清单</span><span lang="EN-US">3-3</span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span lang="EN-US">3-3</span><span>：为</span><span lang="EN-US">Hello World</span><span>的</span><span lang="EN-US">POM</span><span>添加依赖</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;?xml&nbsp;version=</span><span class="string">"1.0"</span><span>&nbsp;encoding=</span><span class="string">"UTF-8"</span><span>?&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&lt;project&nbsp;xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation="http:<span class="comment">//maven.apache.org/POM/4.0.0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>http:<span class="comment">//maven.apache.org/maven-v4_0_0.xsd"&gt;</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;modelVersion&gt;<span class="number">4.0</span><span>.</span><span class="number">0</span><span>&lt;/modelVersion&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;groupId&gt;com.juvenxu.mvnbook&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;artifactId&gt;hello-world&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;version&gt;<span class="number">1.0</span><span>-SNAPSHOT&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;name&gt;Maven&nbsp;Hello&nbsp;World&nbsp;Project&lt;/name&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;dependencies&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;junit&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;junit&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;<span class="number">4.7</span><span>&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;scope&gt;test&lt;/scope&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependency&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;/dependencies&gt;&nbsp;&nbsp;</span></li>
<li><span>&lt;/project&gt;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;<span>&nbsp;&nbsp;&nbsp; 代码中添加了</span><span lang="EN-US">dependencies</span><span>元素，该元素下可以包含多个</span><span lang="EN-US">dependency</span><span>元素以声明项目的依赖，这里我们添加了一个依赖——</span><span lang="EN-US">groupId</span><span>是</span><span lang="EN-US">junit</span><span>，</span><span lang="EN-US">artifactId</span><span>是</span><span lang="EN-US">junit</span><span>，</span><span lang="EN-US">version</span><span>是</span><span lang="EN-US">4.7</span><span>。前面我们提到</span><span lang="EN-US">groupId</span><span>、</span><span lang="EN-US">artifactId</span><span>和</span><span lang="EN-US">version</span><span>是任何一个</span><span lang="EN-US">Maven</span><span>项目最基本的坐标，</span><span lang="EN-US">JUnit</span><span>也不例外，有了这段声明，</span><span lang="EN-US">Maven</span><span>就能够自动下载</span><span lang="EN-US">junit-4.7.jar</span><span>。也许你会问，</span><span lang="EN-US">Maven</span><span>从哪里下载这个</span><span lang="EN-US">jar</span><span>呢？在</span><span lang="EN-US">Maven</span><span>之前，我们可以去</span><span lang="EN-US">JUnit</span><span>的官网下载分发包。而现在有了</span><span lang="EN-US">Maven</span><span>，它会自动访问中央仓库（</span><span lang="EN-US"><a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</a></span><span>），下载需要的文件。读者也可以自己访问该仓库，打开路径</span><span lang="EN-US">junit/junit/4.7/</span><span>，就能看到</span><span lang="EN-US">junit-4.7.pom</span><span>和</span><span lang="EN-US">junit-4.7.jar</span><span>。本书第</span><span lang="EN-US">6</span><span>章会详细介绍</span><span lang="EN-US">Maven</span><span>仓库及中央仓库。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>上述</span><span lang="EN-US">POM</span><span>代码中还有一个值为</span><span lang="EN-US">test</span><span>的元素</span><span lang="EN-US">scope</span><span>，</span><span lang="EN-US">scope</span><span>为依赖范围，若依赖范围为</span><span lang="EN-US">test</span><span>则表示该依赖只对测试有效，换句话说，测试代码中的</span><span lang="EN-US">import JUnit</span><span>代码是没有问题的，但是如果我们在主代码中用</span><span lang="EN-US">import JUnit</span><span>代码，就会造成编译错误。如果不声明依赖范围，那么默认值就是</span><span lang="EN-US">compile</span><span>，表示该依赖对主代码和测试代码都有效。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>配置了测试依赖，接着就可以编写测试类，回顾一下前面的</span><span lang="EN-US">HelloWorld</span><span>类，现在我们要测试该类的</span><span lang="EN-US">sayHello()</span><span>方法，检查其返回值是否为“</span><span lang="EN-US">Hello Maven</span><span>”。在</span><span lang="EN-US">src/test/java</span><span>目录下创建文件，其内容如代码清单</span><span lang="EN-US">3-4</span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span lang="EN-US">3-4</span><span>：</span><span lang="EN-US">Hello World</span><span>的测试代码</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;com.juvenxu.mvnbook.helloworld;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;org.junit.Assert.assertEquals;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;org.junit.Test;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;HelloWorldTest&nbsp;&nbsp;</span></span></li>
<li><span>{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Test</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;testSayHello()&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld&nbsp;helloWorld&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;HelloWorld();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;result&nbsp;=&nbsp;helloWorld.sayHello();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(&nbsp;<span class="string">"Hello&nbsp;Maven"</span><span>,&nbsp;result&nbsp;);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>一个典型的单元测试包含三个步骤：一，准备测试类及数据；二，执行要测试的行为；三，检查结果。上述样例中，我们首先初始化了一个要测试的</span><span lang="EN-US">HelloWorld</span><span>实例，接着执行该实例的</span><span lang="EN-US">sayHello()</span><span>方法并保存结果到</span><span lang="EN-US">result</span><span>变量中，最后使用</span><span lang="EN-US">JUnit</span><span>框架的</span><span lang="EN-US">Assert</span><span>类检查结果是否为我们期望的</span><span lang="EN-US">”Hello Maven”</span><span>。在</span><span lang="EN-US">JUnit 3</span><span>中，约定所有需要执行测试的方法都以</span><span lang="EN-US">test</span><span>开头，这里我们使用了</span><span lang="EN-US">JUnit 4</span><span>，但我们仍然遵循这一约定，在</span><span lang="EN-US">JUnit 4</span><span>中，需要执行的测试方法都应该以</span><span lang="EN-US">@Test</span><span>进行标注。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>测试用例编写完毕之后就可以调用</span><span lang="EN-US">Maven</span><span>执行测试，运行</span> <strong><span lang="EN-US">mvn clean test</span></strong><span lang="EN-US"> </span><span>：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>[INFO]&nbsp;Scanning&nbsp;</span><span class="keyword">for</span><span>&nbsp;projects...&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Building&nbsp;Maven&nbsp;Hello&nbsp;World&nbsp;Project&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;&nbsp;&nbsp;&nbsp;task-segment:&nbsp;[clean,&nbsp;test]&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[clean:clean&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-clean}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Deleting&nbsp;directory&nbsp;D:\git-juven\mvnbook\code\hello-world\target&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[resources:resources&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-resources}]&nbsp;&nbsp;</span></span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>Downloading:&nbsp;http:<span class="comment">//repo1.maven.org/maven2/junit/junit/4.7/junit-4.7.pom</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>1K&nbsp;downloaded&nbsp;&nbsp;(junit-<span class="number">4.7</span><span>.pom)&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[compiler:compile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-compile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:&nbsp;\code\hello-world\target\classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[resources:testResources&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-testResources}]&nbsp;&nbsp;</span></span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>Downloading:&nbsp;http:<span class="comment">//repo1.maven.org/maven2/junit/junit/4.7/junit-4.7.jar</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>226K&nbsp;downloaded&nbsp;&nbsp;(junit-<span class="number">4.7</span><span>.jar)&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[compiler:testCompile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-testCompile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:\&nbsp;code\hello-world\target\test-classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[ERROR]&nbsp;BUILD&nbsp;FAILURE&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;Compilation&nbsp;failure&nbsp;&nbsp;</span></li>
<li><span>D:\code\hello-world\src\test\java\com\juvenxu\mvnbook\helloworld\HelloWorldTest.java:[<span class="number">8</span><span>,</span><span class="number">5</span><span>]&nbsp;-source&nbsp;</span><span class="number">1.3</span><span>&nbsp;中不支持注释&nbsp;&nbsp;</span></span></li>
<li><span>（请使用&nbsp;-source&nbsp;<span class="number">5</span><span>&nbsp;或更高版本以启用注释）&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Test</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;For&nbsp;more&nbsp;information,&nbsp;run&nbsp;Maven&nbsp;with&nbsp;the&nbsp;-e&nbsp;<span class="keyword">switch</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;…&nbsp;&nbsp;</span></li>
</ol></div>
&nbsp;
<p class="MsoNormal" style="text-indent: 21pt;"><span>不幸的是构建失败了，不过我们先耐心分析一下这段输出（为了本书的简洁，一些不重要的信息我用省略号略去了）。命令行输入的是</span><span lang="EN-US">mvn clean test</span><span>，而</span><span lang="EN-US">Maven</span><span>实际执行的可不止这两个任务，还有</span><span lang="EN-US">clean:clean</span><span>、</span><span lang="EN-US">resources:resources</span><span>、</span><span lang="EN-US">compiler:compile</span><span>、</span><span lang="EN-US">resources:testResources</span><span>以及</span><span lang="EN-US">compiler:testCompile</span><span>。暂时我们需要了解的是，在</span><span lang="EN-US">Maven</span><span>执行测试（</span><span lang="EN-US">test</span><span>）之前，它会先自动执行项目主资源处理，主代码编译，测试资源处理，测试代码编译等工作，这是</span><span lang="EN-US">Maven</span><span>生命周期的一个特性，本书后续章节会详细解释</span><span lang="EN-US">Maven</span><span>的生命周期。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>从输出中我们还看到：</span><span lang="EN-US">Maven</span><span>从中央仓库下载了</span><span lang="EN-US">junit-4.7.pom</span><span>和</span><span lang="EN-US">junit-4.7.jar</span><span>这两个文件到本地仓库（</span><em><span lang="EN-US">~/.m2/repository</span></em><span>）中，供所有</span><span lang="EN-US">Maven</span><span>项目使用。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>构建在执行</span><span lang="EN-US">compiler:testCompile</span><span>任务的时候失败了，</span><span lang="EN-US">Maven</span><span>输出提示我们需要使用</span><span lang="EN-US">-source
5</span><span>或更高版本以启动注释，也就是前面提到的</span><span lang="EN-US">JUnit 4</span><span>的</span><span lang="EN-US">@Test</span><span>注解。这是</span><span lang="EN-US">Maven</span><span>初学者常常会遇到的一个问题。由于历史原因，</span><span lang="EN-US">Maven</span><span>的核心插件之一</span><span lang="EN-US">compiler</span><span>插件默认只支持编译</span><span lang="EN-US">Java 1.3</span><span>，因此我们需要配置该插件使其支持</span><span lang="EN-US">Java 5</span><span>，见代码清单</span><span lang="EN-US">3-5</span><span>：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>代码清单</span><span lang="EN-US">3-5</span><span>：配置</span><span lang="EN-US">maven-compiler-plugin</span><span>支持</span><span lang="EN-US">Java 5</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;project&gt;&nbsp;&nbsp;</span></span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;build&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;source&gt;<span class="number">1.5</span><span>&lt;/source&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&gt;<span class="number">1.5</span><span>&lt;/target&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;/build&gt;&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
<li><span>&lt;/project&gt;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>该</span><span lang="EN-US">POM</span><span>省略了除插件配置以外的其他部分，我们暂且不去关心插件配置的细节，只需要知道</span><span lang="EN-US">compiler</span><span>插件支持</span><span lang="EN-US">Java 5</span><span>的编译。现在再执行</span><strong><span lang="EN-US">mvn clean test</span></strong><strong><span>，</span></strong><span>输出如下：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>…&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[compiler:testCompile&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-testCompile}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Compiling&nbsp;<span class="number">1</span><span>&nbsp;source&nbsp;file&nbsp;to&nbsp;D:&nbsp;\code\hello-world\target\test-classes&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;[surefire:test&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-test}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Surefire&nbsp;report&nbsp;directory:&nbsp;D:\code\hello-world\target\surefire-reports&nbsp;&nbsp;</span></li>
<li><span>-------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>&nbsp;T&nbsp;E&nbsp;S&nbsp;T&nbsp;S&nbsp;&nbsp;</span></li>
<li><span>-------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>Running&nbsp;com.juvenxu.mvnbook.helloworld.HelloWorldTest&nbsp;&nbsp;</span></li>
<li><span>Tests&nbsp;run:&nbsp;<span class="number">1</span><span>,&nbsp;Failures:&nbsp;</span><span class="number">0</span><span>,&nbsp;Errors:&nbsp;</span><span class="number">0</span><span>,&nbsp;Skipped:&nbsp;</span><span class="number">0</span><span>,&nbsp;Time&nbsp;elapsed:&nbsp;</span><span class="number">0.055</span><span>&nbsp;sec&nbsp;&nbsp;</span></span></li>
<li><span>Results&nbsp;:&nbsp;&nbsp;</span></li>
<li><span>Tests&nbsp;run:&nbsp;<span class="number">1</span><span>,&nbsp;Failures:&nbsp;</span><span class="number">0</span><span>,&nbsp;Errors:&nbsp;</span><span class="number">0</span><span>,&nbsp;Skipped:&nbsp;</span><span class="number">0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们看到</span><span lang="EN-US">compiler:testCompile</span><span>任务执行成功了，测试代码通过编译之后在</span><em><span lang="EN-US">target/test-classes</span></em><span>下生成了二进制文件，紧接着</span><span lang="EN-US">surefire:test</span><span>任务运行测试，</span><span lang="EN-US">surefire</span><span>是</span><span lang="EN-US">Maven</span><span>世界中负责执行测试的插件，这里它运行测试用例</span><span lang="EN-US">HelloWorldTest</span><span>，并且输出测试报告，显示一共运行了多少测试，失败了多少，出错了多少，跳过了多少。显然，我们的测试通过了——</span><span lang="EN-US">BUILD SUCCESSFUL</span><span>。</span></p>
</div>
<h2>
        3.4 打包和运行
        <a name="3350" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>将项目进行编译、测试之后，下一个重要步骤就是打包（</span><span lang="EN-US">package</span><span>）。</span><span lang="EN-US">Hello World</span><span>的</span><span lang="EN-US">POM</span><span>中没有指定打包类型，使用默认打包类型</span><span lang="EN-US">jar</span><span>，我们可以简单地执行命令</span> <strong><span lang="EN-US">mvn clean package</span></strong><span lang="EN-US"> </span><span>进行打包，可以看到如下输出：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>…&nbsp;&nbsp;</span></span></li>
<li><span>Tests&nbsp;run:&nbsp;<span class="number">1</span><span>,&nbsp;Failures:&nbsp;</span><span class="number">0</span><span>,&nbsp;Errors:&nbsp;</span><span class="number">0</span><span>,&nbsp;Skipped:&nbsp;</span><span class="number">0</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;[jar:jar&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-jar}]&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;Building&nbsp;jar:&nbsp;D:\code\hello-world\target\hello-world-<span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;&nbsp;</span></span></li>
<li><span>[INFO]&nbsp;&nbsp;&nbsp;</span></li>
<li><span>--------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>…&nbsp;&nbsp;</span></li>
</ol></div>
&nbsp;
<p class="MsoNormal" style="text-indent: 21pt;"><span>类似地，</span><span lang="EN-US">Maven</span><span>会在打包之前执行编译、测试等操作。这里我们看到</span><span lang="EN-US">jar:jar</span><span>任务负责打包，实际上就是</span><span lang="EN-US">jar</span><span>插件的</span><span lang="EN-US">jar</span><span>目标将项目主代码打包成一个名为</span><em><span lang="EN-US">hello-world-1.0-SNAPSHOT.jar</span></em><span>的文件，该文件也位于</span><em><span lang="EN-US">target/</span></em><span>输出目录中，它是根据</span><span lang="EN-US">artifact-version.jar</span><span>规则进行命名的，如有需要，我们还可以使用</span><em><span lang="EN-US">finalName</span></em><span>来自定义该文件的名称，这里暂且不展开，本书后面会详细解释。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>至此，我们得到了项目的输出，如果有需要的话，就可以复制这个</span><span lang="EN-US">jar</span><span>文件到其他项目的</span><span lang="EN-US">Classpath</span><span>中从而使用</span><span lang="EN-US">HelloWorld</span><span>类。但是，如何才能让其他的</span><span lang="EN-US">Maven</span><span>项目直接引用这个</span><span lang="EN-US">jar</span><span>呢？我们还需要一个安装的步骤，执行</span> <strong><span lang="EN-US">mvn clean install</span></strong><span>：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&nbsp;&nbsp;&nbsp;…&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;[jar:jar&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-jar}]&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;Building&nbsp;jar:&nbsp;D:&nbsp;\code\hello-world\target\hello-world-<span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;[install:install&nbsp;{execution:&nbsp;<span class="keyword">default</span><span>-install}]&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;Installing&nbsp;D:\code\hello-world\target\hello-world-<span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;to&nbsp;C:\Users\juven\.m2\repository\com\juvenxu\mvnbook\hello-world\</span><span class="number">1.0</span><span>-SNAPSHOT\hello-world-</span><span class="number">1.0</span><span>-SNAPSHOT.jar&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;&nbsp;</span></li>
<li><span>------------------------------------------------------------------------&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;[INFO]&nbsp;BUILD&nbsp;SUCCESSFUL&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;…&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在打包之后，我们又执行了安装任务</span><span lang="EN-US">install:install</span><span>，从输出我们看到该任务将项目输出的</span><span lang="EN-US">jar</span><span>安装到了</span><span lang="EN-US">Maven</span><span>本地仓库中，我们可以打开相应的文件夹看到</span><span lang="EN-US">Hello World</span><span>项目的</span><span lang="EN-US">pom</span><span>和</span><span lang="EN-US">jar</span><span>。之前讲述</span><span lang="EN-US">JUnit</span><span>的</span><span lang="EN-US">POM</span><span>及</span><span lang="EN-US">jar</span><span>的下载的时候，我们说只有构件被下载到本地仓库后，才能由所有</span><span lang="EN-US">Maven</span><span>项目使用，这里是同样的道理，只有将</span><span lang="EN-US">Hello World</span><span>的构件安装到本地仓库之后，其他</span><span lang="EN-US">Maven</span><span>项目才能使用它。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们已经将体验了</span><span lang="EN-US">Maven</span><span>最主要的命令：</span><strong><span lang="EN-US">mvn clean compile</span></strong><strong><span>、</span><span lang="EN-US">mvn clean
test</span></strong><strong><span>、</span><span lang="EN-US">mvn clean package</span></strong><strong><span>、</span><span lang="EN-US">mvn clean install</span></strong><span>。执行</span><span lang="EN-US">test</span><span>之前是会先执行</span><span lang="EN-US">compile</span><span>的，执行</span><span lang="EN-US">package</span><span>之前是会先执行</span><span lang="EN-US">test</span><span>的，而类似地，</span><span lang="EN-US">install</span><span>之前会执行</span><span lang="EN-US">package</span><span>。我们可以在任何一个</span><span lang="EN-US">Maven</span><span>项目中执行这些命令，而且我们已经清楚它们是用来做什么的。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>到目前为止，我们还没有运行</span><span lang="EN-US">Hello World</span><span>项目，不要忘了</span><span lang="EN-US">HelloWorld</span><span>类可是有一个</span><span lang="EN-US">main</span><span>方法的。默认打包生成的</span><span lang="EN-US">jar</span><span>是不能够直接运行的，因为带有</span><span lang="EN-US">main</span><span>方法的类信息不会添加到</span><span lang="EN-US">manifest</span><span>中</span><span lang="EN-US">(</span><span>我们可以打开</span><span lang="EN-US">jar</span><span>文件中的</span><em><span lang="EN-US">META-INF/MANIFEST.MF</span></em><span>文件，将无法看到</span><span lang="EN-US">Main-Class</span><span>一行</span><span lang="EN-US">)</span><span>。为了生成可执行的</span><span lang="EN-US">jar</span><span>文件，我们需要借助</span><span lang="EN-US">maven-shade-plugin</span><span>，配置该插件如下：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>&lt;plugin&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;version&gt;<span class="number">1.2</span><span>.</span><span class="number">1</span><span>&lt;/version&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&lt;executions&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;execution&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;phase&gt;<span class="keyword">package</span><span>&lt;/phase&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;goals&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;goal&gt;shade&lt;/goal&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/goals&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transformers&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transformer&nbsp;implementation=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span><span>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;mainClass&gt;com.juvenxu.mvnbook.helloworld.HelloWorld&lt;/mainClass&gt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/transformer&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/transformers&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/execution&gt;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&lt;/executions&gt;&nbsp;&nbsp;</span></li>
<li><span>&lt;/plugin&gt;&nbsp;&nbsp;</span></li>
</ol></div>
&nbsp;
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">plugin</span><span>元素在</span><span lang="EN-US">POM</span><span>中的相对位置应该在</span><span lang="EN-US">&lt;project&gt;&lt;build&gt;&lt;plugins&gt;</span><span>下面。我们配置了</span><span lang="EN-US">mainClass</span><span>为</span><span lang="EN-US">com.juvenxu.mvnbook.helloworld.HelloWorld</span><span>，项目在打包时会将该信息放到</span><span lang="EN-US">MANIFEST</span><span>中。现在执行</span><span> <strong><span lang="EN-US">mvn clean install</span></strong><span lang="EN-US"> </span></span><span>，待构建完成之后打开</span><span lang="EN-US">target/</span><span>目录，我们可以看到</span><em><span lang="EN-US">hello-world-1.0-SNAPSHOT.jar</span></em><span>和</span><em><span lang="EN-US">original-hello-world-1.0-SNAPSHOT.jar</span></em><span>，前者是带有</span><span lang="EN-US">Main-Class</span><span>信息的可运行</span><span lang="EN-US">jar</span><span>，后者是原始的</span><span lang="EN-US">jar</span><span>，打开</span><em><span lang="EN-US">hello-world-1.0-SNAPSHOT.jar</span></em><span>的</span><em><span lang="EN-US">META-INF/MANIFEST.MF</span></em><span>，可以看到它包含这样一行信息：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">Main-Class: com.juvenxu.mvnbook.helloworld.HelloWorld</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>现在，我们在项目根目录中执行该</span><span lang="EN-US">jar</span><span>文件：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">D:
\code\hello-world&gt;java -jar target\hello-world-1.0-SNAPSHOT.jar</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">Hello Maven</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>控制台输出为</span><span lang="EN-US">Hello Maven</span><span>，这正是我们所期望的。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>本小节介绍了</span><span lang="EN-US">Hello World</span><span>项目，侧重点是</span><span lang="EN-US">Maven</span><span>而非</span><span lang="EN-US">Java</span><span>代码本身，介绍了</span><span lang="EN-US">POM</span><span>、</span><span lang="EN-US">Maven</span><span>项目结构、以及如何编译、测试、打包，等等。</span></p>
</div>
<h2>
        3.5 使用Archetype生成项目骨架
        <a name="3351" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Hello World</span><span>项目中有一些</span><span lang="EN-US">Maven</span><span>的约定：在项目的根目录中放置</span><span lang="EN-US">pom.xml</span><span>，在</span><span lang="EN-US">src/main/java</span><span>目录中放置项目的主代码，在</span><span lang="EN-US">src/test/java</span><span>中放置项目的测试代码。我之所以一步一步地展示这些步骤，是为了能让可能是</span><span lang="EN-US">Maven</span><span>初学者的你得到最实际的感受。我们称这些基本的目录结构和</span><span lang="EN-US">pom.xml</span><span>文件内容称为项目的骨架，当你第一次创建项目骨架的时候，你还会饶有兴趣地去体会这些默认约定背后的思想，第二次，第三次，你也许还会满意自己的熟练程度，但第四、第五次做同样的事情，就会让程序员恼火了，为此</span><span lang="EN-US">Maven</span><span>提供了</span><span lang="EN-US">Archetype</span><span>以帮助我们快速勾勒出项目骨架。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>还是以</span><span lang="EN-US">Hello World</span><span>为例，我们使用</span><span lang="EN-US">maven archetype</span><span>来创建该项目的骨架，离开当前的</span><span lang="EN-US">Maven</span><span>项目目录。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果是</span><span lang="EN-US">Maven 3</span><span>，简单的运行：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">mvn archetype:generate</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>如果是</span><span lang="EN-US">Maven 2</span><span>，最好运行如下命令：</span></p>
<p class="a" style="text-indent: 17pt;"><span lang="EN-US">mvn
org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-5:generate</span></p>
<p class="MsoNormal" style="margin-left: 5.25pt; text-indent: 15.75pt;"><span>很多资料会让你直接使用更为简单的</span><span lang="EN-US"> mvn archetype:generate </span><span>命令，但在</span><span lang="EN-US">Maven2</span><span>中这是不安全的，因为该命令没有指定</span><span lang="EN-US">archetype</span><span>插件的版本，于是</span><span lang="EN-US">Maven</span><span>会自动去下载最新的版本，进而可能得到不稳定的</span><span lang="EN-US">SNAPSHOT</span><span>版本，导致运行失败。然而在</span><span lang="EN-US">Maven 3</span><span>中，即使用户没有指定版本，</span><span lang="EN-US">Maven</span><span>也只会解析最新的稳定版本，因此这是安全的，具体内容见</span><span lang="EN-US">7.7</span><span>小节。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们实际上是在运行插件</span><span lang="EN-US">maven-archetype-plugin</span><span>，注意冒号的分隔，其格式为</span>
<em><span lang="EN-US">groupId:artifactId:version:goal
</span></em><span>，</span><span lang="EN-US">org.apache.maven.plugins
</span><span>是</span><span lang="EN-US">maven</span><span>官方插件的</span><span lang="EN-US">groupId</span><span>，</span><span lang="EN-US">maven-archetype-plugin </span><span>是</span><span lang="EN-US">archetype</span><span>插件的</span><span lang="EN-US">artifactId</span><span>，</span><span lang="EN-US">2.0-alpha-5 </span><span>是目前该插件最新的稳定版，</span><span lang="EN-US">generate</span><span>是我们要使用的插件目标。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>紧接着我们会看到一段长长的输出，有很多可用的</span><span lang="EN-US">archetype</span><span>供我们选择，包括著名的</span><span lang="EN-US">Appfuse</span><span>项目的</span><span lang="EN-US">archetype</span><span>，</span><span lang="EN-US">JPA</span><span>项目的</span><span lang="EN-US">archetype</span><span>等等。每一个</span><span lang="EN-US">archetype</span><span>前面都会对应有一个编号，同时命令行会提示一个默认的编号，其对应的</span><span lang="EN-US">archetype</span><span>为</span><span lang="EN-US">maven-archetype-quickstart</span><span>，我们直接回车以选择该</span><span lang="EN-US">archetype</span><span>，紧接着</span><span lang="EN-US">Maven</span><span>会提示我们输入要创建项目的</span><span lang="EN-US">groupId</span><span>、</span><span lang="EN-US">artifactId</span><span>、</span><span lang="EN-US"> version</span><span>、以及包名</span><span lang="EN-US">package</span><span>，如下输入并确认：</span></p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码 &nbsp;<a title="收藏这段代码"><img class="star" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_star.png" alt="收藏代码"></a></div>
</div>
<ol class="dp-j" start="1">
<li><span><span>Define&nbsp;value&nbsp;</span><span class="keyword">for</span><span>&nbsp;groupId:&nbsp;:&nbsp;com.juvenxu.mvnbook&nbsp;&nbsp;</span></span></li>
<li><span>Define&nbsp;value&nbsp;<span class="keyword">for</span><span>&nbsp;artifactId:&nbsp;:&nbsp;hello-world&nbsp;&nbsp;</span></span></li>
<li><span>Define&nbsp;value&nbsp;<span class="keyword">for</span><span>&nbsp;version:&nbsp;&nbsp;</span><span class="number">1.0</span><span>-SNAPSHOT:&nbsp;:&nbsp;&nbsp;</span></span></li>
<li><span>Define&nbsp;value&nbsp;<span class="keyword">for</span><span>&nbsp;</span><span class="keyword">package</span><span>:&nbsp;&nbsp;com.juvenxu.mvnbook:&nbsp;:&nbsp;com.juvenxu.mvnbook.helloworld&nbsp;&nbsp;</span></span></li>
<li><span>Confirm&nbsp;properties&nbsp;configuration:&nbsp;&nbsp;</span></li>
<li><span>groupId:&nbsp;com.juvenxu.mvnbook&nbsp;&nbsp;</span></li>
<li><span>artifactId:&nbsp;hello-world&nbsp;&nbsp;</span></li>
<li><span>version:&nbsp;<span class="number">1.0</span><span>-SNAPSHOT&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">package</span><span>:&nbsp;com.juvenxu.mvnbook.helloworld&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;Y:&nbsp;:&nbsp;Y&nbsp;&nbsp;</span></li>
</ol></div>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Archetype</span><span>插件将根据我们提供的信息创建项目骨架。在当前目录下，</span><span lang="EN-US">Archetype</span><span>插件会创建一个名为</span><span lang="EN-US">hello-world</span><span>（我们定义的</span><span lang="EN-US">artifactId</span><span>）的子目录，从中可以看到项目的基本结构：基本的</span><em><span lang="EN-US">pom.xml</span></em><span>已经被创建，里面包含了必要的信息以及一个</span><span lang="EN-US">junit</span><span>依赖；主代码目录</span><em><span lang="EN-US">src/main/java</span></em><span>已经被创建，在该目录下还有一个</span><span lang="EN-US">Java</span><span>类</span><em><span lang="EN-US">com.juvenxu.mvnbook.helloworld.App</span></em><span>，注意这里使用到了我们刚才定义的包名，而这个类也仅仅只有一个简单的输出</span><span lang="EN-US">Hello
World!</span><span>的</span><span lang="EN-US">main</span><span>方法；测试代码目录</span><em><span lang="EN-US">src/test/java</span></em><span>也被创建好了，并且包含了一个测试用例</span><em><span lang="EN-US">com.juvenxu.mvnbook.helloworld.AppTest</span></em><span>。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Archetype</span><span>可以帮助我们迅速地构建起项目的骨架，在前面的例子中，我们完全可以在</span><span lang="EN-US">Archetype</span><span>生成的骨架的基础上开发</span><span lang="EN-US">Hello World</span><span>项目以节省我们大量时间。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>此外，我们这里仅仅是看到了一个最简单的</span><span lang="EN-US">archetype</span><span>，如果你有很多项目拥有类似的自定义项目结构以及配置文件，你完全可以一劳永逸地开发自己的</span><span lang="EN-US">archetype</span><span>，然后在这些项目中使用自定义的</span><span lang="EN-US">archetype</span><span>来快速生成项目骨架，本书后面的章节会详细阐述如何开发</span><span lang="EN-US">Maven Archetype</span><span>。</span></p>
</div>
<h2>
        3.6 m2eclipse简单使用
        <a name="3352" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span>介绍前面</span><span lang="EN-US">Hello World</span><span>项目的时候，我们并没有涉及</span><span lang="EN-US">IDE</span><span>，如此简单的一个项目，使用最简单的编辑器也能很快完成，但对于稍微大一些的项目来说，没有</span><span lang="EN-US">IDE</span><span>就是不可想象的，本节我们先介绍</span><span lang="EN-US">m2eclipse</span><span>的基本使用。</span></p>
<h2>
<span lang="EN-US">3.6.1 </span><span>导入</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>第</span><span lang="EN-US">2</span><span>章介绍了如何安装</span><span lang="EN-US">m2eclipse</span><span>，现在，我们使用</span><span lang="EN-US">m2ecilpse</span><span>导入</span><span lang="EN-US">Hello World</span><span>项目。选择菜单项</span><strong><span lang="EN-US">File</span></strong><span>，然后选择</span><strong><span lang="EN-US">Import</span></strong><span>，我们会看到一个</span><span lang="EN-US">Import</span><span>对话框，在该对话框中选择</span><span lang="EN-US">General</span><span>目录下的</span><strong><span lang="EN-US">Maven Projects</span></strong><span>，然后点击</span><strong><span lang="EN-US">Next</span></strong><span>，就会出现</span><strong><span lang="EN-US">Import Projects</span></strong><span>对话框，在该对话框中点击</span><strong><span lang="EN-US">Browse…</span></strong><span>选择</span><span lang="EN-US">Hello World</span><span>的根目录（即包含</span><span lang="EN-US">pom.xml</span><span>文件的那个目录），这时对话框中的</span><strong><span lang="EN-US">Projects:</span></strong><span>部分就会显示该目录包含的</span><span lang="EN-US">Maven</span><span>项目，如图</span><span lang="EN-US">3-1</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/9a71aa9f-dc5e-32e1-8d0e-f71de55de5e9.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-1 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中导入</span><span lang="EN-US">Maven</span><span>项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>点击</span><span lang="EN-US">Finish</span><span>之后，</span><span lang="EN-US">m2ecilpse</span><span>就会将该项目导入到当前的</span><span lang="EN-US">workspace</span><span>中，导入完成之后，我们就可以在</span><span lang="EN-US">Package Explorer</span><span>视图中看到如图</span><span lang="EN-US">3-2</span><span>所示的项目结构：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/dc2c1bfc-ce95-3395-a5d7-16bdf5894101.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-2 Eclipse</span><span>中导入的</span><span lang="EN-US">Maven</span><span>项目结构</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们看到主代码目录</span><em><span lang="EN-US">src/main/java</span></em><span>和测试代码目录</span><em><span lang="EN-US">src/test/java</span></em><span>成了</span><span lang="EN-US">Eclipse</span><span>中的资源目录，包和类的结构也十分清晰，当然</span><span lang="EN-US">pom.xml</span><span>永远在项目的根目录下，而从这个视图中我们甚至还能看到项目的依赖</span><span lang="EN-US">junit-4.7.jar</span><span>，其实际的位置指向了</span><span lang="EN-US">Maven</span><span>本地仓库（这里我自定义了</span><span lang="EN-US">Maven</span><span>本地仓库地址为</span><em><span lang="EN-US">D:\java\repository</span></em><span>，后续章节会介绍如何自定义本地仓库位置）。</span></p>
<h2>
<span lang="EN-US">3.6.2 </span><span>创建</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>创建一个</span><span lang="EN-US">Maven</span><span>项目也十分简单，选择菜单项</span><strong><span lang="EN-US">File -&gt; New -&gt; Other</span></strong><span>，在弹出的对话框中选择</span><span lang="EN-US">Maven</span><span>下的</span><strong><span lang="EN-US">Maven Project</span></strong><span>，然后点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，在弹出的</span><strong><span lang="EN-US">New Maven Project</span></strong><span>对话框中，我们使用默认的选项（不要选择</span><span lang="EN-US">Create a simple project</span><span>选项，那样我们就能使用</span><span lang="EN-US">Maven Archetype</span><span>），点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>，此时</span><span lang="EN-US">m2eclipse</span><span>会提示我们选择一个</span><span lang="EN-US">Archetype</span><span>，我们选择</span><strong><span lang="EN-US">maven-archetype-quickstart</span></strong><span>，再点击</span><strong><span lang="EN-US">Next &gt;</span></strong><span>。由于</span><span lang="EN-US">m2eclipse</span><span>实际上是在使用</span><span lang="EN-US">maven-archetype-plugin</span><span>插件创建项目，因此这个步骤与上一节我们使用</span><span lang="EN-US">archetype</span><span>创建项目骨架类似，输入</span><span lang="EN-US">groupId,</span><span>、</span><span lang="EN-US">artifactId</span><span>、</span><span lang="EN-US">version</span><span>、</span><span lang="EN-US">package</span><span>（暂时我们不考虑</span><span lang="EN-US">Properties</span><span>），如图</span><span lang="EN-US">3-3</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/bb255ca9-2341-37fb-aa9c-de619c2bf80a.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-3 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中使用</span><span lang="EN-US">Archetype</span><span>创建项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>注意，为了不和前面已导入的</span><span lang="EN-US">Hello World</span><span>项目产生冲突和混淆，我们使用不同的</span><span lang="EN-US">artifactId</span><span>和</span><span lang="EN-US">package</span><span>。</span><span lang="EN-US">OK</span><span>，点击</span><span lang="EN-US">Finish</span><span>，</span><span lang="EN-US">Maven</span><span>项目就创建完成了，其结构与前一个已导入的</span><span lang="EN-US">Hello World</span><span>项目基本一致。</span></p>
<h2>
<span lang="EN-US">3.6.3 </span><span>运行</span><span lang="EN-US">mvn</span><span>命令</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>我们需要在命令行输入如</span><span lang="EN-US">mvn clean install</span><span>之类的命令来执行</span><span lang="EN-US">maven</span><span>构建，</span><span lang="EN-US">m2eclipse</span><span>中也有对应的功能，在</span><span lang="EN-US">Maven</span><span>项目或者</span><span lang="EN-US">pom.xml</span><span>上右击，再选择</span><span lang="EN-US">Run As</span><span>，就能看到如下的常见</span><span lang="EN-US">Maven</span><span>命令，如图</span><span lang="EN-US">3-4</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/09f3ec72-eb31-3f25-97af-545213fe4793.jpg" height="286" width="650"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-4 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中运行默认</span><span lang="EN-US">mvn</span><span>命令</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>选择想要执行的</span><span lang="EN-US">Maven</span><span>命令就能执行相应的构建，同时我们也能在</span><span lang="EN-US">Eclipse</span><span>的</span><span lang="EN-US">console</span><span>中看到构建输出。这里常见的一个问题是，默认选项中没有我们想要执行的</span><span lang="EN-US">Maven</span><span>命令怎么办？比如，默认带有</span><span lang="EN-US">mvn
test</span><span>，但我们想执行</span><span lang="EN-US">mvn
clean test</span><span>，很简单，选择</span><strong><span lang="EN-US">Maven buid… </span></strong><span>以自定义</span><span lang="EN-US">Maven</span><span>运行命令，在弹出对话框中的</span><strong><span lang="EN-US">Goals</span></strong><span>一项中输入我们想要执行的命令，如</span><span lang="EN-US">clean test</span><span>，设置一下</span><span lang="EN-US">Name</span><span>，点击</span><strong><span lang="EN-US">Run</span></strong><span>即可。并且，下一次我们选择</span><strong><span lang="EN-US">Maven build</span></strong><span>，或者使用快捷键</span><span lang="EN-US">Alt + Shift + X, M</span><span>快速执行</span><span lang="EN-US">Maven</span><span>构建的时候，上次的配置直接就能在历史记录中找到。图</span><span lang="EN-US">3-5</span><span>就是自定义</span><span lang="EN-US">Maven</span><span>运行命令的界面：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/e5d87183-1eee-3ac6-ba33-577fc7098dcf.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-5 </span><span>在</span><span lang="EN-US">Eclipse</span><span>中自定义</span><span lang="EN-US">mvn</span><span>命令</span></p>
</div>
<h2>
        3.7  NetBeans Maven插件简单使用
        <a name="3353" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">NetBeans</span><span>的</span><span lang="EN-US">Maven</span><span>插件也十分简单易用，我们可以轻松地在</span><span lang="EN-US">NetBeans</span><span>中导入现有的</span><span lang="EN-US">Maven</span><span>项目，或者使用</span><span lang="EN-US">Archetype</span><span>创建</span><span lang="EN-US">Maven</span><span>项目，我们也能够在</span><span lang="EN-US">NetBeans</span><span>中直接运行</span><span lang="EN-US">mvn</span><span>命令。</span></p>
<h2>
<span lang="EN-US">3.7.1 </span><span>打开</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>与其说<strong><em>打开</em></strong></span><span lang="EN-US">Maven</span><span>项目，不如称之为<strong><em>导入</em></strong>更为合适，因为这个项目不需要是</span><span lang="EN-US">NetBeans</span><span>创建的</span><span lang="EN-US">Maven</span><span>项目，不过这里我们还是遵照</span><span lang="EN-US">NetBeans</span><span>菜单中使用的名称。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>选择菜单栏中的<strong>文件</strong>，然后选择<strong>打开项目</strong>，直接定位到</span><span lang="EN-US">Hello World</span><span>项目的根目录，</span><span lang="EN-US">NetBeans</span><span>会十分智能地识别出</span><span lang="EN-US">Maven</span><span>项目，如图</span><span lang="EN-US">3-6</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/2466e26a-6ded-3b86-974e-4fbc8398a281.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">3-6 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中导入</span><span lang="EN-US">Maven</span><span>项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">Maven</span><span>项目的图标有别于一般的文件夹，点击<strong>打开项目</strong>后，</span><span lang="EN-US">Hello World</span><span>项目就会被导入到</span><span lang="EN-US">NetBeans</span><span>中，在<strong>项目</strong>视图中可以看到如图</span><span lang="EN-US">3-7</span><span>所示的项目结构：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/142d7729-7fcd-33ee-9fd2-5949990bcde5.jpg"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-7 NetBeans</span><span>中导入的</span><span lang="EN-US">Maven</span><span>项目结构</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">NetBeans</span><span>中项目主代码目录的名称为<strong>源包</strong>，测试代码目录成了<strong>测试包</strong>，编译范围依赖为<strong>库</strong>，测试范围依赖为<strong>测试库</strong>，这里我们也能看到</span><span lang="EN-US">pom.xml</span><span>，</span><span lang="EN-US">NetBeans</span><span>甚至还帮我们引用了</span><span lang="EN-US">settings.xml</span><span>。</span></p>
<h2>
<span lang="EN-US">3.7.2 </span><span>创建</span><span lang="EN-US">Maven</span><span>项目</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在</span><span lang="EN-US">NetBeans</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目同样十分轻松，在菜单栏中选择<strong>文件</strong>，然后<strong>新建项目</strong>，在弹出的对话框中，选择项目类别为</span><strong><span lang="EN-US">Maven</span></strong><span>，项目为</span><strong><span lang="EN-US">Maven</span></strong><strong><span>项目</span></strong><span>，点击“下一步”之后，对话框会提示我们选择</span><span lang="EN-US">Maven</span><span>原型（即</span><span lang="EN-US">Maven Archtype</span><span>），我们选择</span><strong><span lang="EN-US">Maven</span></strong><strong><span>快速启动原型（</span><span lang="EN-US">1.0</span></strong><strong><span>）</span></strong><span>，（即前文提到的</span><span lang="EN-US">maven-archetype-quickstart</span><span>），点击“下一步”之后，输入项目的基本信息，这些信息在之前讨论</span><span lang="EN-US">archetype</span><span>及在</span><span lang="EN-US">m2eclipse</span><span>中创建</span><span lang="EN-US">Maven</span><span>项目的时候都仔细解释过，不再详述，如图</span><span lang="EN-US">3-8</span><span>所示：</span></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><br><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/ad86aae9-6350-3f80-939f-02532892a5b7.jpg" height="354" width="650"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center">&nbsp;<span>图</span><span lang="EN-US">3-8 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中使用</span><span lang="EN-US">Archetype</span><span>创建</span><span lang="EN-US">Maven</span><span>项目</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>点击完成之后，一个新的</span><span lang="EN-US">Maven</span><span>项目就创建好了。</span></p>
<h2>
<span lang="EN-US">3.7.3 </span><span>运行</span><span lang="EN-US">mvn</span><span>命令</span>
</h2>
<p class="MsoNormal" style="text-indent: 21pt;"><span lang="EN-US">NetBeans</span><span>在默认情况下提供两种</span><span lang="EN-US">Maven</span><span>运行方式，点击菜单栏中的<strong>运行</strong>，我们可以看到<strong>生成项目</strong>和<strong>清理并生成项目</strong>两个选项，我们可以尝试“点击运行</span><span lang="EN-US">Maven</span><span>构建”，根据</span><span lang="EN-US">NetBeans</span><span>控制台的输出，我们就能发现它们实际上对应了</span><strong><span lang="EN-US">mvn install</span></strong><span>和</span><strong><span lang="EN-US">mvn clean install</span></strong><span>两个命令。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在实际开发过程中，我们往往不会满足于这两种简单的方式，比如，有时候我们只想执行项目的测试，而不需要打包，这时我们就希望能够执行</span><strong><span lang="EN-US">mvn clean test</span></strong><span>命令，所幸的是</span><span lang="EN-US">NetBeans Maven</span><span>插件完全支持自定义的</span><span lang="EN-US">mvn</span><span>命令配置。</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>在菜单栏中选择<strong>工具</strong>，接着选择<strong>选项</strong>，在对话框中，最上面一栏选择<strong>其他</strong>，下面选择</span><strong><span lang="EN-US">Maven</span></strong><span>标签栏，在这里我们可以对</span><span lang="EN-US">NetBeans Maven</span><span>插件进行全局的配置（还记得第</span><span lang="EN-US">2</span><span>章中我们如何配置</span><span lang="EN-US">NetBeans</span><span>使用外部</span><span lang="EN-US">Maven</span><span>么？）。现在，选择倒数第三行的<strong>编辑全局定制目标定义</strong></span><strong><span lang="EN-US">…</span></strong><span>，我们添加一个名为</span><strong><span lang="EN-US">Maven Test</span></strong><span>的操作，执行目标为</span><span lang="EN-US">clean test</span><span>，暂时不考虑其他配置选项，如图</span><span lang="EN-US">3-9</span><span>所示：</span></p>
<p class="MsoNormal" style="text-indent: 21pt;">&nbsp;</p>
<p style="text-align: center;"><img class="magplus" title="点击查看原始大小图片" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/287a8c73-1313-3b22-a960-e6d6cf5d16a6.jpg" height="467" width="650"></p>
<p class="MsoNormal" style="text-align: center; text-indent: 21pt;" align="center"><span>图</span><span lang="EN-US">3-9 </span><span>在</span><span lang="EN-US">NetBeans</span><span>中自定义</span><span lang="EN-US">mvn</span><span>命令</span></p>
<p class="MsoNormal" style="text-indent: 21pt;"><span>点击“缺省保存该配置”，在</span><span lang="EN-US">Maven</span><span>项目上右击，选择<strong>定制</strong>，就能看到刚才配置好的</span><span lang="EN-US">Maven</span><span>运行操作，选择</span><strong><span lang="EN-US">Maven Test</span></strong><span>之后，终端将执行</span><span lang="EN-US">mvn clean test</span><span>。值得一提的是，我们也可以在项目上右击，选择<strong>定制</strong>，再选择<strong>目标</strong></span><strong><span lang="EN-US">…</span></strong><span>再输入想要执行的</span><span lang="EN-US">Maven</span><span>目标（如</span><span lang="EN-US">clean package)</span><span>，点击确定之后</span><span lang="EN-US">NetBeans</span><span>就会执行相应的</span><span lang="EN-US">Maven</span><span>命令。这种方式十分便捷，但这是临时的，该配置不会被保存，也不会有历史记录。</span></p>
</div>
<h2>
        3.8 小结
        <a name="3354" href="http://www.iteye.com/wiki/hzbook/2872-Maven-in-action#top"><img alt="Top" src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/top.gif"></a>
        
      </h2>
<div class="content">
        <span style="font-size: medium;">本章以尽可能简单且详细的方式叙述了一个Hello 
World项目，重点解释了POM的基本内容、Maven项目的基本结构、以及构建项目基本的Maven命令。在此基础上，还介绍了如何使用
Archetype快速创建项目骨架。最后讲述的是如何在Eclipse和NetBeans中导入、创建及构建Maven项目。</span>
      </div>
</div></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/dcba1112/category/297228.html">Maven</a></div>
<div id="EntryTag">标签: <a href="http://www.cnblogs.com/dcba1112/tag/Maven/">Maven</a></div>
<div id="blog_post_info"><div id="green_channel">
绿色通道：
<a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(2033805,cb_blogId,1);green_channel_success(this,&#39;谢谢推荐！&#39;);">好文要顶</a>
<a id="green_channel_follow" onclick="c_follow();" href="javascript:void(0);">关注我</a>
<a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a><a id="green_channel_contact" href="http://space.cnblogs.com/msg/send/%e5%91%88%e9%a1%bc" target="_blank">与我联系</a>
<a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/icon_weibo_24.png" alt=""></a>
</div>
<div id="author_profile">
<div id="author_profile_info" class="author_profile_info">
<a href="http://home.cnblogs.com/u/dcba1112/" target="_blank"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/sample_face.gif" class="author_avatar" alt=""></a>
<div id="author_profile_detail" class="author_profile_info">
<a href="http://home.cnblogs.com/u/dcba1112/">呈顼</a><br>
<a href="http://home.cnblogs.com/u/dcba1112/followees">关注 - 2</a><br>
<a href="http://home.cnblogs.com/u/dcba1112/followers">粉丝 - 75</a>
</div>
</div>
<div class="clear"></div>
<div id="author_profile_honor"></div>
<div id="author_profile_follow">
    <a href="javascript:void(0);" onclick="c_follow();return false;">+加关注</a>
</div>
</div>
<div id="div_digg">										
    <div class="diggit" onclick="votePost(2033805,&#39;Digg&#39;)">
        <span class="diggnum" id="digg_count">22</span>
    </div>
	<div class="buryit" onclick="votePost(2033805,&#39;Bury&#39;)"> 
		<span class="burynum" id="bury_count">0</span>
	</div>
	<div class="clear"></div>	
	<div class="diggword" id="digg_tips">
    (请您对文章做出评价)
    </div>	
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033798.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033798.html" title="发布于2011-05-01 11:16">基于REST架构的Web Service设计</a><br><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033808.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033808.html" title="发布于2011-05-01 11:31">REST Web Service开发实践--Jersey,Google Protocol Buffer, Tomcat结合样例</a><br></div>
</div>


		<p class="postfoot">
			posted on <span id="post-date">2011-05-01 11:29</span> <a href="http://www.cnblogs.com/dcba1112/">呈顼</a> 阅读(<span id="post_view_count">142617</span>) 评论(<span id="post_comment_count">22</span>)  <a href="http://i.cnblogs.com/EditPosts.aspx?postid=2033805" rel="nofollow">编辑</a> <a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#" onclick="AddToWz(2033805);return false;">收藏</a>
		</p>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=77052,cb_entryId=2033805,cb_blogApp=currentBlogApp,cb_blogUserGuid='e1ec3e81-b184-df11-ba8f-001cf0cd104b',cb_entryCreatedDate='2011/5/1 11:29:00';loadViewCount(cb_entryId);</script>
	
	<a name="!comments"></a><div id="blog-comments-placeholder"><div id="comments_pager_top"></div>
<a name="评论"></a>
<div id="comments">
<h3>评论</h3>
	
	
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2145479" class="layer">#1楼</a><a name="2145479" id="comment_anchor_2145479"></a>
					<span>
						 <span class="comment_date">2011-07-07 17:07</span>
					</span>
				<a id="a_comment_author_2145479" href="http://home.cnblogs.com/u/162757/" target="_blank">风树</a> <a href="http://msg.cnblogs.com/msg/send/%e9%a3%8e%e6%a0%91" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2145479" class="blog_comment_body">很棒，很多混乱的概念看完一下全清楚了</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2145479,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2145479,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2312189" class="layer">#2楼</a><a name="2312189" id="comment_anchor_2312189"></a>
					<span>
						 <span class="comment_date">2012-02-20 00:50</span>
					</span>
				<a id="a_comment_author_2312189" href="http://home.cnblogs.com/u/377053/" target="_blank">edhn</a> <a href="http://msg.cnblogs.com/msg/send/edhn" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2312189" class="blog_comment_body">看完此文我去买了一本《maven实战》</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2312189,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2312189,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2364413" class="layer">#3楼</a><a name="2364413" id="comment_anchor_2364413"></a>
					<span>
						 <span class="comment_date">2012-04-26 11:30</span>
					</span>
				<a id="a_comment_author_2364413" href="http://home.cnblogs.com/u/400537/" target="_blank">fum</a> <a href="http://msg.cnblogs.com/msg/send/fum" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2364413" class="blog_comment_body">very good</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2364413,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2364413,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2365053" class="layer">#4楼</a><a name="2365053" id="comment_anchor_2365053"></a>
					<span>
						 <span class="comment_date">2012-04-27 09:39</span>
					</span>
				<a id="a_comment_author_2365053" href="http://www.cnblogs.com/AKMFAN/" target="_blank">蓝桥书生</a> <a href="http://msg.cnblogs.com/msg/send/%e8%93%9d%e6%a1%a5%e4%b9%a6%e7%94%9f" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2365053" class="blog_comment_body">写得真好，图片不显示了</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2365053,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2365053,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_2365053_avatar" style="display:none;">http://pic.cnitblog.com/face/303094/20131122192616.png</span>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2466623" class="layer">#5楼</a><a name="2466623" id="comment_anchor_2466623"></a>
					<span>
						 <span class="comment_date">2012-09-07 13:41</span>
					</span>
				<a id="a_comment_author_2466623" href="http://www.cnblogs.com/yechuxin/" target="_blank">叶楚鑫</a> <a href="http://msg.cnblogs.com/msg/send/%e5%8f%b6%e6%a5%9a%e9%91%ab" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2466623" class="blog_comment_body">非常感谢，很有用。</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2466623,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2466623,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2511516" class="layer">#6楼</a><a name="2511516" id="comment_anchor_2511516"></a>
					<span>
						 <span class="comment_date">2012-10-25 11:15</span>
					</span>
				<a id="a_comment_author_2511516" href="http://home.cnblogs.com/u/460437/" target="_blank">承诺风光好</a> <a href="http://msg.cnblogs.com/msg/send/%e6%89%bf%e8%af%ba%e9%a3%8e%e5%85%89%e5%a5%bd" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2511516" class="blog_comment_body">写的不错就是图片显示不出来，有图片看着就更好了</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2511516,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2511516,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2572991" class="layer">#7楼</a><a name="2572991" id="comment_anchor_2572991"></a>
					<span>
						 <span class="comment_date">2012-12-08 10:18</span>
					</span>
				<a id="a_comment_author_2572991" href="http://www.cnblogs.com/diyunpeng/" target="_blank">规格严格-功夫到家</a> <a href="http://msg.cnblogs.com/msg/send/%e8%a7%84%e6%a0%bc%e4%b8%a5%e6%a0%bc-%e5%8a%9f%e5%a4%ab%e5%88%b0%e5%ae%b6" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2572991" class="blog_comment_body">链接地址不对，去哪里了？</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2572991,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2572991,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2603575" class="layer">#8楼</a><a name="2603575" id="comment_anchor_2603575"></a>
					<span>
						 <span class="comment_date">2013-01-19 22:49</span>
					</span>
				<a id="a_comment_author_2603575" href="http://www.cnblogs.com/zkool/" target="_blank">zkool</a> <a href="http://msg.cnblogs.com/msg/send/zkool" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2603575" class="blog_comment_body">太给力了</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2603575,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2603575,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_2603575_avatar" style="display:none;">http://pic.cnitblog.com/face/u441985.jpg?id=28203226</span>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2674561" class="layer">#9楼</a><a name="2674561" id="comment_anchor_2674561"></a>
					<span>
						 <span class="comment_date">2013-05-07 11:01</span>
					</span>
				<a id="a_comment_author_2674561" href="http://home.cnblogs.com/u/462521/" target="_blank">curis</a> <a href="http://msg.cnblogs.com/msg/send/curis" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2674561" class="blog_comment_body">讲的非常透，我是今天才开始用maven，基本理解了</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2674561,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2674561,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2686440" class="layer">#10楼</a><a name="2686440" id="comment_anchor_2686440"></a>
					<span>
						 <span class="comment_date">2013-05-21 21:28</span>
					</span>
				<a id="a_comment_author_2686440" href="http://www.cnblogs.com/longbai/" target="_blank">kute</a> <a href="http://msg.cnblogs.com/msg/send/kute" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2686440" class="blog_comment_body">小试牛刀</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2686440,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2686440,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2689395" class="layer">#11楼</a><a name="2689395" id="comment_anchor_2689395"></a>
					<span>
						 <span class="comment_date">2013-05-24 22:57</span>
					</span>
				<a id="a_comment_author_2689395" href="http://home.cnblogs.com/u/532307/" target="_blank">gezi_mail</a> <a href="http://msg.cnblogs.com/msg/send/gezi_mail" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2689395" class="blog_comment_body">maven确实很简单，但是，每次都要编写pom.xml也是很麻烦，比如我要创建一个struts项目，那我就要写很多的依赖（dependency），这些依赖的名字我还不清楚，很是麻烦，有没有简单快捷的方法，以创建struts项目为例，struts官网有pom.xml文件提供吗？或者告诉我一个最快速的方法</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2689395,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2689395,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2711174" class="layer">#12楼</a><a name="2711174" id="comment_anchor_2711174"></a>
					<span>
						 <span class="comment_date">2013-06-22 16:10</span>
					</span>
				<a id="a_comment_author_2711174" href="http://www.cnblogs.com/xuqiang/" target="_blank">qiang.xu</a> <a href="http://msg.cnblogs.com/msg/send/qiang.xu" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2711174" class="blog_comment_body">楼主 苏州的软件开发环境咋样？</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2711174,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2711174,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_2711174_avatar" style="display:none;">http://pic.cnitblog.com/face/u117417.jpg?id=29185839</span>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2721984" class="layer">#13楼</a><a name="2721984" id="comment_anchor_2721984"></a>
					<span>
						 <span class="comment_date">2013-07-08 01:57</span>
					</span>
				<a id="a_comment_author_2721984" href="http://www.cnblogs.com/osmondy/" target="_blank">Osmondy</a> <a href="http://msg.cnblogs.com/msg/send/Osmondy" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2721984" class="blog_comment_body">mark</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2721984,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2721984,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_2721984_avatar" style="display:none;">http://pic.cnitblog.com/face/457801/20130816133657.png</span>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2899148" class="layer">#14楼</a><a name="2899148" id="comment_anchor_2899148"></a>
					<span>
						 <span class="comment_date">2014-03-19 21:05</span>
					</span>
				<a id="a_comment_author_2899148" href="http://www.cnblogs.com/kennydong/" target="_blank">KennyDong</a> <a href="http://msg.cnblogs.com/msg/send/KennyDong" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2899148" class="blog_comment_body">我忍不住要使劲赞一下作者了！说的太详细了，加上配图，简直完美了！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2899148,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2899148,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2908428" class="layer">#15楼</a><a name="2908428" id="comment_anchor_2908428"></a>
					<span>
						 <span class="comment_date">2014-03-31 22:35</span>
					</span>
				<a id="a_comment_author_2908428" href="http://home.cnblogs.com/u/540914/" target="_blank">靜夜思</a> <a href="http://msg.cnblogs.com/msg/send/%e9%9d%9c%e5%a4%9c%e6%80%9d" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2908428" class="blog_comment_body">给力 给力 太给力 好！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2908428,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2908428,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2908500" class="layer">#16楼</a><a name="2908500" id="comment_anchor_2908500"></a>
					<span>
						 <span class="comment_date">2014-04-01 01:02</span>
					</span>
				<a id="a_comment_author_2908500" href="http://home.cnblogs.com/u/494080/" target="_blank">zhaokun880910</a> <a href="http://msg.cnblogs.com/msg/send/zhaokun880910" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2908500" class="blog_comment_body">作者一看就是个精细的人，赞一个，我也是一个面面俱到的人，好东西。</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2908500,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2908500,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2951745" class="layer">#17楼</a><a name="2951745" id="comment_anchor_2951745"></a>
					<span>
						 <span class="comment_date">2014-05-28 11:53</span>
					</span>
				<a id="a_comment_author_2951745" href="http://www.cnblogs.com/dandaoyi/" target="_blank">仗剑</a> <a href="http://msg.cnblogs.com/msg/send/%e4%bb%97%e5%89%91" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2951745" class="blog_comment_body">赞。通俗易懂。</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2951745,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2951745,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#2962439" class="layer">#18楼</a><a name="2962439" id="comment_anchor_2962439"></a>
					<span>
						 <span class="comment_date">2014-06-11 21:05</span>
					</span>
				<a id="a_comment_author_2962439" href="http://www.cnblogs.com/zhu9jie/" target="_blank">猪九戒</a> <a href="http://msg.cnblogs.com/msg/send/%e7%8c%aa%e4%b9%9d%e6%88%92" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_2962439" class="blog_comment_body">值得所有学习MAVEN的人去读！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(2962439,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(2962439,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3003020" class="layer">#19楼</a><a name="3003020" id="comment_anchor_3003020"></a>
					<span>
						 <span class="comment_date">2014-08-07 23:20</span>
					</span>
				<a id="a_comment_author_3003020" href="http://www.cnblogs.com/chrischennx/" target="_blank">苍枫露雨</a> <a href="http://msg.cnblogs.com/msg/send/%e8%8b%8d%e6%9e%ab%e9%9c%b2%e9%9b%a8" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_3003020" class="blog_comment_body">多谢啊，看了一下就明白了好多，</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3003020,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3003020,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_3003020_avatar" style="display:none;">http://pic.cnitblog.com/face/572732/20140924012152.png</span>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3015481" class="layer">#20楼</a><a name="3015481" id="comment_anchor_3015481"></a>
					<span>
						 <span class="comment_date">2014-08-24 10:31</span>
					</span>
				<a id="a_comment_author_3015481" href="http://home.cnblogs.com/u/186557/" target="_blank">john1810</a> <a href="http://msg.cnblogs.com/msg/send/john1810" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_3015481" class="blog_comment_body">太棒了，几年没有碰java了，这几天一看相关的资料，如找回初恋的那般感觉。本文maven讲述得十分贴切。赞一个</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3015481,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3015481,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3050261" class="layer">#21楼</a><a name="3050261" id="comment_anchor_3050261"></a>
					<span>
						 <span class="comment_date">2014-10-24 10:41</span>
					</span>
				<a id="a_comment_author_3050261" href="http://www.cnblogs.com/liangzi-java/" target="_blank">不良亮子</a> <a href="http://msg.cnblogs.com/msg/send/%e4%b8%8d%e8%89%af%e4%ba%ae%e5%ad%90" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_3050261" class="blog_comment_body">受教了</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3050261,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3050261,&#39;Bury&#39;,this)">反对(0)</a></div>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
			<h4>
				<a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3062820" class="layer">#22楼</a><a name="3062820" id="comment_anchor_3062820"></a><span id="comment-maxId" style="display:none;">3062820</span><span id="comment-maxDate" style="display:none;">2014/11/12 23:52:10</span>
					<span>
						 <span class="comment_date">2014-11-12 23:52</span>
					</span>
				<a id="a_comment_author_3062820" href="http://www.cnblogs.com/strive-for-freedom/" target="_blank">太极芋头</a> <a href="http://msg.cnblogs.com/msg/send/%e5%a4%aa%e6%9e%81%e8%8a%8b%e5%a4%b4" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</h4>
			<p>
				</p><div id="comment_body_3062820" class="blog_comment_body">写的太好了，大爱楼主</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3062820,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3062820,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_3062820_avatar" style="display:none;">http://pic.cnitblog.com/face/u471534.png?id=22155820</span>
				&nbsp;&nbsp;<span class="comment_actions"></span>
			<p></p>
		
</div><div id="comments_pager_bottom"></div></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#" onclick="return RefreshPage();">刷新页面</a><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#top">返回顶部</a></div>
<div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login(&#39;commentform&#39;);">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type="text/javascript">
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
</script>
<script type="text/javascript">
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1410860226396-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id="div-gpt-ad-1346480159711-0" style="width:300px; height:250px;">
    <script type="text/javascript">
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/512094/" target="_blank">又一原Xbox One开发团队主要成员离开微软</a><br> ·  <a href="http://news.cnblogs.com/n/512093/" target="_blank">美国大学研究人员找到恢复记忆的方法</a><br> ·  <a href="http://news.cnblogs.com/n/512092/" target="_blank">苹果悄然修改欧盟的退款条例：14天无条件退款</a><br> ·  <a href="http://news.cnblogs.com/n/512091/" target="_blank">苹果iPhone圣诞节新机激活量占比达51.3%</a><br> ·  <a href="http://news.cnblogs.com/n/512090/" target="_blank">消息称微软开发全新浏览器 并非IE12</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="google_ad_c2" class="c_ad_block">
<div id="div-gpt-ad-1410860226396-0" style="width:468px; height:60px;">
<script type="text/javascript">
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1410860226396-0'); });
    } else {
        $('#div-gpt-ad-1346480159711-0').hide();
    }
} catch (e) { }
</script>
</div>
</div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/511888/" target="_blank">动效设计的物理法则</a><br> ·  <a href="http://kb.cnblogs.com/page/511895/" target="_blank">证券创新之翼——阿里金融云</a><br> ·  <a href="http://kb.cnblogs.com/page/511716/" target="_blank">手机淘宝构架演化实践</a><br> ·  <a href="http://kb.cnblogs.com/page/511799/" target="_blank">Azure的NoSQL技术</a><br> ·  <a href="http://kb.cnblogs.com/page/511691/" target="_blank">稳定婚姻问题和Gale-Shapley算法</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

</div>
<div id="rightmenu">
	
		<div id="blog-calendar" style=""><table id="blogCalendar" class="Cal" cellspacing="0" cellpadding="0" title="日历">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2011/04/01&#39;);return false;">&lt;</a></td><td align="center">2011年5月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2011/06/01&#39;);return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" align="center" abbr="日" scope="col">日</th><th class="CalDayHeader" align="center" abbr="一" scope="col">一</th><th class="CalDayHeader" align="center" abbr="二" scope="col">二</th><th class="CalDayHeader" align="center" abbr="三" scope="col">三</th><th class="CalDayHeader" align="center" abbr="四" scope="col">四</th><th class="CalDayHeader" align="center" abbr="五" scope="col">五</th><th class="CalDayHeader" align="center" abbr="六" scope="col">六</th></tr><tr><td class="CalOtherMonthDay" align="center">24</td><td class="CalOtherMonthDay" align="center">25</td><td class="CalOtherMonthDay" align="center">26</td><td class="CalOtherMonthDay" align="center">27</td><td class="CalOtherMonthDay" align="center">28</td><td class="CalOtherMonthDay" align="center">29</td><td class="CalOtherMonthDay" align="center">30</td></tr><tr><td class="CalWeekendDay" align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01.html"><u>1</u></a></td><td align="center">2</td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/03.html"><u>3</u></a></td><td align="center">4</td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/05.html"><u>5</u></a></td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/06.html"><u>6</u></a></td><td class="CalWeekendDay" align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/07.html"><u>7</u></a></td></tr><tr><td class="CalWeekendDay" align="center">8</td><td align="center">9</td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/10.html"><u>10</u></a></td><td align="center">11</td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/12.html"><u>12</u></a></td><td align="center">13</td><td class="CalWeekendDay" align="center">14</td></tr><tr><td class="CalWeekendDay" align="center">15</td><td align="center">16</td><td align="center">17</td><td align="center">18</td><td align="center">19</td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/20.html"><u>20</u></a></td><td class="CalWeekendDay" align="center">21</td></tr><tr><td class="CalWeekendDay" align="center">22</td><td align="center">23</td><td align="center">24</td><td align="center">25</td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/26.html"><u>26</u></a></td><td align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/27.html"><u>27</u></a></td><td class="CalWeekendDay" align="center"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/28.html"><u>28</u></a></td></tr><tr><td class="CalWeekendDay" align="center">29</td><td align="center">30</td><td align="center">31</td><td class="CalOtherMonthDay" align="center">1</td><td class="CalOtherMonthDay" align="center">2</td><td class="CalOtherMonthDay" align="center">3</td><td class="CalOtherMonthDay" align="center">4</td></tr>
</tbody></table></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
		
<h3>导航</h3>
<ul>
			<li><a id="MyLinks1_HomeLink" href="http://www.cnblogs.com/">博客园</a></li>
			<li><a id="MyLinks1_MyHomeLink" href="http://www.cnblogs.com/dcba1112/">首页</a></li>
			<li><a id="MyLinks1_NewPostLink" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
			<li><a id="MyLinks1_ContactLink" accesskey="9" rel="nofollow" href="http://space.cnblogs.com/msg/send/%e5%91%88%e9%a1%bc">联系</a></li>
			<li><a id="MyLinks1_Syndication" href="http://www.cnblogs.com/dcba1112/rss">订阅</a><a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/dcba1112/rss"><img src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/xml.gif" alt="订阅"></a>
			</li><li><a id="MyLinks1_Admin" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		
<h3>统计</h3>
	<ul>
		<li>随笔 - 54
		</li><li>文章 - 0
		</li><li>评论 - 87
		</li><li>引用 - 0
	</li>
</ul>
		
<h3>公告</h3>
	<div id="blog-news"><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/dcba1112/">呈顼</a><br>园龄：<a href="http://home.cnblogs.com/u/dcba1112/" title="入园时间：2010-07-01">4年6个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/dcba1112/followers/">75</a><br>关注：<a href="http://home.cnblogs.com/u/dcba1112/followees/">2</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="cnblogs.UserManager.FollowBlogger(&#39;e1ec3e81-b184-df11-ba8f-001cf0cd104b&#39;)">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>

		<div id="blog-sidecolumn">
<div class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="widget_my_zzk" class="div_my_zzk"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk">&nbsp;<input onclick="zzk_go()" type="button" value="找找看" id="btnZzk" class="btn_my_zzk"></div>
<div id="widget_my_google" class="div_my_zzk"><input type="text" name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk">&nbsp;<input onclick="google_go()" type="button" value="谷歌搜索" class="btn_my_zzk"></div>
</div>


<h3 class="catListTitle">常用链接</h3>
<ul>
<li><a href="http://www.cnblogs.com/dcba1112/p/" title="我的博客的随笔列表">我的随笔</a></li><li><a href="http://www.cnblogs.com/dcba1112/MyComments.html" title="我发表过的评论列表">我的评论</a></li><li><a href="http://www.cnblogs.com/dcba1112/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li><li><a href="http://www.cnblogs.com/dcba1112/RecentComments.html" title="我的博客的评论列表">最新评论</a></li><li><a href="http://www.cnblogs.com/dcba1112/tag/" title="我的博客的标签列表">我的标签</a></li>
</ul>
<div id="itemListLin_con" style="display:none;">

</div>
<h3 class="catListTitle">我的标签</h3>
<div id="MyTag">
<ul>
<li><a href="http://www.cnblogs.com/dcba1112/tag/C%23/">C#</a>(5)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/remoting/">remoting</a>(5)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/JAVA/">JAVA</a>(4)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/jstl/">jstl</a>(3)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</a>(3)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/hashmap/">hashmap</a>(2)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/MarshalByRefObject/">MarshalByRefObject</a>(2)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/%E9%81%8D%E5%8E%86/">遍历</a>(2)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/SQL2005/">SQL2005</a>(2)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/Protocol%20Buffer/">Protocol Buffer</a>(2)</li><li><a href="http://www.cnblogs.com/dcba1112/tag/">更多</a></li>
</ul>
</div>
		<h3>随笔分类<span style="font-size:11px;font-weight:normal">(70)</span></h3>
		
				<ul>
			
				<li><a id="CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/dcba1112/category/265127.html">C#(18)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/dcba1112/category/302166.html">java(7)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_2" href="http://www.cnblogs.com/dcba1112/category/297228.html">Maven(5)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_3" href="http://www.cnblogs.com/dcba1112/category/265128.html">PB(1)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_4" href="http://www.cnblogs.com/dcba1112/category/297241.html">Protocol Buffer(3)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_5" href="http://www.cnblogs.com/dcba1112/category/297232.html">web技术(22)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_6" href="http://www.cnblogs.com/dcba1112/category/297231.html">收藏页(11)</a> </li>
			
				<li><a id="CatList_LinkList_0_Link_7" href="http://www.cnblogs.com/dcba1112/category/265126.html">数据库(3)</a> </li>
			
				</ul>
			
	
		<h3>随笔档案<span style="font-size:11px;font-weight:normal">(54)</span></h3>
		
				<ul>
			
				<li><a id="CatList_LinkList_1_Link_0" href="http://www.cnblogs.com/dcba1112/archive/2011/08.html">2011年8月 (6)</a> </li>
			
				<li><a id="CatList_LinkList_1_Link_1" href="http://www.cnblogs.com/dcba1112/archive/2011/07.html">2011年7月 (9)</a> </li>
			
				<li><a id="CatList_LinkList_1_Link_2" href="http://www.cnblogs.com/dcba1112/archive/2011/06.html">2011年6月 (4)</a> </li>
			
				<li><a id="CatList_LinkList_1_Link_3" href="http://www.cnblogs.com/dcba1112/archive/2011/05.html">2011年5月 (33)</a> </li>
			
				<li><a id="CatList_LinkList_1_Link_4" href="http://www.cnblogs.com/dcba1112/archive/2010/10.html">2010年10月 (2)</a> </li>
			
				</ul>
			
	<div id="recent_comments_wrap">
<h3 class="catListTitle">最新评论</h3>
<div class="RecentComment" id="RecentComments">
	<div id="RecentCommentsBlock"><ul>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033788.html#3072279">1. Re:Maven和Jersey Framework开发REST风格Web Service</a></li>
    <li class="recent_comment_body">那个post方法怎么测试呢？<br>怎么使用那个testpost.xml文件？</li>
    <li class="recent_comment_author">--柳qing</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/dcba1112/archive/2011/08/01/2124092.html#3065799">2. Re:Tomcat负载均衡原理详解及配置(Apache2.2.19+Tomcat7.0.12)</a></li>
    <li class="recent_comment_body">楼主 你好 我按照你的1.2 mod_proxy_blancer方式配置时并没有找到LoadModule proxy_module modules/mod_proxy_blancer.so这一行而是我自己加上去的还有一个重点的是，我在配置文件最后加上你文章中写的那段之后,apache启动不了了。下面......</li>
    <li class="recent_comment_author">--榔行天下</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3062820">3. Re:Maven的安装、配置及使用入门</a></li>
    <li class="recent_comment_body">写的太好了，大爱楼主</li>
    <li class="recent_comment_author">--太极芋头</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3050261">4. Re:Maven的安装、配置及使用入门</a></li>
    <li class="recent_comment_body">受教了</li>
    <li class="recent_comment_author">--hello_liangzi</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033805.html#3015481">5. Re:Maven的安装、配置及使用入门</a></li>
    <li class="recent_comment_body">太棒了，几年没有碰java了，这几天一看相关的资料，如找回初恋的那般感觉。本文maven讲述得十分贴切。赞一个</li>
    <li class="recent_comment_author">--john1810</li>
</ul>
</div>
</div>
</div><div id="topview_posts_wrap">
<h3 class="catListTitle">阅读排行榜</h3>
<div class="RecentComment" id="TopViewPosts"> 
	<div id="TopViewPostsBlock"><ul><li><a href="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/Maven的安装、配置及使用入门 - 呈顼 - 博客园.htm">1. Maven的安装、配置及使用入门(142613)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/mave.html">2. Maven教程初级篇01: 简介(70515)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/26/2057551.html">3. HTML select option 详解(68143)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/08/01/2124092.html">4. Tomcat负载均衡原理详解及配置(Apache2.2.19+Tomcat7.0.12)(15996)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033781.html">5. Maven教程初级篇02：pom.xml配置初步(12615)</a></li></ul></div>
</div>
</div><div id="topfeedback_posts_wrap">
<h3 class="catListTitle">评论排行榜</h3>
<div class="RecentComment" id="TopCommentsPosts">
	<div id="TopFeedbackPostsBlock"><ul><li><a href="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/Maven的安装、配置及使用入门 - 呈顼 - 博客园.htm">1. Maven的安装、配置及使用入门(22)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/08/01/2124066.html">2. Microsoft .Net Remoting系列专题之一:.Net Remoting基础篇(13)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/mave.html">3. Maven教程初级篇01: 简介(5)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/05/2037715.html">4. 使用Flash Cookie技术在客户端永久保存HTTP Cookie(5)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2034028.html">5. Android与PC,C#与Java 利用protobuf 进行无障碍通讯【Socket】(4)</a></li></ul></div>
</div></div><div id="topdigg_posts_wrap">
<h3 class="catListTitle">推荐排行榜</h3>
<div class="RecentComment">
	<div id="TopDiggPostsBlock"><ul><li><a href="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/Maven的安装、配置及使用入门 - 呈顼 - 博客园.htm">1. Maven的安装、配置及使用入门(22)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/mave.html">2. Maven教程初级篇01: 简介(15)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/01/2033781.html">3. Maven教程初级篇02：pom.xml配置初步(5)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/05/03/2035154.html">4. 资源下载(3)</a></li><li><a href="http://www.cnblogs.com/dcba1112/archive/2011/08/01/2124066.html">5. Microsoft .Net Remoting系列专题之一:.Net Remoting基础篇(3)</a></li></ul></div>
</div></div></div><script type="text/javascript">loadBlogSideColumn();</script><iframe src="./Maven的安装、配置及使用入门 - 呈顼 - 博客园_files/container.htm" style="visibility: hidden; display: none;"></iframe>
	
</div>			

<p id="footer">
	Powered by: 
	<br>
	
	<a id="Footer1_Hyperlink3" name="Hyperlink1" href="http://www.cnblogs.com/" style="font-family:Verdana;font-size:12px;">博客园</a>
	<br>
	Copyright © 呈顼
</p>
	



</body></html>