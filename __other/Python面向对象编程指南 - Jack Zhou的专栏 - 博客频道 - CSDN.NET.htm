<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0055)http://blog.csdn.net/zhoudaxia/article/details/23341261 -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/nick"></script>    
    <script type="text/javascript" async="" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ga.js"></script><script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/tracking.js" charset="utf-8"></script><style type="text/css"></style>  

    <script type="text/javascript">
        var protocol = window.location.protocol;
        document.write('<script type="text/javascript" src="' + protocol + '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></' + 'script>');
    </script><script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/repoAddr2.js"></script>


    <script id="allmobilize" charset="utf-8" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/allmobilize.min.js"></script><style type="text/css"></style>
 <meta http-equiv="Cache-Control" content="no-siteapp"><link rel="alternate" media="handheld" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#">

    <title>Python面向对象编程指南 - Jack Zhou的专栏
        - 博客频道 - CSDN.NET</title>
    
    <meta name="description" content="虽然Python是解释性语言，但是它是面向对象的，能够进行对象编程。下面就来了解一下如何在Python中进行对象编程。一.如何定义一个类　　在进行python面向对象编程之前，先来了解几个术语：类，类对象，实例对象，属性，函数和方法。　　类是对现实世界中一些事物的封装，定义一个类可以采用下面的方式来定义：">
    <script src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/jquery.js" type="text/javascript"></script>
    <script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
        <!--new top-->
       
        <link rel="stylesheet" href="http://static.csdn.net/public/common/toolbar/css/index.css">
        <!--new top-->

    <link rel="Stylesheet" type="text/css" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/style.css">
    <link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://blog.csdn.net/zhoudaxia/rss/list">
    <link rel="shortcut icon" href="http://csdnimg.cn/public/favicon.ico">
    <link type="text/css" rel="stylesheet" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/default.css">
 


<script src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/share.js"></script><link rel="stylesheet" type="text/css" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/job_reco.css"><link href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/bdsstyle.css" rel="stylesheet" type="text/css"><script type="text/javascript" charset="utf-8" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/main.js"></script><link rel="stylesheet" type="text/css" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/style(1).css"><script charset="utf-8" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/sm.min.js" async=""></script><link rel="stylesheet" type="text/css" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/style(2).css"><script src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/logger.js"></script></head>
<body><iframe frameborder="0" style="display: none;"></iframe>
    
   
      <!--new top-->
    <script id="toolbar-tpl-scriptId" fixed="true" prod="blog" skin="black" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/html.js" type="text/javascript"></script><div class="csdn-toolbar csdn-toolbar-skin-black ">        <div class="container row center-block ">          <div class="col-md-3 pull-left logo clearfix"><a href="http://www.csdn.net/?ref=toolbar" title="CSDN首页" target="_blank" class="icon"></a><a title="频道首页" href="http://blog.csdn.net/?ref=toolbar_logo" target="_blank" class="img blog-icon"></a></div>          <div class="pull-right login-wrap ">            <ul class="btns">              <li class="loginlink"><a href="https://passport.csdn.net/account/login?ref=toolbar" target="_top">登录&nbsp;</a>|<a target="_top" href="https://passport.csdn.net/account/register?ref=toolbar">&nbsp;注册</a></li>              <li class="search">                <div class="icon on-search-icon">                  <div class="wrap">                    <div class="curr-icon-wrap">                      <div class="curr-icon"></div>                    </div>                    <form action="http://so.csdn.net/search" method="get" target="_blank">                      <input type="hidden" value="toolbar" name="ref" accesskey="2">                      <div class="border">                        <input placeholder="搜索" type="text" value="" name="q" accesskey="2"><span class="icon-enter-sm"></span>                      </div>                    </form>                  </div>                </div>              </li>              <li class="favor">                <div class="icon on-favor-icon">                  <div class="wrap">                    <div class="curr-icon-wrap">                      <div class="curr-icon"></div>                    </div>                    <div style="display:none;" class="favor-success"><span class="msg">收藏成功</span>                      <div class="btns"><span class="btn btn-primary ok">确定</span></div>                    </div>                    <div style="display:none;" class="favor-failed"><span class="icon-danger-lg"></span><span class="msg">收藏失败，请重新收藏</span>                      <div class="btns"><span class="btn btn-primary ok">确定</span></div>                    </div>                    <form role="form" class="form-horizontal favor-form">                      <div class="form-group">                        <div class="clearfix">                          <label for="input-title" class="col-sm-2 control-label">标题</label>                          <div class="col-sm-10">                            <input id="inputTitle" type="text" placeholder="" class="title form-control">                          </div>                        </div>                        <div class="alert alert-danger"><strong></strong>标题不能为空</div>                      </div>                      <div class="form-group">                        <label for="input-url" class="col-sm-2 control-label">网址</label>                        <div class="col-sm-10">                          <input id="input-url" type="text" placeholder="" class="url form-control">                        </div>                      </div>                      <div class="form-group">                        <label for="input-tag" class="col-sm-2 tag control-label">标签</label>                        <div class="col-sm-10">                          <input id="input-tag" type="text" class="form-control tag">                        </div>                      </div>                      <div class="form-group">                        <label for="input-description" class="description col-sm-2 control-label">摘要</label>                        <div class="col-sm-10">                          <textarea id="input-description" class="form-control description"></textarea>                        </div>                      </div>                      <div class="form-group">                        <div class="col-sm-offset-2 col-sm-10 ft">                          <div class="col-sm-4 pull-left">                            <div class="checkbox">                              <label>                                <input type="checkbox" name="share" checked="checked" class="share">公开                              </label>                            </div>                          </div>                          <div class="col-sm-8 pull-right favor-btns">                            <button type="button" class="cancel btn btn-default">取消</button>                            <button type="submit" class="submit btn btn-primary">收藏</button>                          </div>                        </div>                      </div>                    </form>                  </div>                </div>              </li>              <li class="notify">                <div style="display:none" class="number"></div>                <div style="display:none" class="icon-hasnotes-sm"></div>                <div id="header_notice_num"></div>                <div class="icon on-notify-icon">                  <div class="wrap">                    <div class="curr-icon-wrap">                      <div class="curr-icon"></div>                    </div>                    <div id="note1" class="csdn_note" style="left: -212px; top: 25px;">                      <div class="box"><div class="notifications notice_list_con curr">  <div class="menu_title">    <span class="title"><a href="http://msg.csdn.net/letters" target="_blank" class="read_all">查看所有私信</a><a href="http://msg.csdn.net/" target="_blank" class="go_all">查看所有通知</a></span>  </div>  <div class="loading"></div>  <div class="empty">暂没有新通知</div>  <div class="notice_content"></div></div><div class="notifications detail_con" style="display: none">  <div class="menu_title">    <span class="title">      <a class="go_back" href="javascript:void 0;">返回通知列表</a>      <a class="notifications_page_none nextnote" href="javascript:void 0;">下一条</a>      <a class="notifications_page prvnote" href="javascript:void 0;">上一条</a>    </span>  </div>  <div class="notice_content"></div></div><div class="error"></div></div>                    <iframe src="about:block" frameborder="0" allowtransparency="true" style="z-index:-1;position:absolute;top:0;left:0;width:100%;height:100%;background:transparent"></iframe></div>                  </div>                </div>              </li>              <li class="ugc">                <div class="icon on-ugc-icon">                  <div class="wrap clearfix">                    <div class="curr-icon-wrap">                      <div class="curr-icon"></div>                    </div>                    <dl>                      <dt><a href="http://geek.csdn.net/news/expert?ref=toolbar" target="_blank" class="p-news clearfix"><em class="icon"></em><span>分享资讯</span></a></dt>                      <dt><a href="http://share.csdn.net/slides/new?ref=toolbar" target="_blank" class="p-doc clearfix"><em class="icon"></em><span>传PPT/文档</span></a></dt>                      <dt><a href="http://bbs.csdn.net/topics/new?ref=toolbar" target="_blank" class="p-ask clearfix"><em class="icon"></em><span>提问题</span></a></dt>                      <dt><a href="http://write.blog.csdn.net/postedit?ref=toolbar" target="_blank" class="p-blog clearfix"><em class="icon"></em><span>写博客</span></a></dt>                      <dt><a href="http://u.download.csdn.net/upload?ref=toolbar" target="_blank" class="p-src clearfix"><em class="icon"></em><span>传资源</span></a></dt>                      <dt><a href="https://code.csdn.net/projects/new?ref=toolbar" target="_blank" class="c-obj clearfix"><em class="icon"></em><span>创建项目</span></a></dt>                      <dt><a href="https://code.csdn.net/snippets/new?ref=toolbar" target="_blank" class="c-code clearfix"><em class="icon"></em><span>创建代码片</span></a></dt>                    </dl>                  </div>                </div>              </li>              <li class="profile">                <div class="icon on-profile-icon"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/2_datayes.jpg" class="curr-icon-img">                  <div class="wrap clearfix">                    <div class="curr-icon-wrap">                      <div class="curr-icon"></div>                    </div>                    <div class="bd">                      <dl class="clearfix">                        <dt class="pull-left img"><a target="_blank" href="http://my.csdn.net/?ref=toolbar" class="avatar"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/2_datayes.jpg"></a></dt>                        <dd class="info"><a target="_blank" href="http://my.csdn.net/?ref=toolbar" class="nickname">datayes</a><span class="dec"><a class="fill-dec" href="http://my.csdn.net/" target="_blank">编辑自我介绍，让更多人了解你<span class="write-icon"></span></a></span></dd>                      </dl>                    </div>                    <div class="ft clearfix"><a target="_blank" href="http://my.csdn.net/my/account/changepwd?ref=toolbar" class="pull-left"><span class="icon-cog"></span>帐号设置</a><a href="https://passport.csdn.net/account/logout?ref=toolbar" target="_top" class="pull-left" style="margin-left:132px; width:18px; height:27px; white-space:nowrap; overflow:hidden;"><span class="icon-signout"></span><span class="out">退出</span></a></div>                  </div>                </div>              </li>              <li class="apps">                <div id="chasnew123" class="hasnew"></div>                <div id="cappsarea123" class="icon on-apps-icon">                  <div class="wrap clearfix">                    <div class="curr-icon-wrap">                      <div class="curr-icon"></div>                    </div>                  <div class="detail">                    <dl>                      <dt>                        <h5>社区</h5>                      </dt>                      <dd> <a href="http://blog.csdn.net/?ref=toolbar" target="_blank">博客</a></dd>                      <dd> <a href="http://bbs.csdn.net/?ref=toolbar" target="_blank">论坛</a></dd>                      <dd> <a href="http://download.csdn.net/?ref=toolbar" target="_blank">下载</a></dd>                      <dd><a href="http://ask.csdn.net/?ref=toolbar" target="_blank">技术问答</a></dd>                      <dd><a href="http://geek.csdn.net/?ref=toolbar" target="_blank">极客头条</a></dd>                      <dd> <a href="http://hero.csdn.net/?ref=toolbar" target="_blank">英雄会</a></dd>                    </dl>                  </div>                  <div class="detail">                    <dl>                      <dt>                        <h5>服务</h5>                      </dt>                      <dd> <a href="http://job.csdn.net/?ref=toolbar" target="_blank">招聘<img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/new.gif" style="margin-top: -26px;"></a></dd>                      <dd> <a href="http://edu.csdn.net/?ref=toolbar" target="_blank">学院<img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/new.gif" style="margin-top: -26px;"></a></dd>                      <dd> <a href="https://code.csdn.net/?ref=toolbar" target="_blank">CODE</a></dd>                      <dd> <a href="http://huiyi.csdn.net/?ref=toolbar" target="_blank">活动</a></dd>                      <dd> <a href="http://www.csto.com/?ref=toolbar" target="_blank">CSTO</a></dd>                      <dd> <a href="http://mall.csdn.net/?ref=toolbar" target="_blank">C币兑换<img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/new.gif" style="margin-top: -26px;"></a></dd>                    </dl>                  </div>                  <div class="detail last">                    <dl>                      <dt>                        <h5>俱乐部</h5>                      </dt>                      <dd> <a href="http://cto.csdn.net/?ref=toolbar" target="_blank">CTO俱乐部</a></dd>                      <dd> <a href="http://student.csdn.net/?ref=toolbar" target="_blank">高校俱乐部</a></dd>                    </dl>                  </div>                </div>              </div>            </li>            </ul>          </div>        </div>    </div>
     <!--new top-->
    <div id="container">
        <div id="header">
    <div class="header">
        <div id="blog_title">
            <h2>
                <a href="http://blog.csdn.net/zhoudaxia">Jack Zhou的专栏</a></h2>
            <h3>一切都将灰飞烟灭，我们要做的就是尽情燃烧！</h3>
            <div class="clear">
            </div>
        </div>
        <div class="clear">
        </div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg">
    </div>
    <div class="navigator">
        <ul>
                <li id="btnContents"><a href="http://blog.csdn.net/zhoudaxia?viewmode=contents"><span onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_mulu&#39;])">
                    <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_list.gif">目录视图</span></a></li>
                <li id="btnView"><a href="http://blog.csdn.net/zhoudaxia?viewmode=list"><span onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_zhaiyao&#39;])">
                    <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_summary.gif">摘要视图</span></a></li>
                <li id="btnRss"><a href="http://blog.csdn.net/zhoudaxia/rss/list"><span onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_RSS&#39;])">
                    <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_rss.gif">订阅</span></a></li>                

            </ul>
    </div>
</div>
<script type="text/javascript">
    var username = "zhoudaxia";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/zhoudaxia";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "datayes";  
</script>

        <div id="body">
            <div id="main">
                <div class="main">
                        <div class="ad_class">
<div class="notice tracking-ad" data-mod="popu_3"> 


<a href="http://edu.csdn.net/course/detail/330" target="_blank">
<font color="blue">从零开始掌握iOS8开发技术（Swift版）</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/blogdevteam/article/details/42918959" target="_blank">
<font color="red">那些年我们追过的Wrox精品红皮计算机图书
</font></a>
&nbsp;&nbsp;&nbsp;&nbsp;
<a href="http://blog.csdn.net/csdnedu/article/details/43148831" target="_blank">
<font color="blue">CSDN学院--学习礼包大派送
</font></a>
&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://job.csdn.net/event/mobdev.html" target="_blank">
<font color="red">CSDN JOB带你坐飞机回家过年
</font></a>


</div>                        </div>
                        

  
<link href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/comment1.css" type="text/css" rel="stylesheet">
<link href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/style1.css" type="text/css" rel="stylesheet">
<script language="JavaScript" type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/jquery.cookie.js"></script>
<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/main(1).js"></script>
  <script type="text/ecmascript">
      window.quickReplyflag = true;
    </script>
<div id="article_details" class="details">
    <div class="article_title">   
         <span class="ico ico_type_Repost"></span>


    <h1>
        <span class="link_title"><a href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET.htm">
        Python面向对象编程指南
        </a></span>
    </h1>
</div>

    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="http://blog.csdn.net/zhoudaxia/article/category/2364421" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_fenlei&#39;]);">Python&amp;动态语言探索</a> 
        </span>
    <span class="link_postdate">2014-04-16 14:30</span>
    <span class="link_view" title="阅读次数">1513人阅读</span>
    <span class="link_comments" title="评论次数"><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#comments" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_pinglun&#39;])">评论</a>(1)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_shoucang&#39;]);collectArticle(&#39;Python面向对象编程指南&#39;,&#39;23341261&#39;);return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#report" onclick="javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_jubao&#39;]);report(23341261,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href="http://www.csdn.net/tag/python" target="_blank" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_tag&#39;]);">python</a><a href="http://www.csdn.net/tag/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%bc%96%e7%a8%8b" target="_blank" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_tag&#39;]);">面向对象编程</a></div>

  
    
<div style="clear:both"></div><div style="border:solid 1px #ccc; background:#eee; float:left; min-width:200px;padding:4px 10px;"><p style="text-align:right;margin:0;"><span style="float:left;">目录<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" title="系统根据文章中H1到H6标签自动生成文章目录">(?)</a></span><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" onclick="javascript:return openct(this);" title="展开">[+]</a></p><ol style="display:none;margin-left:14px;padding-left:14px;line-height:160%;"><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t0">一 如何定义一个类</a></li><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t1">二 属性</a></li><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t2">三 方法</a></li><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t3">四 类中内置的方法</a></li><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t4">五 类属性实例属性类方法实例方法以及静态方法</a></li><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t5">六 继承和多重继承</a></li><li><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#t6">七 多态</a></li></ol></div><div style="clear:both"></div><div id="article_content" class="article_content">

<p>　　抽象是隐藏多余细节的艺术。在面向对象的概念中，抽象的直接表现形式通常为类。虽然Python是解释性语言，但是它是面向对象的，从设计之初就已经是一门面向对象的语言。Python基本上提供了面向对象编程语言的所有元素，如果你已经至少掌握了一门面向对象语言，那么利用Python进行面向对象程序设计将会相当容易。下面就来了解一下如何在Python中进行对象编程。<br>
</p>
<p><br>
</p>
<h2><a name="t0"></a>一. 如何定义一个类</h2>
<p><br>
</p>
<p>　　在进行python面向对象编程之前，<strong>先来了解几个术语：类，类对象，实例对象，属性，函数和方法。</strong></p>
<p>　　类是对现实世界中一些事物的封装，定义一个类可以采用下面的方式来定义：</p>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 673px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_1" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_1" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=1&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;className:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;&nbsp;</span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_1_3567442" name="code" class="python" style="display: none;">class className:
    block</pre>　　注意类名后面有个冒号，在block块里面就可以定义属性和方法了。当一个类定义完之后，就产生了一个类对象。类对象支持两种操作：引用和实例化。引用操作是通过类对象去调用类中的属性或者方法，而实例化是产生出一个类对象的实例，称作实例对象。比如定义了一个people类：<br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 830px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_2" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_2" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=2&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#定义了一个属性</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#定义了一个方法</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;printName(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="special">self</span><span>.name&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_2_9358510" name="code" class="python" style="display: none;">class people:
    name = 'jack'       #定义了一个属性
    #定义了一个方法
    def printName(self):
        print self.name</pre>
<p></p>
<p>　　people类定义完成之后就产生了一个全局的类对象，可以通过类对象来访问类中的属性和方法了。当通过people.name（至于为什么可以直接这样访问属性后面再解释，这里只要理解类对象这个概念就行了）来访问时，people.name中的people称为类对象，这点和C++中的有所不同。当然还可以进行实例化操作，p=people( )，这样就产生了一个people的实例对象，此时也可以通过实例对象p来访问属性或者方法了(p.name).</p>
<p>　　理解了类、类对象和实例对象的区别之后，我们来了解一下Python中属性、方法和函数的区别。</p>
<p>　　在上面代码中注释的很清楚了，name是一个属性，printName( )是一个方法，与某个对象进行绑定的函数称作为方法。一般在类里面定义的函数与类对象或者实例对象绑定了，所以称作为方法；而在类外定义的函数一般没有同对象进行绑定，就称为函数。</p>
<p><br>
</p>
<h2><a name="t1"></a>二. 属性</h2>
<p><br>
</p>
<p>　　在类中我们可以定义一些属性，比如：</p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 1249px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_3" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_3" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=3&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;age&nbsp;=&nbsp;<span class="number">12</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.name,p.age&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_3_1801509" name="code" class="python" style="display: none;">class people:
    name = 'jack'
    age = 12

p = people()
print p.name,p.age</pre>　　定义了一个people类，里面定义了name和age属性，默认值分别为'jack'和12。在定义了类之后，就可以用来产生实例化对象了，这句p = people( )实例化了一个对象p，然后就可以通过p来读取属性了。这里的name和age都是公有的，可以直接在类外通过对象名访问，如果想定义成私有的，则需在前面加2个下划线 ' __'。<br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 1504px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_4" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_4" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=4&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;__name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;__age&nbsp;=&nbsp;<span class="number">12</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.__name,p.__age&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_4_9435740" name="code" class="python" style="display: none;">class people:
    __name = 'jack'
    __age = 12

p = people()
print p.__name,p.__age

</pre>　　这段程序运行会报错：<br>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 720px; top: 1707px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_5" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_5" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=5&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1"><li class="alt"><span><span>Traceback&nbsp;(most&nbsp;recent&nbsp;call&nbsp;last):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;File&nbsp;"C:/PycharmProjects/FirstProject/oop.py",&nbsp;line&nbsp;6,&nbsp;in&nbsp;&lt;module&gt;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;p.__name,p.__age&nbsp;&nbsp;</span></li><li class=""><span>AttributeError:&nbsp;people&nbsp;instance&nbsp;has&nbsp;no&nbsp;attribute&nbsp;'__name&nbsp;&nbsp;</span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_5_7385616" name="code" class="plain" style="display: none;">Traceback (most recent call last):
  File "C:/PycharmProjects/FirstProject/oop.py", line 6, in &lt;module&gt;
    print p.__name,p.__age
AttributeError: people instance has no attribute '__name</pre>
<p>　　提示找不到该属性，因为私有属性是不能够在类外通过对象名来进行访问的。<strong><span style="color:#FF0000">在Python中没有像C++中public和private这些关键字来区别公有属性和私有属性，它是以属性命名方式来区分，如果在属性名前面加了2个下划线'__'，则表明该属性是私有属性，否则为公有属性（方法也是一样，方法名前面加了2个下划线的话表示该方法是私有的，否则为公有的）。</span></strong></p>
<p><strong><span style="color:#FF0000"><br>
</span></strong></p>
<h2><a name="t2"></a>三. 方法</h2>
<p><br>
</p>
<p>　　在类中可以根据需要定义一些方法，定义方法采用def关键字，在类中定义的方法至少会有一个参数，，一般以名为'self'的变量作为该参数（用其他名称也可以），而且需要作为第一个参数。下面看个例子：</p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 2056px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_6" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_6" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=6&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;__name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;__age&nbsp;=&nbsp;<span class="number">12</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getName(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.__name&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getAge(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.__age&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.getName(),p.getAge()&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_6_5891900" name="code" class="python" style="display: none;">class people:
    __name = 'jack'
    __age = 12

    def getName(self):
        return self.__name
    def getAge(self):
        return self.__age

p = people()
print p.getName(),p.getAge()</pre>
<p>　　如果对self不好理解的话，可以把它当做C++中类里面的this指针一样理解，就是对象自身的意思，在用某个对象调用该方法时，就将该对象作为第一个参数传递给self。</p>
<p><br>
</p>
<h2><a name="t3"></a>四. 类中内置的方法</h2>
<p><br>
</p>
<p>　　在Python中有一些内置的方法，这些方法命名都有比较特殊的地方（其方法名以2个下划线开始然后以2个下划线结束）。类中最常用的就是构造方法和析构方法。</p>
<p>　　<strong>构造方法__init__(self,....)：<span style="color:#FF0000">在生成对象时调用，可以用来进行一些初始化操作，不需要显示去调用，系统会默认去执行。</span></strong>构造方法支持重载，如果用户自己没有重新定义构造方法，系统就自动执行默认的构造方法。</p>
<p>　　<strong>析构方法__del__(self)：<span style="color:#FF0000">在释放对象时调用，支持重载，可以在里面进行一些释放资源的操作，不需要显示调用。</span></strong></p>
<p>　　还有其他的一些内置方法，比如 __cmp__( ), __len( )__等。下面是常用的内置方法：</p>
<p>
</p><table cellpadding="1" cellspacing="1" border="1" width="721">
<tbody>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;内置方法 </span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;说明</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__init__(self,...)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;初始化对象，在创建新对象时调用</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__del__(self)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;释放对象，在对象被删除之前调用</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__new__(cls,*args,**kwd)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;实例的生成操作</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__str__(self)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;在使用print语句时被调用</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__getitem__(self,key)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;获取序列的索引key对应的值，等价于seq[key]</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__len__(self)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;在调用内联函数len()时被调用</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__cmp__(stc,dst)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;比较两个对象src和dst</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__getattr__(s,name)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;获取属性的值</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__setattr__(s,name,value)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;设置属性的值</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__delattr__(s,name)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;删除name属性</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__getattribute__()</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;__getattribute__()功能与__getattr__()类似</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__gt__(self,other)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;判断self对象是否大于other对象</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__lt__(slef,other)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;判断self对象是否小于other对象</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__ge__(slef,other)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;判断self对象是否大于或者等于other对象</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__le__(slef,other)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;判断self对象是否小于或者等于other对象</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__eq__(slef,other)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;判断self对象是否等于other对象</span></td>
</tr>
<tr>
<td><span style="font-family:宋体; font-size:12px">&nbsp;<strong><span style="color:#0000ff">__call__(self,*args)</span></strong></span></td>
<td><span style="font-family:宋体; font-size:12px">&nbsp;把实例对象作为函数调用</span></td>
</tr>
</tbody>
</table>
<span style="font-family:宋体; font-size:12px"><strong><span style="font-size:14px">　　__init__():<span style="color:#FF0000"><span style="font-size:12px"></span></span></span><span style="color:#FF0000">__init__方法在类的一个对象被建立时，马上运行。这个方法可以用来对你的对象做一些你希望的初始化。</span></strong>注意，这个名称的开始和结尾都是双下划线。</span><span style="font-family:宋体; font-size:12px">代码例子:</span><br>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 3223px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_7" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_7" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=7&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;Filename:&nbsp;class_init.py</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;Person:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,&nbsp;name):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.name&nbsp;=&nbsp;name&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;sayHi(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="string">'Hello,&nbsp;my&nbsp;name&nbsp;is'</span><span>,&nbsp;</span><span class="special">self</span><span>.name&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>p&nbsp;=&nbsp;Person(<span class="string">'Swaroop'</span><span>)&nbsp;&nbsp;</span></span></li><li class="alt"><span>p.sayHi()&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>输出：&nbsp;&nbsp;</span></li><li class=""><span>Hello,&nbsp;my&nbsp;name&nbsp;<span class="keyword">is</span><span>&nbsp;Swaroop&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_7_7986234" name="code" class="python" style="display: none;"># Filename: class_init.py
class Person:
    def __init__(self, name):
        self.name = name
    def sayHi(self):
        print 'Hello, my name is', self.name

p = Person('Swaroop')
p.sayHi()

输出：
Hello, my name is Swaroop</pre><span style="font-family:宋体; font-size:12px"><strong><span style="font-size:14px">　　__new__():</span><span style="color:#FF0000">__new__()在__init__()之前被调用，用于生成实例对象。</span></strong>利用这个方法和类属性的特性可以实现设计模式中的单例模式。单例模式是指创建唯一对象吗，单例模式设计的类只能实例化一个对象。</span><br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 3561px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_8" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_8" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=8&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;Singleton(object):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;__instance&nbsp;=&nbsp;<span class="special">None</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;定义实例</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">pass</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__new__(</span><span class="special">cls</span><span>,&nbsp;*args,&nbsp;**kwd):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;在__init__之前调用</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>&nbsp;Singleton.__instance&nbsp;</span><span class="keyword">is</span><span>&nbsp;</span><span class="special">None</span><span>:&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;生成唯一实例</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Singleton.__instance&nbsp;=&nbsp;object.__new__(<span class="special">cls</span><span>,&nbsp;*args,&nbsp;**kwd)&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;Singleton.__instance&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_8_952621" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

class Singleton(object):
    __instance = None                       # 定义实例

    def __init__(self):
        pass

    def __new__(cls, *args, **kwd):         # 在__init__之前调用
        if Singleton.__instance is None:    # 生成唯一实例
            Singleton.__instance = object.__new__(cls, *args, **kwd)
        return Singleton.__instance</pre><span style="font-family:宋体; font-size:12px"><strong><span style="font-size:14px">　　__getattr__()、__setattr__()和__getattribute__():<span style="font-size:12px"></span></span></strong>当读取对象的某个属性时，python会自动调用__getattr__()方法。例如，fruit.color将转换为fruit.__getattr__(color)。当使用赋值语句对属性进行设置时，python会自动调用__setattr__()方法。__getattribute__()的功能与__getattr__()类似，用于获取属性的值。但是__getattribute__()能提供更好的控制，代码更健壮。注意，python中并不存在__setattribute__()方法。</span>代码例子：<br>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 3926px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_9" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_9" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=9&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;Fruit(object):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,&nbsp;color=</span><span class="string">"red"</span><span>,&nbsp;price=</span><span class="number">0</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.__color&nbsp;=&nbsp;color&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.__price&nbsp;=&nbsp;price&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__getattribute__(</span><span class="special">self</span><span>,&nbsp;item):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;&lt;span&nbsp;style="font-family:宋体;font-size:12px;"&gt;获取属性的方法&lt;/span&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;object.__getattribute__(</span><span class="special">self</span><span>,&nbsp;item)&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__setattr__(</span><span class="special">self</span><span>,&nbsp;key,&nbsp;value):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.__dict__[key]&nbsp;=&nbsp;value&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">if</span><span>&nbsp;__name__&nbsp;==&nbsp;</span><span class="string">"__main__"</span><span>:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;fruit&nbsp;=&nbsp;Fruit(<span class="string">"blue"</span><span>,&nbsp;</span><span class="number">10</span><span>)&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;fruit.__dict__.get(</span><span class="string">"_Fruit__color"</span><span>)&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;&lt;span&nbsp;style="font-family:宋体;font-size:12px;"&gt;获取color属性&lt;/span&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;fruit.__dict__[<span class="string">"_Fruit__price"</span><span>]&nbsp;=&nbsp;</span><span class="number">5</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;fruit.__dict__.get(</span><span class="string">"_Fruit__price"</span><span>)&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;&lt;span&nbsp;style="font-family:宋体;font-size:12px;"&gt;获取price属性&lt;/span&gt;</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_9_8379109" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

class Fruit(object):
    def __init__(self, color="red", price=0):
        self.__color = color
        self.__price = price

    def __getattribute__(self, item):              # &lt;span style="font-family:宋体;font-size:12px;"&gt;获取属性的方法&lt;/span&gt;
        return object.__getattribute__(self, item)

    def __setattr__(self, key, value):
        self.__dict__[key] = value

if __name__ == "__main__":
    fruit = Fruit("blue", 10)
    print fruit.__dict__.get("_Fruit__color")    # &lt;span style="font-family:宋体;font-size:12px;"&gt;获取color属性&lt;/span&gt;
    fruit.__dict__["_Fruit__price"] = 5
    print fruit.__dict__.get("_Fruit__price")    # &lt;span style="font-family:宋体;font-size:12px;"&gt;获取price属性&lt;/span&gt;</pre>
<p>　　Python不允许实例化的类访问私有数据，但你可以使用object._className__attrName访问这些私有属性。</p>
<p><span style="font-family:宋体; font-size:12px"><strong><span style="font-size:14px">　　__getitem__():</span></strong>如果类把某个属性定义为序列，可以使用__getitem__()输出序列属性中的某个元素.假设水果店中销售多钟水果，可以通过__getitem__()方法获取水果店中的没种水果。代码例子：</span></p>
<p></p>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 4398px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_10" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_10" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=10&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;FruitShop:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__getitem__(</span><span class="special">self</span><span>,&nbsp;i):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;获取水果店的水果</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.fruits[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">if</span><span>&nbsp;__name__&nbsp;==&nbsp;</span><span class="string">"__main__"</span><span>:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;shop&nbsp;=&nbsp;FruitShop()&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;shop.fruits&nbsp;=&nbsp;[<span class="string">"apple"</span><span>,&nbsp;</span><span class="string">"banana"</span><span>]&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;shop[</span><span class="number">1</span><span>]&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>&nbsp;item&nbsp;</span><span class="keyword">in</span><span>&nbsp;shop:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;输出水果店的水果</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;item,&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_10_3853750" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

class FruitShop:
     def __getitem__(self, i):      # 获取水果店的水果
         return self.fruits[i]      

if __name__ == "__main__":
    shop = FruitShop()
    shop.fruits = ["apple", "banana"]
    print shop[1]
    for item in shop:               # 输出水果店的水果
        print item,</pre>　　输出：
<p></p>
<p></p>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 720px; top: 4709px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_11" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_11" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=11&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1"><li class="alt"><span><span>banana&nbsp;&nbsp;</span></span></li><li class=""><span>apple&nbsp;banana&nbsp;&nbsp;</span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_11_2916442" name="code" class="plain" style="display: none;">banana
apple banana</pre>　　_<span style="font-family:宋体; font-size:12px"><strong><span style="font-size:14px">_str__():<span style="font-size:12px"></span></span></strong>__str__()用于表示对象代表的含义，返回一个字符串.实现了__str__()方法后，可以直接使用print语句输出对象，也可以通过函数str()触发__str__()的执行。这样就把对象和字符串关联起来，便于某些程序的实现，可以用这个字符串来表示某个类。代码例子：</span><br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 4867px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_12" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_12" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=12&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;Fruit:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">''</span><span class="comment">'''Fruit类'''</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#为Fruit类定义了文档字符串</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__str__(</span><span class="special">self</span><span>):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;定义对象的字符串表示</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.__doc__&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">if</span><span>&nbsp;__name__&nbsp;==&nbsp;</span><span class="string">"__main__"</span><span>:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;fruit&nbsp;=&nbsp;Fruit()&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;str(fruit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;调用内置函数str()触发__str__()方法，输出结果为:Fruit类</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;fruit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#直接输出对象fruit,返回__str__()方法的值，输出结果为:Fruit类</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_12_3723237" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

class Fruit:     
    '''Fruit类'''               #为Fruit类定义了文档字符串
    def __str__(self):          # 定义对象的字符串表示
        return self.__doc__

if __name__ == "__main__":
    fruit = Fruit()
    print str(fruit)            # 调用内置函数str()触发__str__()方法，输出结果为:Fruit类
    print fruit                 #直接输出对象fruit,返回__str__()方法的值，输出结果为:Fruit类</pre>　　<span style="font-family:宋体; font-size:12px"><strong><span style="font-size:14px">__call__():<span style="color:#0000ff"><span style="font-size:12px"></span></span></span></strong>在类中实现__call__()方法，可以在对象创建时直接返回__call__()的内容。使用该方法可以模拟静态方法。代码例子:</span><br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 5161px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_13" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_13" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=13&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;Fruit:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">class</span><span>&nbsp;Growth:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#&nbsp;内部类</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__call__(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="string">"grow&nbsp;..."</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;grow&nbsp;=&nbsp;Growth()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#&nbsp;调用Growth()，此时将类Growth作为函数返回,即为外部类Fruit定义方法grow(),grow()将执行__call__()内的代码</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">if</span><span>&nbsp;__name__&nbsp;==&nbsp;</span><span class="string">'__main__'</span><span>:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;fruit&nbsp;=&nbsp;Fruit()&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;fruit.grow()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#&nbsp;输出结果：grow&nbsp;...</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;Fruit.grow()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#&nbsp;输出结果：grow&nbsp;...</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_13_1182745" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

class Fruit:
    class Growth:        # 内部类
        def __call__(self):
            print "grow ..."

    grow = Growth()      # 调用Growth()，此时将类Growth作为函数返回,即为外部类Fruit定义方法grow(),grow()将执行__call__()内的代码
if __name__ == '__main__':
    fruit = Fruit()
    fruit.grow()         # 输出结果：grow ...
    Fruit.grow()         # 输出结果：grow ...</pre>
<p></p>
<p><br>
</p>
<h2><a name="t4"></a>五. 类属性、实例属性、类方法、实例方法以及静态方法</h2>
<p><br>
</p>
<p>　　在了解了类基本的东西之后，下面看一下python中这几个概念的区别。</p>
<p>　　先来谈一下类属性和实例属性</p>
<p>　　在前面的例子中我们接触到的就是类属性，顾名思义，<span style="color:#FF0000"><strong>类属性就是类对象所拥有的属性，它被所有类对象的实例对象所共有，在内存中只存在一个副本，这个和C++中类的静态成员变量有点类似。</strong></span>对于公有的类属性，在类外可以通过类对象和实例对象访问。</p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 5628px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_14" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_14" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=14&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;</span><span class="comment">#公有的类属性</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;__age&nbsp;=&nbsp;<span class="number">12</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#私有的类属性</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.__age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#错误，不能在类外通过实例对象访问私有的类属性</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.__age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#错误，不能在类外通过类对象访问私有的类属性</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_14_6832109" name="code" class="python" style="display: none;">class people:
    name = 'jack'  #公有的类属性
    __age = 12     #私有的类属性

p = people()

print p.name             #正确
print people.name        #正确
print p.__age            #错误，不能在类外通过实例对象访问私有的类属性
print people.__age       #错误，不能在类外通过类对象访问私有的类属性</pre>　　<span style="color:#FF0000"><strong>实例属性是不需要在类中显示定义的</strong></span>，比如：<br>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 5903px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_15" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_15" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=15&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class="alt"><span>p.age&nbsp;=<span class="number">12</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.name&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;people.name&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#错误</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_15_1226956" name="code" class="python" style="display: none;">class people:
    name = 'jack'

p = people()
p.age =12
print p.name    #正确
print p.age     #正确

print people.name    #正确
print people.age     #错误</pre>　　在类外对类对象people进行实例化之后，产生了一个实例对象p，然后p.age = 12这句给p添加了一个实例属性age，赋值为12。这个实例属性是实例对象p所特有的，注意，类对象people并不拥有它（所以不能通过类对象来访问这个age属性）。当然还可以在实例化对象的时候给age赋值。<br>
<p></p>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 6204px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_16" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_16" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=16&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;<span class="string">'jack'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#__init__()是内置的构造方法，在实例化对象时自动调用</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,age):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.age&nbsp;=&nbsp;age&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>p&nbsp;=&nbsp;people(<span class="number">12</span><span>)&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.name&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.name&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;people.age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#错误</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_16_5829544" name="code" class="python" style="display: none;">class people:
    name = 'jack'
    
    #__init__()是内置的构造方法，在实例化对象时自动调用
    def __init__(self,age):
        self.age = age

p = people(12)
print p.name    #正确
print p.age     #正确

print people.name    #正确
print people.age     #错误</pre>　　<span style="color:#FF0000"><strong>如果需要在类外修改类属性，必须通过类对象去引用然后进行修改。如果通过实例对象去引用，会产生一个同名的实例属性，这种方式修改的是实例属性，不会影响到类属性，并且之后如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽掉类属性，即引用的是实例属性，除非删除了该实例属性。</strong></span><br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 6585px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_17" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_17" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=17&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;country&nbsp;=&nbsp;<span class="string">'china'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;people.country&nbsp;&nbsp;</span></span></li><li class=""><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.country&nbsp;&nbsp;</span></span></li><li class=""><span>p.country&nbsp;=&nbsp;<span class="string">'japan'</span><span>&nbsp;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.country&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#实例属性会屏蔽掉同名的类属性</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.country&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">del</span><span>&nbsp;p.country&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#删除实例属性</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.country&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_17_9667982" name="code" class="python" style="display: none;">class people:
    country = 'china'
    

print people.country
p = people()
print p.country
p.country = 'japan' 
print p.country      #实例属性会屏蔽掉同名的类属性
print people.country
del p.country    #删除实例属性
print p.country</pre>
<p></p>
<p>　　下面来看一下类方法、实例方法和静态方法的区别。</p>
<p>　　<strong>类方法：</strong>是类对象所拥有的方法，需要用修饰器"@classmethod"来标识其为类方法，对于类方法，第一个参数必须是类对象，一般以"cls"作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯以'cls'作为第一个参数的名字，就最好用'cls'了），能够通过实例对象和类对象去访问。</p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 6974px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_18" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_18" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=18&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;country&nbsp;=&nbsp;<span class="string">'china'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#类方法，用classmethod来进行修饰</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="decorator">&nbsp;&nbsp;&nbsp;&nbsp;@classmethod</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getCountry(</span><span class="special">cls</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">cls</span><span>.country&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#可以用过实例对象引用</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;people.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#可以通过类对象引用</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_18_8632397" name="code" class="python" style="display: none;">class people:
    country = 'china'
    
    #类方法，用classmethod来进行修饰
    @classmethod
    def getCountry(cls):
        return cls.country

p = people()
print p.getCountry()    #可以用过实例对象引用
print people.getCountry()    #可以通过类对象引用</pre>
<p>　　类方法还有一个用途就是可以对类属性进行修改：</p>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 7267px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_19" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_19" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=19&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;country&nbsp;=&nbsp;<span class="string">'china'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#类方法，用classmethod来进行修饰</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="decorator">&nbsp;&nbsp;&nbsp;&nbsp;@classmethod</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getCountry(</span><span class="special">cls</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">cls</span><span>.country&nbsp;&nbsp;</span></span></li><li class=""><span><span class="decorator">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;</span></li><li class="alt"><span><span class="decorator">&nbsp;&nbsp;&nbsp;&nbsp;@classmethod</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;setCountry(</span><span class="special">cls</span><span>,country):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">cls</span><span>.country&nbsp;=&nbsp;country&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;p.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#可以用过实例对象引用</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#可以通过类对象引用</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>p.setCountry(<span class="string">'japan'</span><span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;people.getCountry()&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_19_1075396" name="code" class="python" style="display: none;">class people:
    country = 'china'
    
    #类方法，用classmethod来进行修饰
    @classmethod
    def getCountry(cls):
        return cls.country
        
    @classmethod
    def setCountry(cls,country):
        cls.country = country
        

p = people()
print p.getCountry()    #可以用过实例对象引用
print people.getCountry()    #可以通过类对象引用

p.setCountry('japan')   

print p.getCountry()   
print people.getCountry()</pre>
<p></p>
　　运行结果：
<p></p>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 720px; top: 7740px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_20" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_20" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=20&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1"><li class="alt"><span><span>china&nbsp;&nbsp;</span></span></li><li class=""><span>china&nbsp;&nbsp;</span></li><li class="alt"><span>japan&nbsp;&nbsp;</span></li><li class=""><span>japan&nbsp;&nbsp;</span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_20_2646342" name="code" class="plain" style="display: none;">china
china
japan
japan</pre>
<p></p>
<p>　　结果显示在用类方法对类属性修改之后，通过类对象和实例对象访问都发生了改变。</p>
<p>　　<strong>实例方法：</strong>在类中最常定义的成员方法，它至少有一个参数并且必须以实例对象作为其第一个参数，一般以名为'self'的变量作为第一个参数（当然可以以其他名称的变量作为第一个参数）。<span style="color:#FF0000"><strong>在类外实例方法只能通过实例对象去调用，不能通过其他方式去调用。</strong></span></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 7959px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_21" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_21" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=21&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;country&nbsp;=&nbsp;<span class="string">'china'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#实例方法</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getCountry(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.country&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>p&nbsp;=&nbsp;people()&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;p.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#正确，可以用过实例对象引用</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;people.getCountry()&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#错误，不能通过类对象引用实例方法</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_21_7500102" name="code" class="python" style="display: none;">class people:
    country = 'china'
    
    #实例方法
    def getCountry(self):
        return self.country
        

p = people()
print p.getCountry()         #正确，可以用过实例对象引用
print people.getCountry()    #错误，不能通过类对象引用实例方法</pre>　　<strong>静态方法：</strong>需要通过修饰器"@staticmethod"来进行修饰，静态方法不需要多定义参数。<br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 8252px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_22" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_22" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=22&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;people:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;country&nbsp;=&nbsp;<span class="string">'china'</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="decorator">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;</span></li><li class=""><span><span class="decorator">&nbsp;&nbsp;&nbsp;&nbsp;@staticmethod</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#静态方法</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getCountry():&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;people.country&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;people.getCountry()&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_22_8765811" name="code" class="python" style="display: none;">class people:
    country = 'china'
    
    @staticmethod
    #静态方法
    def getCountry():
        return people.country
        

print people.getCountry()</pre>
<p>　　对于类属性和实例属性，如果在类方法中引用某个属性，该属性必定是类属性，而如果在实例方法中引用某个属性（不作更改），并且存在同名的类属性，此时若实例对象有该名称的实例属性，则实例属性会屏蔽类属性，即引用的是实例属性，若实例对象没有该名称的实例属性，则引用的是类属性；如果在实例方法更改某个属性，并且存在同名的类属性，此时若实例对象有该名称的实例属性，则修改的是实例属性，若实例对象没有该名称的实例属性，则会创建一个同名称的实例属性。想要修改类属性，如果在类外，可以通过类对象修改，如果在类里面，只有在类方法中进行修改。</p>
<p>　　<strong><span style="color:#FF0000">从类方法和实例方法以及静态方法的定义形式就可以看出来，类方法的第一个参数是类对象cls，那么通过cls引用的必定是类对象的属性和方法；而实例方法的第一个参数是实例对象self，那么通过self引用的可能是类属性、也有可能是实例属性（这个需要具体分析），不过在存在相同名称的类属性和实例属性的情况下，实例属性优先级更高。静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类对象来引用。</span></strong></p>
<p><br>
</p>
<h2><a name="t5"></a>六. 继承和多重继承</h2>
<p><br>
</p>
<p>　　上面谈到了类的基本定义和使用方法，这只体现了面向对象编程的三大特点之一：封装。下面就来了解一下另外两大特征：继承和多态。</p>
<p>　　在Python中，如果需要的话，可以让一个类去继承一个类，被继承的类称为父类或者超类、也可以称作基类，继承的类称为子类。并且Python支持多继承，能够让一个子类有多个父类。</p>
<p>　　Python中类的继承定义基本形式如下：</p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 8891px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_23" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_23" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=23&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#父类</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;superClassName:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="comment">#子类</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;subClassName(superClassName):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;&nbsp;</span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_23_8395317" name="code" class="python" style="display: none;">#父类
class superClassName:
    block

#子类
class subClassName(superClassName):
    block</pre>　　在定义一个类的时候，可以在类名后面紧跟一对括号，在括号中指定所继承的父类，如果有多个父类，多个父类名之间用逗号隔开。以大学里的学生和老师举例，可以定义一个父类UniversityMember，然后类Student和类Teacher分别继承类UniversityMember：<br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 9138px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_24" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_24" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=24&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;UniversityMember:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,name,age):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.name&nbsp;=&nbsp;name&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.age&nbsp;=&nbsp;age&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getName(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.name&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getAge(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.age&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;Student(UniversityMember):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,name,age,sno,mark):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UniversityMember.__init__(<span class="special">self</span><span>,name,age)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment">#注意要显示调用父类构造方法，并传递参数self</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.sno&nbsp;=&nbsp;sno&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.mark&nbsp;=&nbsp;mark&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getSno(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.sno&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getMark(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.mark&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;Teacher(UniversityMember):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,name,age,tno,salary):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UniversityMember.__init__(<span class="special">self</span><span>,name,age)&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.tno&nbsp;=&nbsp;tno&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.salary&nbsp;=&nbsp;salary&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getTno(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.tno&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;getSalary(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="special">self</span><span>.salary&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_24_3249078" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

class UniversityMember:

    def __init__(self,name,age):
        self.name = name
        self.age = age

    def getName(self):
        return self.name

    def getAge(self):
        return self.age

class Student(UniversityMember):

    def __init__(self,name,age,sno,mark):
        UniversityMember.__init__(self,name,age)     #注意要显示调用父类构造方法，并传递参数self
        self.sno = sno
        self.mark = mark

    def getSno(self):
        return self.sno

    def getMark(self):
        return self.mark



class Teacher(UniversityMember):

    def __init__(self,name,age,tno,salary):
        UniversityMember.__init__(self,name,age)
        self.tno = tno
        self.salary = salary

    def getTno(self):
        return self.tno

    def getSalary(self):
        return self.salary</pre>
<p>　　在大学中的每个成员都有姓名和年龄，而学生有学号和分数这2个属性，老师有教工号和工资这2个属性，从上面的代码中可以看到：</p>
<p>　　1）在Python中，如果父类和子类都重新定义了构造方法__init( )__，在进行子类实例化的时候，子类的构造方法不会自动调用父类的构造方法，必须在子类中显示调用。</p>
<p>　　2）<span style="color:#FF0000"><strong>如果需要在子类中调用父类的方法，需要以”父类名.方法“这种方式调用，</strong></span>以这种方式调用的时候，注意要传递self参数过去。</p>
<p>　　对于继承关系，子类继承了父类所有的公有属性和方法，可以在子类中通过父类名来调用，而对于私有的属性和方法，子类是不进行继承的，因此在子类中是无法通过父类名来访问的。</p>
<p>　　Python支持多重继承。对于多重继承，比如</p>
<p>　　class SubClass(SuperClass1,SuperClass2)</p>
<p>　　此时有一个问题就是如果SubClass没有重新定义构造方法，它会自动调用哪个父类的构造方法？这里记住一点：以第一个父类为中心。如果SubClass重新定义了构造方法，需要显示去调用父类的构造方法，此时调用哪个父类的构造方法由你自己决定；若SubClass没有重新定义构造方法，则只会执行第一个父类的构造方法。<strong><span style="color:#FF0000">并且若SuperClass1和SuperClass2中有同名的方法，通过子类的实例化对象去调用该方法时调用的是第一个父类中的方法。</span></strong></p>
<p><strong><span style="color:#FF0000"><br>
</span></strong></p>
<h2><a name="t6"></a>七. 多态</h2>
<p><br>
</p>
<p>　　多态即多种形态，在运行时确定其状态，在编译阶段无法确定其类型，这就是多态。Python中的多态和Java以及C++中的多态有点不同，Python中的变量是弱类型的，在定义时不用指明其类型，它会根据需要在运行时确定变量的类型（个人觉得这也是多态的一种体现），并且Python本身是一种解释性语言，不进行预编译，因此它就只在运行时确定其状态，故也有人说Python是一种多态语言。在Python中很多地方都可以体现多态的特性，比如内置函数len(object)，len函数不仅可以计算字符串的长度，还可以计算列表、元组等对象中的数据个数，<span style="color:#FF0000"><strong>这里在运行时通过参数类型确定其具体的计算过程，正是多态的一种体现。</strong></span>这有点类似于函数重载（一个编译单元中有多个同名函数，但参数不同），相当于为每种类型都定义了一个len函数。这是典型的多态表现。有些朋友提出Python不支持多态，我是完全不赞同的。</p>
<p>　　<span style="color:#FF0000"><strong>本质上，多态意味着可以对不同的对象使用同样的操作，但它们可能会以多种形态呈现出结果。</strong></span>len(object)函数就体现了这一点。在C++、Java、C#这种编译型语言中，由于有编译过程，因此就鲜明地分成了运行时多态和编译时多态。运行时多态是指允许父类指针或名称来引用子类对象，或对象方法，而实际调用的方法为对象的类类型方法，这就是所谓的动态绑定。编译时多态有模板或范型、方法重载（overload）、方法重写（override）等。而Python是动态语言，动态地确定类型信息恰恰体现了多态的特征。<span style="color:#FF0000"><strong></strong></span>在Python中，任何不知道对象到底是什么类型，但又需要对象做点什么的时候，都会用到多态。</p>
　　能够直接说明多态的两段示例代码如下：<br>
　　<strong>1、方法多态</strong><br>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 10673px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_25" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_25" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=25&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#&nbsp;-*-&nbsp;coding:&nbsp;UTF-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>_metaclass_=type&nbsp;<span class="comment">#&nbsp;确定使用新式类</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;calculator:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;count(</span><span class="special">self</span><span>,args):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="number">1</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>calc=calculator()&nbsp;<span class="comment">#自定义类型</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">from</span><span>&nbsp;random&nbsp;</span><span class="keyword">import</span><span>&nbsp;choice&nbsp;&nbsp;</span></span></li><li class=""><span>obj=choice([<span class="string">'hello,world'</span><span>,[</span><span class="number">1</span><span>,</span><span class="number">2</span><span>,</span><span class="number">3</span><span>],calc])&nbsp;</span><span class="comment">#obj是随机返回的&nbsp;类型不确定</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">print</span><span>&nbsp;type(obj)&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;obj.count(</span><span class="string">'a'</span><span>)&nbsp;</span><span class="comment">#方法多态</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_25_5866799" name="code" class="python" style="display: none;"># -*- coding: UTF-8 -*-

_metaclass_=type # 确定使用新式类
class calculator:
  
    def count(self,args):
        return 1

calc=calculator() #自定义类型

from random import choice
obj=choice(['hello,world',[1,2,3],calc]) #obj是随机返回的 类型不确定
print type(obj)
print obj.count('a') #方法多态
</pre>
<p>　　对于一个临时对象obj，它通过Python的随机函数取出来，不知道具体类型（是字符串、元组还是自定义类型），都可以调用count方法进行计算，至于count由谁（哪种类型）去做怎么去实现我们并不关心。</p>
<p>　　有一种称为”<a target="_blank" href="http://zh.wikipedia.org/wiki/Duck_typing">鸭子类型（duck typing）</a>“的东西，讲的也是多态：</p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 11072px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_26" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_26" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=26&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span>_metaclass_=type&nbsp;</span><span class="comment">#&nbsp;确定使用新式类</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;Duck:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;quack(</span><span class="special">self</span><span>):&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="string">"Quaaaaaack!"</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;feathers(</span><span class="special">self</span><span>):&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="string">"The&nbsp;duck&nbsp;has&nbsp;white&nbsp;and&nbsp;gray&nbsp;feathers."</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;Person:&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;quack(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="string">"The&nbsp;person&nbsp;imitates&nbsp;a&nbsp;duck."</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;feathers(</span><span class="special">self</span><span>):&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">print</span><span>&nbsp;</span><span class="string">"The&nbsp;person&nbsp;takes&nbsp;a&nbsp;feather&nbsp;from&nbsp;the&nbsp;ground&nbsp;and&nbsp;shows&nbsp;it."</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">def</span><span>&nbsp;in_the_forest(duck):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;duck.quack()&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;duck.feathers()&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">def</span><span>&nbsp;game():&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;donald&nbsp;=&nbsp;Duck()&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;john&nbsp;=&nbsp;Person()&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;in_the_forest(donald)&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;in_the_forest(john)&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>game()&nbsp;&nbsp;</span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_26_8626225" name="code" class="python" style="display: none;">_metaclass_=type # 确定使用新式类
class Duck:
    def quack(self): 
        print "Quaaaaaack!"
    def feathers(self): 
        print "The duck has white and gray feathers."
 
class Person:
    def quack(self):
        print "The person imitates a duck."
    def feathers(self): 
        print "The person takes a feather from the ground and shows it."
 
def in_the_forest(duck):
    duck.quack()
    duck.feathers()
 
def game():
    donald = Duck()
    john = Person()
    in_the_forest(donald)
    in_the_forest(john)
 
game()</pre>　　就in_the_forest函数而言，参数对象是一个鸭子类型，它实现了方法多态。但是实际上我们知道，从严格的抽象来讲，Person类型和Duck完全风马牛不相及。<br>
　　<strong>2、运算符多态</strong><br>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 11651px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_27" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_27" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=27&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">def</span><span>&nbsp;add(x,y):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;x+y&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;add(</span><span class="number">1</span><span>,</span><span class="number">2</span><span>)&nbsp;</span><span class="comment">#输出3</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;add(</span><span class="string">"hello,"</span><span>,</span><span class="string">"world"</span><span>)&nbsp;</span><span class="comment">#输出hello,world</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;add(</span><span class="number">1</span><span>,</span><span class="string">"abc"</span><span>)&nbsp;</span><span class="comment">#抛出异常&nbsp;TypeError:&nbsp;unsupported&nbsp;operand&nbsp;type(s)&nbsp;for&nbsp;+:&nbsp;'int'&nbsp;and&nbsp;'str'</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_27_7448153" name="code" class="python" style="display: none;">def add(x,y):
    return x+y

print add(1,2) #输出3

print add("hello,","world") #输出hello,world

print add(1,"abc") #抛出异常 TypeError: unsupported operand type(s) for +: 'int' and 'str'</pre>　　上例中，显而易见，Python的加法运算符是”多态“的，理论上，我们实现的add方法支持任意支持加法的对象，但是我们不用关心两个参数x和y具体是什么类型。<br>
　　Python同样支持运算符重载，实例如下：<br>
<p></p>
<p></p>
<div class="dp-highlighter bg_python"><div class="bar"><div class="tools"><b>[python]</b> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><a href="https://code.csdn.net/snippets/295557" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/CODE_ico.png" width="12" height="12" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;"></a><a href="https://code.csdn.net/snippets/295557/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ico_fork.svg" width="12" height="12" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;"></a><div style="position: absolute; left: 734px; top: 11942px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_28" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_28" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=28&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">class</span><span>&nbsp;Vector:&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__init__(</span><span class="special">self</span><span>,&nbsp;a,&nbsp;b):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.a&nbsp;=&nbsp;a&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="special">self</span><span>.b&nbsp;=&nbsp;b&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__str__(</span><span class="special">self</span><span>):&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">'Vector&nbsp;(%d,&nbsp;%d)'</span><span>&nbsp;%&nbsp;(</span><span class="special">self</span><span>.a,&nbsp;</span><span class="special">self</span><span>.b)&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;<span class="keyword">def</span><span>&nbsp;__add__(</span><span class="special">self</span><span>,other):&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;Vector(</span><span class="special">self</span><span>.a&nbsp;+&nbsp;other.a,&nbsp;</span><span class="special">self</span><span>.b&nbsp;+&nbsp;other.b)&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>v1&nbsp;=&nbsp;Vector(<span class="number">2</span><span>,</span><span class="number">10</span><span>)&nbsp;&nbsp;</span></span></li><li class="alt"><span>v2&nbsp;=&nbsp;Vector(<span class="number">5</span><span>,-</span><span class="number">2</span><span>)&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">print</span><span>&nbsp;v1&nbsp;+&nbsp;v2&nbsp;&nbsp;</span></span></li></ol></div><pre code_snippet_id="295557" snippet_file_name="blog_20140416_28_2017723" name="code" class="python" style="display: none;">class Vector:
   def __init__(self, a, b):
      self.a = a
      self.b = b

   def __str__(self):
      return 'Vector (%d, %d)' % (self.a, self.b)
   
   def __add__(self,other):
      return Vector(self.a + other.a, self.b + other.b)

v1 = Vector(2,10)
v2 = Vector(5,-2)
print v1 + v2</pre>　　一两个示例代码当然不能从根本上说明多态。<strong><span style="color:#FF0000">普遍认为面向对象最有价值最被低估的特征其实是多态。</span></strong>我们所理解的多态的实现和子类的虚函数地址绑定有关系，多态的效果其实和函数地址运行时动态绑定有关。在C++, Java, C#中实现多态的方式通常有重写和重载两种，从上面两段代码，我们其实可以分析得出Python中实现多态也可以变相理解为重写和重载。在Python中很多内置函数和运算符都是多态的。<br>
<br>
<p></p>
<p>参考文献：</p>
<p><a target="_blank" href="http://www.cnblogs.com/dolphin0520/archive/2013/03/29/2986924.html">http://www.cnblogs.com/dolphin0520/archive/2013/03/29/2986924.html</a><br>
</p>
<p><a target="_blank" href="http://www.cnblogs.com/jeffwongishandsome/archive/2012/10/06/2713258.html">http://www.cnblogs.com/jeffwongishandsome/archive/2012/10/06/2713258.html</a><br>
</p>
<pre></pre>

</div>




<!-- Baidu Button BEGIN -->

<div class="bdsharebuttonbox" style="float: right;">
<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="bds_more" data-cmd="more" style="background-position:0 0 !important; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=d754dcc0.png) !important"></a>
<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间" style="background-position:0 -52px !important"></a>
<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博" style="background-position:0 -104px !important"></a>
<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="bds_tqq" data-cmd="tqq" title="分享到腾讯微博" style="background-position:0 -260px !important"></a>
<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="bds_renren" data-cmd="renren" title="分享到人人网" style="background-position:0 -208px !important"></a>
<a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" class="bds_weixin" data-cmd="weixin" title="分享到微信" style="background-position:0 -1612px !important"></a>
</div>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
<!-- Baidu Button END -->

<!--192.168.100.35-->
<ul class="article_next_prev">
            <li class="prev_article"><span onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_shangyipian&#39;]);location.href=&#39;/zhoudaxia/article/details/23185917&#39;;">上一篇</span><a href="http://blog.csdn.net/zhoudaxia/article/details/23185917" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_shangyipian&#39;])">Python函数式编程指南</a></li>
            <li class="next_article"><span onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_xiayipian&#39;]);location.href=&#39;/zhoudaxia/article/details/23690615&#39;;">下一篇</span><a href="http://blog.csdn.net/zhoudaxia/article/details/23690615" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_xiayipian&#39;])">Python并发编程</a></li>
</ul>

<!-- Baidu Button BEGIN -->
<script type="text/javascript" id="bdshare_js" data="type=tools&amp;uid=1536434" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/bds_s_v2.js"></script>

<script type="text/javascript">
    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)
</script>
<!-- Baidu Button END -->


</div>
      <dl class="blog-associat-tag">
        <dt>主题推荐</dt>
        <dd>
                <a href="http://www.csdn.net/tag/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B" target="_blank" class="blog-tage-red">面向对象编程</a> 
                <a href="http://www.csdn.net/tag/python" target="_blank" class="blog-tage-red">python</a> 
                <a href="http://www.csdn.net/tag/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" target="_blank" class="blog-tage-red">面向对象</a> 
                <a href="http://www.csdn.net/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" class="blog-tage-red">设计模式</a> 
                <a href="http://www.csdn.net/tag/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80" target="_blank" class="blog-tage-red">动态语言</a> 
        </dd>
    </dl> 


<dl class="blog-ass-articl tracking-ad" data-mod="popu_36" id="res-relatived"> 
     <dt><span>猜你在找</span></dt>    
<dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/l344431432/article/details/12677131" title="shell脚本删除旧日志文件" strategy="CFRecommendAlgorithm" target="_blank">shell脚本删除旧日志文件</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/mchdba/article/details/38943339" title="Sqlite -- Sqlite在WindowsLinux 和 Mac OS X 上的安装过程" strategy="CFRecommendAlgorithm" target="_blank">Sqlite -- Sqlite在WindowsLinux 和 Mac OS X 上的安装过程</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/openXMPP/article/details/8629846" title="python里有关static变量的实现方法" strategy="CFRecommendAlgorithm" target="_blank">python里有关static变量的实现方法</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/hnxymjj/article/details/7980742" title="用C语言实现python的扩展模块" strategy="CFRecommendAlgorithm" target="_blank">用C语言实现python的扩展模块</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/yincheng01/article/details/39050099" title="Qt入门6Qt的界面布局" strategy="CFRecommendAlgorithm" target="_blank">Qt入门6Qt的界面布局</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/sunboy_2050/article/details/8476621" title="linux awk 运算符" strategy="CFRecommendAlgorithm" target="_blank">linux awk 运算符</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/ORZ_zero/article/details/8998770" title="Tornado getpost请求异步处理框架分析" strategy="CFRecommendAlgorithm" target="_blank">Tornado getpost请求异步处理框架分析</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/sunxinhere/article/details/7965136" title="流式计算Twitter Storm源代码分析之Topology的执行过程" strategy="CFRecommendAlgorithm" target="_blank">流式计算Twitter Storm源代码分析之Topology的执行过程</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/cnweike/article/details/6178677" title="Python 切片操作" strategy="CFRecommendAlgorithm" target="_blank">Python 切片操作</a></dd><dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="http://blog.csdn.net/u010180339/article/details/9404195" title="飘逸的python -  简明gzip模块压缩教程" strategy="CFRecommendAlgorithm" target="_blank">飘逸的python -  简明gzip模块压缩教程</a></dd></dl>
<div id="job_blog_reco">
<script src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/job_reco.js" type="text/javascript"></script>
   
     <script type="text/javascript">
         csdn.position.show({
         sourceType: "blog",
         tplType: "blogDetail",
         searchType: "detail",
         searchKey: "23341261",
             username: "datayes",
         containerId: "job_blog_reco"
        }); 
    </script>

<dl class="blog-ass-articl tracking-ad" data-mod="popu_72"><dt><span>可能感兴趣的职位</span><a href="http://job.csdn.net/" target="_blank" class="po_blg_more">更多</a></dt><dd class="po_blg_dd"><div class="po_blg_po"><a href="http://job.csdn.net/Job/Index?jobID=81731" title="Web前端开发工程师" strategy="PersonalRecommend" target="_blank">Web前端开发工程师</a></div><div class="po_blg_company"><a href="http://pr.csdn.net/enterprise/ent_home?orgid=435055" title="华智网络" target="_blank">华智网络</a></div><label class="po_blg_separator">|</label><div class="po_blg_salary"><a href="http://job.csdn.net/Job/Index?jobID=81731" target="_blank">10-15K/月</a></div></dd><dd class="po_blg_dd"><div class="po_blg_po"><a href="http://job.csdn.net/Job/Index?jobID=77324" title="Android 嵌入式系统软件工程师" strategy="PersonalRecommend" target="_blank">Android 嵌入式系统软件工程师</a></div><div class="po_blg_company"><a href="http://pr.csdn.net/enterprise/ent_home?orgid=412447" title="贝深科技 Percolata" target="_blank">贝深科技 Percolata</a></div><label class="po_blg_separator">|</label><div class="po_blg_salary"><a href="http://job.csdn.net/Job/Index?jobID=77324" target="_blank">15-20K/月</a></div></dd><dd class="po_blg_dd"><div class="po_blg_po"><a href="http://job.csdn.net/Job/Index?jobID=81726" title="社区运营经理（内容运营）" strategy="PersonalRecommend" target="_blank">社区运营经理（内容运营）</a></div><div class="po_blg_company"><a href="http://pr.csdn.net/enterprise/ent_home?orgid=389811" title="北京易掌云峰科技有限公司" target="_blank">北京易掌云峰科技有限公司</a></div><label class="po_blg_separator">|</label><div class="po_blg_salary"><a href="http://job.csdn.net/Job/Index?jobID=81726" target="_blank">10-15K/月</a></div></dd><dd class="po_blg_dd"><div class="po_blg_po"><a href="http://job.csdn.net/Job/Index?jobID=81023" title="Python 后端软件工程师" strategy="PersonalRecommend" target="_blank">Python 后端软件工程师</a></div><div class="po_blg_company"><a href="http://pr.csdn.net/enterprise/ent_home?orgid=412447" title="贝深科技 Percolata" target="_blank">贝深科技 Percolata</a></div><label class="po_blg_separator">|</label><div class="po_blg_salary"><a href="http://job.csdn.net/Job/Index?jobID=81023" target="_blank">10-18K/月</a></div></dd></dl></div>

<script type="text/javascript">
    var searchtitletags = 'Python面向对象编程指南' + ',' + '面向对象编程,python,面向对象,设计模式,动态语言';
    searchService({
        index: 'blog',
        query: searchtitletags,
        from: 10,
        size: 10,
        appendTo: '#res-relatived',
        url: 'recommend',
        his: 2,
        client: "blog_cf_enhance",
        tmpl: '<dd style="background:url(http://static.blog.csdn.net/skin/default/images/blog-dot-red3.gif) no-repeat 0 10px;"><a href="#{ url }" title="#{ title }" strategy="#{ strategy }">#{ title }</a></dd>'
    });

 </script>   



    <div id="ad_cen">
   
          <script type="text/javascript">
              new Ad(4, 'ad_cen');
          </script>
    </div>
<div class="comment_class">
    <div id="comment_title" class="panel_head">
        <span class="see_comment">查看评论</span><a name="comments"></a></div>
    <div id="comment_list"><dl class="comment_item comment_topic" id="comment_item_3833025"><dt class="comment_head" floor="1">1楼 <span class="user"><a class="username" href="http://blog.csdn.net/Crazy__Programmer" target="_blank">Crazy__Programmer</a> <span class="ptime">2014-05-12 14:34发表</span>  <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#reply" class="cmt_btn reply" title="回复">[回复]</a> <span class="comment_manage" style="display:none;" commentid="3833025" username="Crazy__Programmer"> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#quote" class="cmt_btn quote" title="引用">[引用]</a> <a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#report" class="cmt_btn report" title="举报">[举报]</a></span></span></dt><dd class="comment_userface"><a href="http://blog.csdn.net/Crazy__Programmer" target="_blank"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/3_crazy__programmer.jpg" width="40" height="40"></a></dd><dd class="comment_body">学习了，总结的很好！</dd></dl><div class="clear"></div></div>
    <div id="comment_bar" style="display: none;">
    </div>
    <div id="comment_form"><a name="commentbox"></a><a name="reply"></a><a name="quote"></a><form action="http://blog.csdn.net/zhoudaxia/comment/submit?id=23341261" method="post" onsubmit="return subform(this);"><div class="commentform"><div class="panel_head">发表评论</div><ul><li class="left">用 户 名：</li><li class="right">datayes</li></ul><ul><li class="left">评论内容：</li><li class="right" style="position:relative;"><div id="ubbtools"><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#insertcode" code="code"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/code.gif" border="0" alt="插入代码" title="插入代码"></a></div><div id="lang_list" style="position: absolute; top: 28px; left: 0px; display: none;"><a class="long_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#html">HTML/XML</a><a class="long_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#objc">objective-c</a><a class="zhong_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#delphi">Delphi</a><a class="zhong_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#ruby">Ruby</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#php">PHP</a><a class="duan_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#csharp">C#</a><a style=" border-right: none;" class="duan_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#cpp">C++</a><a style=" border-bottom:none;" class="long_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#javascript">JavaScript</a><a style=" border-bottom:none;" class="long_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#vb">Visual Basic</a><a style=" border-bottom:none;" class="zhong_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#python">Python</a><a style=" border-bottom:none;" class="zhong_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#java">Java</a><a style="border-bottom:none;" class="duan_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#css">CSS</a><a style="border-bottom:none;" class="duan_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#sql">SQL</a><a style="border:none;" class="duan_name" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#plain">其它</a></div><textarea class="comment_content" name="comment_content" id="comment_content" style="width: 400px; height: 200px;"></textarea></li></ul><ul><input type="hidden" id="comment_replyId" name="comment_replyId"><input type="hidden" id="comment_userId" name="comment_userId" value="521203"><input type="hidden" id="commentId" name="commentId" value=""><input type="submit" class="comment_btn" value="提交">&nbsp;&nbsp;<span id="tip_comment" style="color: Red; display: none;"></span></ul></div></form></div>

    <div class="announce">
        * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
</div>

<script type="text/javascript">
    var fileName = '23341261';
    var commentscount = 1;
    var islock = false
</script>
<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/comment.js"></script>
    <div id="ad_bot">
    </div>
    <script type="text/javascript">
    new Ad(5, 'ad_bot');
    </script>
<div id="report_dialog">
</div>

<div id="d-top" style="bottom:60px;">
        <a id="quick-reply" class="btn btn-top q-reply" title="快速回复" style="display:none;">
            <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/blog-icon-reply.png" alt="快速回复">
        </a>    

    <a id="d-top-a" class="btn btn-top backtop" style="display: none;" title="返回顶部" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_huidaodingbu&#39;])">         
         <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/top.png" alt="TOP">
    </a>
</div>
<script type="text/javascript">
    $(function ()
    {
        $("#ad_frm_0").height("90px");
        
        setTimeout(function(){
            $("#ad_frm_2").height("200px");
        },1000);
        
        /*
        if($("#comment_content").length>0)
        {
            $("#quick-reply").show();

            $("#quick-reply").click(function(){
                setEditorFocus();
            });
        }       
     
        var d_top = $('#d-top-a');

        document.onscroll = function ()
        {
            var scrTop = (document.body.scrollTop || document.documentElement.scrollTop);
            if (scrTop > 500)
            {
                d_top.show();
            } else
            {
                d_top.hide();
            }
        }
        $('#d-top-a').click(function ()
        {
            scrollTo(0, 0);
            this.blur();
            return false;
        });
        */
    });
  
</script>
<style type="text/css">
    .tag_list
    {
        background: none repeat scroll 0 0 #FFFFFF;
        border: 1px solid #D7CBC1;
        color: #000000;
        font-size: 12px;
        line-height: 20px;
        list-style: none outside none;
        margin: 10px 2% 0 1%;
        padding: 1px;
    }
    .tag_list h5
    {
        background: none repeat scroll 0 0 #E0DBD3;
        color: #47381C;
        font-size: 12px;
        height: 24px;
        line-height: 24px;
        padding: 0 5px;
        margin: 0;
    }
    .tag_list h5 a
    {
        color: #47381C;
    }
    .classify
    {
        margin: 10px 0;
        padding: 4px 12px 8px;
    }
    .classify a
    {
        margin-right: 20px;
        white-space: nowrap;
    }
</style>
<div class="tag_list">
    <h5>
        <a href="http://www.csdn.net/tag/" target="_blank">核心技术类目</a></h5>
    <div class="classify">
<a title="全部主题" href="http://www.csdn.net/tag" target="_blank" onclick="LogClickCount(this,336);">全部主题</a>
<a title="Hadoop" href="http://g.csdn.net/5272865" target="_blank" onclick="LogClickCount(this,336);">Hadoop</a>
<a title="AWS" href="http://g.csdn.net/5272866" target="_blank" onclick="LogClickCount(this,336);">AWS</a>
<a title="移动游戏" href="http://g.csdn.net/5272870" target="_blank" onclick="LogClickCount(this,336);">移动游戏</a>
<a title="Java" href="http://g.csdn.net/5272871" target="_blank" onclick="LogClickCount(this,336);">Java</a>
<a title="Android" href="http://g.csdn.net/5272872" target="_blank" onclick="LogClickCount(this,336);">Android</a>
<a title="iOS" href="http://g.csdn.net/5272873" target="_blank" onclick="LogClickCount(this,336);">iOS</a>
<a title="Swift" href="http://g.csdn.net/5272868" target="_blank" onclick="LogClickCount(this,336);">Swift</a>
<a title="智能硬件" href="http://g.csdn.net/5272869" target="_blank" onclick="LogClickCount(this,336);">智能硬件</a>
<a title="Docker" href="http://g.csdn.net/5272867" target="_blank" onclick="LogClickCount(this,336);">Docker</a>
<a title="OpenStack" href="http://g.csdn.net/5272925" target="_blank" onclick="LogClickCount(this,336);">OpenStack</a>
<a title="VPN" href="http://www.csdn.net/tag/vpn" target="_blank" onclick="LogClickCount(this,336);">VPN</a>
<a title="Spark" href="http://g.csdn.net/5272924" target="_blank" onclick="LogClickCount(this,336);">Spark</a>
<a title="ERP" href="http://www.csdn.net/tag/erp" target="_blank" onclick="LogClickCount(this,336);">ERP</a>
<a title="IE10" href="http://www.csdn.net/tag/ie10" target="_blank" onclick="LogClickCount(this,336);">IE10</a>
<a title="Eclipse" href="http://www.csdn.net/tag/eclipse" target="_blank" onclick="LogClickCount(this,336);">Eclipse</a>
<a title="CRM" href="http://www.csdn.net/tag/crm" target="_blank" onclick="LogClickCount(this,336);">CRM</a>
<a title="JavaScript" href="http://www.csdn.net/tag/javascript" target="_blank" onclick="LogClickCount(this,336);">JavaScript</a>
<a title="数据库" href="http://www.csdn.net/tag/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" onclick="LogClickCount(this,336);">数据库</a>
<a title="Ubuntu" href="http://www.csdn.net/tag/ubuntu" target="_blank" onclick="LogClickCount(this,336);">Ubuntu</a>
<a title="NFC" href="http://www.csdn.net/tag/nfc" target="_blank" onclick="LogClickCount(this,336);">NFC</a>
<a title="WAP" href="http://www.csdn.net/tag/wap" target="_blank" onclick="LogClickCount(this,336);">WAP</a>
<a title="jQuery" href="http://www.csdn.net/tag/jquery" target="_blank" onclick="LogClickCount(this,336);">jQuery</a>
<a title="BI" href="http://www.csdn.net/tag/bi" target="_blank" onclick="LogClickCount(this,336);">BI</a>
<a title="HTML5" href="http://www.csdn.net/tag/html5" target="_blank" onclick="LogClickCount(this,336);">HTML5</a>
<a title="Spring" href="http://www.csdn.net/tag/spring" target="_blank" onclick="LogClickCount(this,336);">Spring</a>
<a title="Apache" href="http://www.csdn.net/tag/apache" target="_blank" onclick="LogClickCount(this,336);">Apache</a>
<a title=".NET" href="http://www.csdn.net/tag/.net" target="_blank" onclick="LogClickCount(this,336);">.NET</a>
<a title="API" href="http://www.csdn.net/tag/api" target="_blank" onclick="LogClickCount(this,336);">API</a>
<a title="HTML" href="http://www.csdn.net/tag/html" target="_blank" onclick="LogClickCount(this,336);">HTML</a>
<a title="SDK" href="http://www.csdn.net/tag/sdk" target="_blank" onclick="LogClickCount(this,336);">SDK</a>
<a title="IIS" href="http://www.csdn.net/tag/iis" target="_blank" onclick="LogClickCount(this,336);">IIS</a>
<a title="Fedora" href="http://www.csdn.net/tag/fedora" target="_blank" onclick="LogClickCount(this,336);">Fedora</a>
<a title="XML" href="http://www.csdn.net/tag/xml" target="_blank" onclick="LogClickCount(this,336);">XML</a>
<a title="LBS" href="http://www.csdn.net/tag/lbs" target="_blank" onclick="LogClickCount(this,336);">LBS</a>
<a title="Unity" href="http://www.csdn.net/tag/unity" target="_blank" onclick="LogClickCount(this,336);">Unity</a>
<a title="Splashtop" href="http://www.csdn.net/tag/splashtop" target="_blank" onclick="LogClickCount(this,336);">Splashtop</a>
<a title="UML" href="http://www.csdn.net/tag/uml" target="_blank" onclick="LogClickCount(this,336);">UML</a>
<a title="components" href="http://www.csdn.net/tag/components" target="_blank" onclick="LogClickCount(this,336);">components</a>
<a title="Windows Mobile" href="http://www.csdn.net/tag/windowsmobile" target="_blank" onclick="LogClickCount(this,336);">Windows Mobile</a>
<a title="Rails" href="http://www.csdn.net/tag/rails" target="_blank" onclick="LogClickCount(this,336);">Rails</a>
<a title="QEMU" href="http://www.csdn.net/tag/qemu" target="_blank" onclick="LogClickCount(this,336);">QEMU</a>
<a title="KDE" href="http://www.csdn.net/tag/kde" target="_blank" onclick="LogClickCount(this,336);">KDE</a>
<a title="Cassandra" href="http://www.csdn.net/tag/cassandra" target="_blank" onclick="LogClickCount(this,336);">Cassandra</a>
<a title="CloudStack" href="http://www.csdn.net/tag/cloudstack" target="_blank" onclick="LogClickCount(this,336);">CloudStack</a>
<a title="FTC" href="http://www.csdn.net/tag/ftc" target="_blank" onclick="LogClickCount(this,336);">FTC</a>
<a title="coremail" href="http://www.csdn.net/tag/coremail" target="_blank" onclick="LogClickCount(this,336);">coremail</a>
<a title="OPhone " href="http://www.csdn.net/tag/ophone" target="_blank" onclick="LogClickCount(this,336);">OPhone </a>
<a title="CouchBase" href="http://www.csdn.net/tag/couchbase" target="_blank" onclick="LogClickCount(this,336);">CouchBase</a>
<a title="云计算" href="http://www.csdn.net/tag/%E4%BA%91%E8%AE%A1%E7%AE%97" target="_blank" onclick="LogClickCount(this,336);">云计算</a>
<a title="iOS6" href="http://www.csdn.net/tag/iOS6" target="_blank" onclick="LogClickCount(this,336);">iOS6</a>
<a title="Rackspace " href="http://www.csdn.net/tag/rackspace" target="_blank" onclick="LogClickCount(this,336);">Rackspace </a>
<a title="Web App" href="http://www.csdn.net/tag/webapp" target="_blank" onclick="LogClickCount(this,336);">Web App</a>
<a title="SpringSide" href="http://www.csdn.net/tag/springside" target="_blank" onclick="LogClickCount(this,336);">SpringSide</a>
<a title="Maemo" href="http://www.csdn.net/tag/maemo" target="_blank" onclick="LogClickCount(this,336);">Maemo</a>
<a title="Compuware" href="http://www.csdn.net/tag/compuware" target="_blank" onclick="LogClickCount(this,336);">Compuware</a>
<a title="大数据" href="http://www.csdn.net/tag/%E5%A4%A7%E6%95%B0%E6%8D%AE" target="_blank" onclick="LogClickCount(this,336);">大数据</a>
<a title="aptech" href="http://www.csdn.net/tag/aptech" target="_blank" onclick="LogClickCount(this,336);">aptech</a>
<a title="Perl" href="http://www.csdn.net/tag/perl" target="_blank" onclick="LogClickCount(this,336);">Perl</a>
<a title="Tornado" href="http://www.csdn.net/tag/tornado" target="_blank" onclick="LogClickCount(this,336);">Tornado</a>
<a title="Ruby" href="http://www.csdn.net/tag/ruby" target="_blank" onclick="LogClickCount(this,336);">Ruby</a>
<a title="Hibernate" href="http://www.csdn.net/hibernate" target="_blank" onclick="LogClickCount(this,336);">Hibernate</a>
<a title="ThinkPHP" href="http://www.csdn.net/tag/thinkphp" target="_blank" onclick="LogClickCount(this,336);">ThinkPHP</a>
<a title="HBase" href="http://www.csdn.net/tag/hbase" target="_blank" onclick="LogClickCount(this,336);">HBase</a>
<a title="Pure" href="http://www.csdn.net/tag/pure" target="_blank" onclick="LogClickCount(this,336);">Pure</a>
<a title="Solr" href="http://www.csdn.net/tag/solr" target="_blank" onclick="LogClickCount(this,336);">Solr</a>
<a title="Angular" href="http://www.csdn.net/tag/angular" target="_blank" onclick="LogClickCount(this,336);">Angular</a>
<a title="Cloud Foundry" href="http://www.csdn.net/tag/cloudfoundry" target="_blank" onclick="LogClickCount(this,336);">Cloud Foundry</a>
<a title="Redis" href="http://www.csdn.net/tag/redis" target="_blank" onclick="LogClickCount(this,336);">Redis</a>
<a title="Scala" href="http://www.csdn.net/tag/scala" target="_blank" onclick="LogClickCount(this,336);">Scala</a>
<a title="Django" href="http://www.csdn.net/tag/django" target="_blank" onclick="LogClickCount(this,336);">Django</a>
<a title="Bootstrap" href="http://www.csdn.net/tag/bootstrap" target="_blank" onclick="LogClickCount(this,336);">Bootstrap</a>
    </div>
</div>

<div id="pop_win" style="display:none ;position: absolute; z-index: 10000; border: 1px solid rgb(220, 220, 220); top: 222.5px; left: 630px; opacity: 1; background: none 0px 0px repeat scroll rgb(255, 255, 255);">
    
</div>
<div id="popup_mask"></div>
<style>
    #popup_mask
    {
        position: absolute;
        width: 100%;
        height: 100%;
        background: #000;
        z-index: 9999;
        left: 0px;
        top: 0px;
        opacity: 0.3;
        filter: alpha(opacity=30);
        display: none;
    }

</style>




<script type="text/javascript">
    $(function(){
        setTimeout(function(){
            $(".comment_body:contains('回复')").each(function(index,item){
                var u=$(this).text().split('：')[0].toString().replace("回复","")
                var thisComment=$(this);
                if(u)
                {
                    $.getJSON("https://passport.csdn.net/get/nick?callback=?", {users: u}, function(a) {
                        if(a!=null&&a.data!=null&&a.data.length>0)
                        {
                            nick=a.data[0].n; 
                            if(u!=nick)
                            {
                                thisComment.text(thisComment.text().replace(u,nick));  
                            }
                        }       
                    });  
                }
            });
        },200);  
        
        setTimeout(function(){
            $("a img[src='http://js.tongji.linezing.com/stats.gif']").parent().css({"position":"absolute","left":"50%"});
        },300);
    });

    function loginbox(){
        var $logpop=$("#pop_win");
        $logpop.html('<iframe src="https://passport.csdn.net/account/loginbox?service=http://static.blog.csdn.net/callback.htm" frameborder="0" height="600" width="400" scrolling="no"></iframe>');

        $('#popup_mask').css({
            opacity: 0.5,
            width: $( document ).width() + 'px',
            height:  $( document ).height() + 'px'
        });
        $('#popup_mask').css("display","block");
 
        $logpop.css( {
            top: ($( window ).height() - $logpop.height())/ 2  + $( window 
       ).scrollTop() + 'px',
            left:($( window ).width() - $logpop.width())/ 2
        } );
 
        setTimeout( function () {
            $logpop.show();
            $logpop.css( {
                opacity: 1
            } );
        }, 200 );
 
        $('#popup_mask').unbind("click");
        $('#popup_mask').bind("click", function(){
            $('#popup_mask').hide();
            var $clopop = $("#pop_win");
            $("#common_ask_div_sc").css("display","none");
            $clopop.css( {
                opacity: 0
            } );
            setTimeout( function () {
                $clopop.hide();
            }, 350 );
            return false;
        });
    }    

</script>
                        <div class="clear">
                        </div>
                    </div>                   
                
            </div>
            <div id="side">
    <div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/zhoudaxia" target="_blank">
    <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/1_zhoudaxia.jpg" title="访问我的空间" style="max-width:90%">
    </a>
    <br>
    <span><a href="http://my.csdn.net/zhoudaxia" class="user_name" target="_blank">zhoudaxia</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_guanzhu&#39;])"></a>

 <a href="javascript:void(0);" class="letter" title="[发私信]" onclick="window.open(&#39;http://msg.csdn.net/letters/model?receiver=zhoudaxia&#39;,&#39;_blank&#39;,&#39;height=350,width=700&#39;);_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_sixin&#39;])"></a>  
</div>
<div id="blog_medal">
                <div id="bms_box">
               </div>
</div>
<ul id="blog_rank">
    <li>访问：<span>396961次</span></li>
    <li>积分：<span>6420</span> </li>    
    <li>等级： <span style="position:relative;display:inline-block;z-index:1">
            <img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/blog6.png" alt="" style="vertical-align: middle;" id="leveImg">
            <div id="smallTittle" style=" position: absolute;  left: -24px;  top: 25px;  text-align: center;  width: 101px;  height: 32px;  background-color: #fff;  line-height: 32px;  border: 2px #DDDDDD solid;  box-shadow: 0px 2px 2px rgba (0,0,0,0.1);  display: none;   z-index: 999;">
            <div style="left: 42%;  top: -8px;  position: absolute;  width: 0;  height: 0;  border-left: 10px solid transparent;  border-right: 10px solid transparent;  border-bottom: 8px solid #EAEAEA;"></div>
            积分：6420 </div>
        </span>  </li>
    <li>排名：<span>第1211名</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>162篇</span></li>
    <li>转载：<span>76篇</span></li>
    <li>译文：<span>68篇</span></li>
    <li>评论：<span>96条</span></li>
</ul>
</ul>
</div>


<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字"></span>
        <input id="btnSubmit" type="button" value="搜索" title="search in blog">
        <input type="hidden" name="q" id="inputQ">
        <input type="hidden" name="t" value="blog">
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div>

<script type="text/javascript">
    $(function () {
        $("#btnSubmit").click(function () {           
            search();
        });

        $("#frmSearch").submit(function () {
            search();
            return false;
        });

        function search()
        {
            var url = "http://so.csdn.net/so/search/s.do?q=" + encodeURIComponent($("#inputSearch").val()) + "&u=" + username + "&t=blog";
            window.location.href = url;
        }   
    });
</script>
<div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1393635" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">OpenStack&amp;云计算架构</a><span>(3)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1393633" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Hadoop&amp;大数据分析</a><span>(12)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1424066" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Nginx&amp;高性能服务器架构</a><span>(17)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1412495" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">NoSQL运动&amp;数据库</a><span>(6)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/649693" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Web&amp;分布式架构</a><span>(23)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/2159417" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Java&amp;Java EE架构</a><span>(42)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/2375005" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Spring探索</a><span>(0)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1806307" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">浏览器内核</a><span>(3)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/2364489" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Android&amp;移动浪潮</a><span>(0)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1399965" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">架构&amp;设计之道</a><span>(14)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1368088" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">产品经理&amp;敏捷管理实践</a><span>(6)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/2367785" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">持续集成&amp;持续交付</a><span>(1)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/553204" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">算法与数据结构</a><span>(20)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1083057" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Linux内核探索</a><span>(21)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/553200" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Linux编程与管理实践</a><span>(21)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/597014" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">C语言&amp;嵌入式</a><span>(24)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/553198" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">C++语言&amp;面向对象</a><span>(29)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/2364421" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">Python&amp;动态语言探索</a><span>(10)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1249122" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">开源库探索系列</a><span>(10)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/1278757" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">SQLite剖析系列</a><span>(10)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/2364453" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">DBM数据库剖析系列</a><span>(17)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/553201" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">桌面应用开发</a><span>(6)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/558417" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">计算机网络技术</a><span>(4)</span>
            </li>
             <li>
                <a href="http://blog.csdn.net/zhoudaxia/article/category/553205" onclick="_gaq.push([&#39;_trackEvent&#39;,&#39;function&#39;, &#39;onclick&#39;, &#39;blog_articles_wenzhangfenlei&#39;]); ">职场&amp;业界洞察</a><span>(6)</span>
            </li>
</ul>
</div><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list"><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2014/09">2014年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2014/07">2014年07月</a><span>(20)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2014/06">2014年06月</a><span>(20)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2014/05">2014年05月</a><span>(18)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2014/04">2014年04月</a><span>(24)</span></li><span class="hidelist" style="display:none;"><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2014/03">2014年03月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/12">2013年12月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/11">2013年11月</a><span>(13)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/10">2013年10月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/06">2013年06月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/05">2013年05月</a><span>(11)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/04">2013年04月</a><span>(13)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/03">2013年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/02">2013年02月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2013/01">2013年01月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/12">2012年12月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/11">2012年11月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/10">2012年10月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/09">2012年09月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/08">2012年08月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/03">2012年03月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2012/01">2012年01月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2011/08">2011年08月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2011/01">2011年01月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/12">2010年12月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/10">2010年10月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/09">2010年09月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/08">2010年08月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/07">2010年07月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/06">2010年06月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/05">2010年05月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/04">2010年04月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/03">2010年03月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/02">2010年02月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2010/01">2010年01月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2009/11">2009年11月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2009/10">2009年10月</a><span>(18)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2009/09">2009年09月</a><span>(18)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2009/08">2009年08月</a><span>(9)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2009/07">2009年07月</a><span>(26)</span></li><li><a href="http://blog.csdn.net/zhoudaxia/article/month/2009/06">2009年06月</a><span>(13)</span></li></span><div id="archive_list_button" class="list_closed">展开</div></div>
</ul>
</div>
<div id="hotarticls" class="panel">
<ul class="panel_head">
    <span>       
阅读排行    </span>
</ul>

<ul class="panel_body itemlist">
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5271250" title="搭建Eclipse PHP开发环境">搭建Eclipse PHP开发环境</a><span>(22816)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4256011" title="JackZhou的负责任书评：C++ Primer中文版（第4版）">JackZhou的负责任书评：C++ Primer中文版（第4版）</a><span>(9164)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4325069" title="解决Ubuntu不能上无线网的问题">解决Ubuntu不能上无线网的问题</a><span>(8378)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5267431" title="搭建Eclipse C/C++开发环境">搭建Eclipse C/C++开发环境</a><span>(6619)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/6666683" title="Linux内核启动过程分析">Linux内核启动过程分析</a><span>(6573)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5919699" title="SMBIOS介绍(1)：概述">SMBIOS介绍(1)：概述</a><span>(6557)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/8801769" title="Hadoop学习路线图">Hadoop学习路线图</a><span>(6508)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/7172020" title="Linux安装程序Anaconda分析">Linux安装程序Anaconda分析</a><span>(6336)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/6666872" title="Linux init程序分析">Linux init程序分析</a><span>(4980)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5919871" title="SMBIOS介绍(2)：结构表">SMBIOS介绍(2)：结构表</a><span>(4423)</span>
</li>
</ul>
</div>
<div id="hotarticls2" class="panel">
<ul class="panel_head"><span>评论排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5473784" title="C++语言的黑客行为">C++语言的黑客行为</a><span>(7)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4256011" title="JackZhou的负责任书评：C++ Primer中文版（第4版）">JackZhou的负责任书评：C++ Primer中文版（第4版）</a><span>(5)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4647136" title="C标准库源码解剖(7)：日期与时间函数time.h">C标准库源码解剖(7)：日期与时间函数time.h</a><span>(5)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/8801769" title="Hadoop学习路线图">Hadoop学习路线图</a><span>(4)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5919699" title="SMBIOS介绍(1)：概述">SMBIOS介绍(1)：概述</a><span>(4)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4580438" title="我的C++实践(18)：多态的双重分派实现">我的C++实践(18)：多态的双重分派实现</a><span>(3)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/5640595" title="变位词问题">变位词问题</a><span>(3)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4503451" title="参加CSDN上海英雄会的感受">参加CSDN上海英雄会的感受</a><span>(2)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/4361194" title="GNU Autotools的研究">GNU Autotools的研究</a><span>(2)</span>
</li>
<li>
<a href="http://blog.csdn.net/zhoudaxia/article/details/6666914" title="Linux init程序分析(续)">Linux init程序分析(续)</a><span>(2)</span>
</li>
</ul>
</div>
<div id="homepageArticles" class="panel tracking-ad" data-mod="popu_4">
<ul class="panel_head"><span>推荐文章</span></ul>
<ul class="panel_body" id="ad_commend"></ul>
</div>
<script type="text/javascript">
 new Ad(12, 'ad_commend');
</script><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/23176731#comments">Python字符编码与正则表达式指南</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/u010850027" class="user_name">丁国华</a>:
谢谢分享 学习了`(*∩_∩*)′
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/8801769#comments">Hadoop学习路线图</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/iDoPlay" class="user_name">iDoPlay</a>:
多谢分享！
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/26454421#comments">深入理解JVM内幕</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/zapdos" class="user_name">zapdos</a>:
不错
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/7909106#comments">Linux内存管理(4)：内存映射机制</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/handong19891112" class="user_name">handong19891112</a>:
virt_to_page 这个宏的注释不对吧？？ 应该还是内核虚拟地址到页的转换而不是用户空间。
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/5271250#comments">搭建Eclipse PHP开发环境</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/googlevsbing" class="user_name">googlevsbing</a>:
友情提示：在apache2.4中目录授权已经发生改变,需要将   Order allow,deny ...
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/8034606#comments">zlib库剖析(1)：实现概览</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/wincmder" class="user_name">wincmder</a>:
Shameless plug:WinCmder - Grouping Desktop Iconsht...
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/5829388#comments">回溯法</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/xie376450483" class="user_name">seanyxie</a>:
这个附带 回溯法的源码实现希望有帮助http://www.seanyxie.com/八皇后问题（回溯...
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/4634338#comments">C标准库源码解剖(3)：字符处理函数ctype.h和wctype.h</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/bianchengjingling" class="user_name">心灵捕手3</a>:
您好，可以认识一下吗
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/4634338#comments">Hadoop学习路线图</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/yebai" class="user_name">yebai</a>:
你写的太好了。资料总结很好。
    </p>
    </li>
    <li>
   
         <a href="http://blog.csdn.net/zhoudaxia/article/details/4634338#comments">回溯法</a>
    <p style="margin:0px;"><a href="http://blog.csdn.net/u011327333" class="user_name">DongKhan</a>:
博主的文章真心赞
    </p>
    </li>
</ul>
</div>
    </div>
    <div class="clear">
    </div>
</div>

            <div class="clear">
            </div>
        </div>
        

<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/cnick.js"></script>
<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/newblog.min.js"></script>


<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/showblogmedal.ashx"></script>
<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/JavaScript1.js"></script><link rel="stylesheet" type="text/css" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/pub_footer_2014.css"><div class="pub_fo"><div id="pub_footerall" class="pub_footer_new"><dl><dt></dt> <dd class="foot_sub_menu"><a href="http://www.csdn.net/company/about.html" target="_blank">公司简介</a><span>|</span><a href="http://www.csdn.net/company/recruit.html" target="_blank">招贤纳士</a><span>|</span><a href="http://www.csdn.net/company/marketing.html" target="_blank">广告服务</a><span>|</span><a href="http://www.csdn.net/company/account.html" target="_blank">银行汇款帐号</a><span>|</span><a href="http://www.csdn.net/company/contact.html" target="_blank">联系方式</a><span>|</span><a href="http://www.csdn.net/company/statement.html" target="_blank">版权声明</a><span>|</span><a href="http://www.csdn.net/company/layer.html" target="_blank">法律顾问</a><span>|</span><a href="mailto:webmaster@csdn.net">问题报告</a><span>|</span><a target="_blank" href="http://www.csdn.net/friendlink.html">合作伙伴</a><span>|</span><a href="http://bbs.csdn.net/forums/Service" target="_blank">论坛反馈</a></dd><dd class="foot_contact"><a href="http://wpa.qq.com/msgrd?v=3&uin=2355263776&site=qq&menu=yes" target="_blank" class="qq">网站客服</a><a href="http://wpa.qq.com/msgrd?v=3&uin=2251809102&site=qq&menu=yes" target="_blank" class="qq">杂志客服</a><a href="http://e.weibo.com/csdnsupport/profile" target="_blank" class="weibo">微博客服</a><a href="mailto:webmaster@csdn.net" class="email" title="联系邮箱">webmaster@csdn.net</a><span class="phone" title="服务热线">400-600-2320</span><span class="interval">|</span><span>北京创新乐知信息技术有限公司 版权所有</span><span class="interval">|</span><span>江苏乐知网络技术有限公司 提供商务支持</span></dd><dd class="foot_copyright"><span>京&nbsp;ICP&nbsp;证&nbsp;070598&nbsp;号</span><span class="interval">|</span><span>Copyright © 1999-2014, CSDN.NET, All Rights Reserved&nbsp;</span><a href="http://www.hd315.gov.cn/beian/view.asp?bianhao=010202001032100010" target="_blank"><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/gongshang_logos.gif" alt="GongshangLogo" title=""></a></dd></dl></div></div><div id="note1" class="csdn_note" style="display:none; position:absolute; z-index:9999; width:440px">  <span class="notice_top_arrow"><span class="inner"></span></span>  <div class="box"></div></div><div class="csdn_notice_tip" style="display: none; position: absolute; z-index: 9990; width: 170px; left: -72px; top: 18px;">  <iframe src="about:blank" frameborder="0" scrolling="no" style="z-index:-1;position:absolute;top:0;left:0;width:100%;height:100%;background:transparent"></iframe>  <div class="tip_text">您有<strong>0</strong>条新通知</div>  <a href="javascript:void 0" class="close2"></a></div><script id="noticeScript" type="text/javascript" btnid="header_notice_num" wrapid="note1" count="5" subcount="5" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/notify.js"></script>

<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script><img src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/pv.aspx" border="0" width="0" height="0">
<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/counter.js"></script><script type="text/javascript" charset="UTF-8" src="http://message.csdn.net/msg.popup.js"></script>
<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>
<script type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/count.js"></script><iframe src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/logs.htm" frameborder="0" width="0" height="0"></iframe>
<script type="text/javascript">
    $(function () {
        function __get_code_toolbar(snippet_id) {
            return $("<a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "' target='_blank' title='在CODE上查看代码片' style='text-indent:0;'><img src='https://code.csdn.net/assets/CODE_ico.png' width=12 height=12 alt='在CODE上查看代码片' style='position:relative;top:1px;left:2px;'/></a>"
                    + "<a href='https://code.csdn.net/snippets/"
                    + snippet_id
                    + "/fork' target='_blank' title='派生到我的代码片'  style='text-indent:0;'><img src='https://code.csdn.net/assets/ico_fork.svg' width=12 height=12 alt='派生到我的代码片' style='position:relative;top:2px;left:2px;'/></a>");
        }
        
        $("[code_snippet_id]").each(function () {
            __s_id = $(this).attr("code_snippet_id");
            if (__s_id != null && __s_id != "" && __s_id != 0 && parseInt(__s_id) > 70020) {
                __code_tool = __get_code_toolbar(__s_id);
                $(this).prev().find(".tools").append(__code_tool);
            }
        });
    });
</script>

    </div><input type="hidden" id="aa_g_data_ids">
      <!--new top-->
    
    <script id="csdn-toolbar-id" btnid="header_notice_num" wrapid="note1" count="5" subcount="5" type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/toolbar.js"></script>
     <!--new top-->
   
    <link href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ask_float_block.css" type="text/css" rel="stylesheet">
    <script language="JavaScript" type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/wmd.js"></script>
    <script language="JavaScript" type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/showdown.js"></script>
    <script language="JavaScript" type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/prettify.js"></script>
    <script language="JavaScript" type="text/javascript" src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ask_float_block.js"></script>



<div id="tag-suggest-pop">
  <div class="relative">
    <div class="close"></div>
    <div class="content"></div>
  </div>
</div><link rel="stylesheet" type="text/css" media="screen" href="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/ask_float_fonts_css-6b30a53970eb5c3a2a045e3df585b475.css"><div data-mod="popu_64" class="tracking-ad" chg-blk="0"><a id="com-ask-float-block" title="提问按钮" style="top:555px"></a><a id="com-quick-reply" title="快速回复" style="top:596px"></a><a id="com-d-top-a" style="top:637px" title="返回顶部" onclick=""></a> </div><div class="pop_edit ask_second comm_ask_second"><h3>提问</h3><span class="ask_float_span">您的问题将会被发布在“<a class="ask_float_channel" href="http://ask.csdn.net/" target="_blank" style="cursor:pointer">技术问答</a>”频道</span><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" nodetype="close" class="close">×</a><div class="context"><div class="err_div"><span class="err_ico"></span><span class="err_txt">该问题已存在，请勿重复提问</span></div><div class="input_div"><input id="askInputSecond" type="text" style="font-size:14px;" placeholder="问题标题"></div><div class="cm_box"><div class="cm_dialog"></div> <div class="pop_cm cm_add_link"><input type="text" placeholder="链接内容" id="af_cm_link_txt"><input type="text" placeholder="链接地址" id="af_cm_link_url"><input type="text" placeholder="链接提示" id="af_cm_link_tit"><div class="text-right"><span class="btn btn-default btn-sm" id="add_link_btn">插入链接</span> </div> </div><div class="pop_cm cm_add_img"><div class="nav-tabs"><a class="img_tab active" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#tab_upload">本地上传</a><a class="img_tab" href="http://blog.csdn.net/zhoudaxia/article/details/23341261#tab_weburl">网络图片</a></div><div class="tab_panel active" id="tab_upload"><div class="set_img"><iframe src="./Python面向对象编程指南 - Jack Zhou的专栏 - 博客频道 - CSDN.NET_files/upload.htm"></iframe></div></div><div class="tab_panel" id="tab_weburl"><input type="text" placeholder="图片地址" id="af_cm_img_url"><input type="text" placeholder="图片说明" id="af_cm_img_alt"><div class="text-right"><span class="btn btn-default btn-sm" id="add_img_btn">插入图片</span> </div></div> </div></div> <textarea id="editor_all" rows="8" style="display: none;"></textarea><div class="editor-toolbar"><i class="separator">|</i><a class="icon-headline" title="标题一（Ctrl+Alt+1）"></a><a class="icon-heading" title="标题二（Ctrl+Alt+2）"></a><a class="icon-bold" title="粗体（Ctrl+B）"></a><a class="icon-italic" title="斜体（Ctrl+I）"></a><i class="separator">|</i><a class="icon-quote-left" title="引用（Ctrl+’）"></a><a class="icon-code" title="插入代码片（Ctrl+,）"></a><a class="icon-list-ul" title="无序列表（Ctrl+L）"></a><a class="icon-list-ol" title="有序列表（Ctrl+Alt+L）"></a><i class="separator">|</i><a class="icon-link" title="添加链接（Ctrl+K）"></a><a class="icon-picture" title="添加图片（Ctrl+Alt+I）"></a><i class="separator">|</i><a class="icon-reply" title="撤退（Ctrl+Z）"></a><a class="icon-share-alt" title="前进（Ctrl+Shift+Z）"></a><i class="separator">|</i><a class="icon-info" href="http://ask.csdn.net/pages/markdown" target="_blank" title="markdown语法参考"></a><a class="icon-preview" title="预览"></a><i class="separator">|</i></div><div class="CodeMirror cm-s-paper CodeMirror-focused"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none; font-size: 4px;" tabindex="0"></textarea></div><div class="CodeMirror-hscrollbar"><div style="height: 1px;"></div></div><div class="CodeMirror-vscrollbar"><div style="width: 1px;"></div></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="min-width: 33px;"><div style="position: relative;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre>&nbsp;<span style="display: inline-block; width: 1px; margin-right: -1px;">&nbsp;</span></pre></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code"></div><div class="CodeMirror-cursor" style="visibility: hidden;">&nbsp;</div><div class="CodeMirror-cursor CodeMirror-secondarycursor" style="visibility: hidden;">&nbsp;</div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px;"></div><div class="CodeMirror-gutters" style="display: none;"></div></div></div><div class="editor-statusbar"><span class="lines">0</span><span class="words">0</span><span class="cursor">0:0</span></div><div class="div_tags clearfix"><div id="divSearchTags" class="tags_con"><input type="text"></div><input type="hidden" name="txtSearchTags"></div><div id="ask2_tagRecomm_div" class="drt_tagRecomm tracking-ad" data-mod="popu_73"><span class="drt_tit">推荐标签：</span></div></div><div class="success"><div class="left_area"><input id="chk_cb" type="checkbox"><span class="wyxs">我要悬赏</span><input id="cb_num" class="cb_num" readonly="true"><span class="phib_rii"><span> 币</span></span></div><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" nodetype="cancel" class="cancel">取消</a><a href="http://blog.csdn.net/zhoudaxia/article/details/23341261#" nodetype="ok" class="ok">发布</a></div></div><div id="common_ask_div_sc" class="searchContainer"><div class="sTitle">可能存在类似的问题：</div><div class="sFooter"><a class="sFirstNewAsk">我想提一个新问题</a></div></div></body></html>