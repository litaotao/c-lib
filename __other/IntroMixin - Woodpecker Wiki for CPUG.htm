<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0045)http://wiki.woodpecker.org.cn/moin/IntroMixin -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="robots" content="index,nofollow">

<title>IntroMixin - Woodpecker Wiki for CPUG</title>
<script type="text/javascript" async="" src="./IntroMixin - Woodpecker Wiki for CPUG_files/ga.js"></script><script type="text/javascript" src="./IntroMixin - Woodpecker Wiki for CPUG_files/common.js"></script><style type="text/css"></style>

<script type="text/javascript">
<!--
var search_hint = "搜索";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="./IntroMixin - Woodpecker Wiki for CPUG_files/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="./IntroMixin - Woodpecker Wiki for CPUG_files/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="./IntroMixin - Woodpecker Wiki for CPUG_files/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="./IntroMixin - Woodpecker Wiki for CPUG_files/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/htdocs/gugiel/css/msie.css">
<![endif]-->


<link rel="alternate" title="Woodpecker Wiki for CPUG: IntroMixin" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?diffs=1&show_att=1&action=rss_rc&unique=0&page=IntroMixin&ddiffs=1" type="application/rss+xml">


<link rel="Start" href="http://wiki.woodpecker.org.cn/moin/%E9%A6%96%E9%A1%B5">
<link rel="Alternate" title="维基标记" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=raw">
<link rel="Alternate" media="print" title="打印视图" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=print">
<link rel="Search" href="http://wiki.woodpecker.org.cn/moin/FindPage">
<link rel="Index" href="http://wiki.woodpecker.org.cn/moin/TitleIndex">
<link rel="Glossary" href="http://wiki.woodpecker.org.cn/moin/WordIndex">
<link rel="Help" href="http://wiki.woodpecker.org.cn/moin/HelpOnFormatting">
</head>

<body lang="zh" dir="ltr">

<div id="header">
<div id="logo"><a href="http://wiki.woodpecker.org.cn/moin/%E9%A6%96%E9%A1%B5"><img src="./IntroMixin - Woodpecker Wiki for CPUG_files/woodpecker.png" alt="Woodpecker Wiki for CPUG"></a></div>
<h1 id="locationline">

<span id="pagelocation"><a class="backlink" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=fullsearch&context=180&value=linkto%3A%22IntroMixin%22" rel="nofollow" title="点击对这个标题进行全文检索">IntroMixin</a></span>
</h1>
<div id="utils">

<form id="searchform" method="get" action="./IntroMixin - Woodpecker Wiki for CPUG_files/IntroMixin - Woodpecker Wiki for CPUG.htm">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput" style="display: none;">搜索：</label>
<input id="searchinput" type="text" name="value" value="" size="20" onfocus="searchFocus(this)" onblur="searchBlur(this)" onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search" class="disabled">
<input id="titlesearch" name="titlesearch" type="submit" value="标题" alt="Search Titles" disabled="">
<input id="fullsearch" name="fullsearch" type="submit" value="正文" alt="Search Full Text" disabled="">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="username"><a href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=login" id="login" rel="nofollow">登录</a></div>
</div>

<ul id="navibar">
<li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/%E9%A6%96%E9%A1%B5">首页</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/CPUG">CPUG</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/OBP">OpenBookProject</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/WoodpeckerHackers">行者堂</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/RecentChanges">更新</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/FindPage">搜索</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/HelpContent">帮助</a></li><li class="current"><a href="./IntroMixin - Woodpecker Wiki for CPUG_files/IntroMixin - Woodpecker Wiki for CPUG.htm">IntroMixin</a></li>
</ul>

<div id="pageline"><hr style="display:none;"></div>
<ul class="editbar"><li><span class="disabled">只读网页</span></li><li class="toggleCommentsButton" style="display:none;"><a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#" class="nbcomment" onclick="toggleComments();return false;">注释</a></li><li><a class="nbinfo" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=info" rel="nofollow">信息</a></li><li><a class="nbattachments" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=AttachFile" rel="nofollow">附件</a></li><li>
<form class="actionsmenu" method="GET" action="./IntroMixin - Woodpecker Wiki for CPUG_files/IntroMixin - Woodpecker Wiki for CPUG.htm">
<div>
    
    <select name="action" onchange="if ((this.selectedIndex != 0) &amp;&amp;
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="show">更多操作：</option><option value="raw">源码</option>
<option value="print">打印视图</option>
<option value="RenderAsDocbook">输出Docbook格式</option>
<option value="refresh">删除缓存</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="SpellCheck">拼写检查</option>
<option value="LikePages">相似网页</option>
<option value="LocalSiteMap">本站地图</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="RenamePage" disabled="" class="disabled">改名</option>
<option value="DeletePage" disabled="" class="disabled">删除</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">订阅</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">删除垃圾广告</option>
<option value="show" disabled="" class="disabled">恢复成此版本</option>
<option value="PackagePages">网页打包</option>
<option value="SyncPages">同步网页</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="Load">加载</option>
<option value="Save">保存</option>
<option value="SlideShow">SlideShow</option>
    </select>
    
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('更多操作：');
//-->
</script>
</form>
</li></ul>



</div>


<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span><p class="line867"><strong> <span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span></strong></p><p class="line862"><strong>-- limodou [2004-08-15 21:08:29] <span class="anchor" id="line-8"></span></strong></p><div class="table-of-contents"><p class="table-of-contents-heading"><strong>目录</strong></p><ol><li><strong>
<a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#Mix-in.2BYoBnL07Lfs0-">Mix-in技术介绍</a><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#A.2BTsBOSGYv-Mix-in.2BYoBnLw-">什么是Mix-in技术</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#A.2BV.2Fp8e3aEWJ5SoA-">基类的增加</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#A.2BUf1lcGb.2FY2I-">函数替换</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#Mix-in.2BW4mIxVH9ZXA-">Mix-in安装函数</a></li></ol></strong></li></ol></div><strong> <span class="anchor" id="line-9"></span>
<h1 id="Mix-in.2BYoBnL07Lfs0-">Mix-in技术介绍</h1>
<span class="anchor" id="line-10"></span><p class="line867"><em>Mixin可以译为混入，就是在不改变原对象的情况下对其进行扩展。本文介绍了在 Python 语言中，如何实现Mixin技术，及安装的相应技巧。</em> <span class="anchor" id="line-11"></span>
</p><h2 id="A.2BTsBOSGYv-Mix-in.2BYoBnLw-">什么是Mix-in技术</h2>
<span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span><p class="line862">Mix-in技术，中文不知道应该如何称呼，但意思好象是混入。它的作用是，在运行期间,动态改变类的基类或类的方法，从而使得类的表现可以发生变化。可以用在一个通用类接口中，根据不同的选择使用不同的低层类实现，而高层类不用发生变化。而且这一实现可以在运行过程中动态进行改变。由于我也是刚看到，大家有问题可以与我进行交流。<a class="http" href="http://www2.linuxjournal.com/lj-issues/issue84/4540.html">这就是我看到的文章的链接</a>。 <span class="anchor" id="line-14"></span><span class="anchor" id="line-15"></span></p><p class="line867">
</p><h2 id="A.2BV.2Fp8e3aEWJ5SoA-">基类的增加</h2>
<span class="anchor" id="line-16"></span><p class="line874">有一个类，  <span class="anchor" id="line-17"></span><span class="anchor" id="line-18"></span></p><p class="line867"><span class="anchor" id="line-19"></span><span class="anchor" id="line-20"></span><span class="anchor" id="line-21"></span></p><pre><span class="anchor" id="line-1"></span>class foo:
<span class="anchor" id="line-2"></span>    pass</pre><span class="anchor" id="line-22"></span><span class="anchor" id="line-23"></span><p class="line874">我可以定义另外一个类，  <span class="anchor" id="line-24"></span><span class="anchor" id="line-25"></span></p><p class="line867"><span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span><span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span></p><pre><span class="anchor" id="line-1-1"></span>class foobase:
<span class="anchor" id="line-2-1"></span>    def hello(self):
<span class="anchor" id="line-3"></span>        print "hello"</pre><span class="anchor" id="line-30"></span><span class="anchor" id="line-31"></span><p class="line874">如果我直接调用：  <span class="anchor" id="line-32"></span><span class="anchor" id="line-33"></span></p><p class="line867"><span class="anchor" id="line-34"></span><span class="anchor" id="line-35"></span><span class="anchor" id="line-36"></span></p><pre><span class="anchor" id="line-1-2"></span>&gt;&gt;&gt; obj=foo()
<span class="anchor" id="line-2-2"></span>&gt;&gt;&gt; obj.hello()</pre><span class="anchor" id="line-37"></span><span class="anchor" id="line-38"></span><p class="line874">这时你会看到出错。那么我可以这样：  <span class="anchor" id="line-39"></span><span class="anchor" id="line-40"></span></p><p class="line867"><span class="anchor" id="line-41"></span><span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><span class="anchor" id="line-44"></span></p><pre><span class="anchor" id="line-1-3"></span>&gt;&gt;&gt; foo.__bases__ +=(foobase,)
<span class="anchor" id="line-2-3"></span>&gt;&gt;&gt; obj.hello()
<span class="anchor" id="line-3-1"></span>hello</pre><span class="anchor" id="line-45"></span><span class="anchor" id="line-46"></span><p class="line862">成功了。原理是，每个类都有一个<span class="u">bases</span>属性，它是一个tuple，用来存放所有的基类。而且在运行中，可以动态改变。所以当我们向其中增加新的基类时，再次调用原来不存在的函数，由于基类中的函数已经存在了，所以这次成功了。 <span class="anchor" id="line-47"></span><span class="anchor" id="line-48"></span></p><p class="line874">这是一个最简单的应用，可以看到我们可以动态改变类的基类。有几个注意事项要说一下： <span class="anchor" id="line-49"></span><span class="anchor" id="line-50"></span></p><ol type="1"><li><p class="line891"><tt class="backtick">__bases__</tt>是一个tuple，所以增加一个值要使用tuple类型，而单个元素tuple的写法为(foobase,) <span class="anchor" id="line-51"></span></p></li><li>类必须先存在。所以，如果想使用这一技术，先要将相关的类的模块导入(import)。 <span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span></li></ol><p class="line874">由于Mix-in是一种动态技术，以多继承，对象为基础，而python正好是这样的语言，使得在python中实现这一技术非常容易。 <span class="anchor" id="line-54"></span><span class="anchor" id="line-55"></span></p><p class="line867">
</p><h2 id="A.2BUf1lcGb.2FY2I-">函数替换</h2>
<span class="anchor" id="line-56"></span><span class="anchor" id="line-57"></span><p class="line874">在前面，简单地向大家介绍了一下Mix-in技术，它实现了基类的动态增加。这样我们就可以在运行时，根据选择可以动态地增加基类，从而实现不同的目的。现在还有一个问题，就是，在基类与派生类中都有同名的函数，要如何处理呢？ <span class="anchor" id="line-58"></span><span class="anchor" id="line-59"></span></p><p class="line874">在Python中，如果派生类中有与基类同名的函数，那么调用函数时，会调用派生类的函数，而不是基类的函数，可以测试一下：  <span class="anchor" id="line-60"></span><span class="anchor" id="line-61"></span></p><p class="line867"><span class="anchor" id="line-62"></span><span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span><span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span><span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span><span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span><span class="anchor" id="line-71"></span><span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span></p><pre><span class="anchor" id="line-1-4"></span>&gt;&gt;&gt; class foobase:
<span class="anchor" id="line-2-4"></span>        def a(self):
<span class="anchor" id="line-3-2"></span>                print "hello"
<span class="anchor" id="line-4"></span>
<span class="anchor" id="line-5"></span>&gt;&gt;&gt; class foo(foobase):
<span class="anchor" id="line-6"></span>        def a(self):
<span class="anchor" id="line-7"></span>                print "foo"
<span class="anchor" id="line-8"></span>
<span class="anchor" id="line-9"></span>&gt;&gt;&gt; c=foo()
<span class="anchor" id="line-10"></span>&gt;&gt;&gt; c.a()
<span class="anchor" id="line-11"></span>foo</pre><span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><p class="line874">可以看出，执行的是foo类的函数。这样在使用Mix-in技术时，如果原来的类中存在与Mix类中同名的函数，那么Mix类中的函数不会运行，如果想对其进行替换怎么办呢？方法就是使用getattr()和setattr()函数。当然还是最简单的。 <span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span></p><p class="line874">定义两个类：  <span class="anchor" id="line-78"></span><span class="anchor" id="line-79"></span></p><p class="line867"><span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span><span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span><span class="anchor" id="line-84"></span><span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span><span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><span class="anchor" id="line-91"></span><span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span></p><pre><span class="anchor" id="line-1-5"></span>&gt;&gt;&gt; class foobase:
<span class="anchor" id="line-2-5"></span>        def a(self):
<span class="anchor" id="line-3-3"></span>                print "hello"
<span class="anchor" id="line-4-1"></span>
<span class="anchor" id="line-5-1"></span>&gt;&gt;&gt; class foo:
<span class="anchor" id="line-6-1"></span>        def a(self):
<span class="anchor" id="line-7-1"></span>                print "foo"
<span class="anchor" id="line-8-1"></span>
<span class="anchor" id="line-9-1"></span>&gt;&gt;&gt; f=getattr(foobase, "a")
<span class="anchor" id="line-10-1"></span>&gt;&gt;&gt; setattr(foo, "a", f.im_func)     #f.im_func会得到真正的函数对象
<span class="anchor" id="line-11-1"></span>&gt;&gt;&gt; c=foo()
<span class="anchor" id="line-12"></span>&gt;&gt;&gt; c.a()
<span class="anchor" id="line-13"></span>hello</pre><span class="anchor" id="line-94"></span><span class="anchor" id="line-95"></span><p class="line874">可以看到，函数被替换了。 <span class="anchor" id="line-96"></span><span class="anchor" id="line-97"></span></p><p class="line874">注意，使用dir(f)还会看到其它的属性im_class,它表示这个函数属于哪个类，im_self表示属于哪个实例。 <span class="anchor" id="line-98"></span><span class="anchor" id="line-99"></span></p><p class="line867">
</p><h2 id="Mix-in.2BW4mIxVH9ZXA-">Mix-in安装函数</h2>
<span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span><p class="line874">前面讲了基本的实现技术，下面给大家介绍一个Mix-in安装函数，这个函数是从前面所说的文章copy下来的。  <span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span></p><p class="line867"><span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><span class="anchor" id="line-108"></span><span class="anchor" id="line-109"></span><span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span><span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span><span class="anchor" id="line-114"></span><span class="anchor" id="line-115"></span><span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span><span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><span class="anchor" id="line-124"></span><span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span></p><pre><span class="anchor" id="line-1-6"></span>import types
<span class="anchor" id="line-2-6"></span>
<span class="anchor" id="line-3-4"></span>def MixIn(pyClass, mixInClass, makeAncestor=0):
<span class="anchor" id="line-4-2"></span>   if makeAncestor:
<span class="anchor" id="line-5-2"></span>     if mixInClass not in pyClass.__bases__:
<span class="anchor" id="line-6-2"></span>        pyClass.__bases__ = (mixInClass,) + pyClass.__bases__
<span class="anchor" id="line-7-2"></span>   else:
<span class="anchor" id="line-8-2"></span>     # Recursively traverse the mix-in ancestor
<span class="anchor" id="line-9-2"></span>     # classes in order to support inheritance
<span class="anchor" id="line-10-2"></span>     baseClasses = list(mixInClass.__bases__)
<span class="anchor" id="line-11-2"></span>     baseClasses.reverse()
<span class="anchor" id="line-12-1"></span>     for baseClass in baseClasses:
<span class="anchor" id="line-13-1"></span>        MixIn(pyClass, baseClass)
<span class="anchor" id="line-14"></span>
<span class="anchor" id="line-15"></span>     # Install the mix-in methods into the class
<span class="anchor" id="line-16"></span>     for name in dir(mixInClass):
<span class="anchor" id="line-17"></span>        if not name.startswith('__'):
<span class="anchor" id="line-18"></span>        # skip private members
<span class="anchor" id="line-19"></span>           member = getattr(mixInClass, name)
<span class="anchor" id="line-20"></span>           if type(member) is types.MethodType:
<span class="anchor" id="line-21"></span>               member = member.im_func
<span class="anchor" id="line-22"></span>           setattr(pyClass, name, member)</pre><span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><p class="line874">这个函数可以将某个mix-in类安装为指定类的基类，同时可以通过关键字参数指定在基类中的顺序，是最前还是最后。因为Python在处理基类时，是安顺序进行的，所以安装在最前则优先级最高。同时对于指定类的方法如果在mix-in类中存在，则将指定类中的方法替换成mix-in类中的方法。  <span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span></p><p class="line867"><span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span></p><pre><span class="anchor" id="line-1-7"></span>   if makeAncestor:
<span class="anchor" id="line-2-7"></span>     if mixInClass not in pyClass.__bases__:
<span class="anchor" id="line-3-5"></span>        pyClass.__bases__ = (mixInClass,) + pyClass.__bases__</pre><span class="anchor" id="line-135"></span><span class="anchor" id="line-136"></span><p class="line874">如果makeAncestor为1，表示是安装在最前，则首先判断在pyClass的基类中是否存在mixInClass类，如果不存在，再进行安装。  <span class="anchor" id="line-137"></span><span class="anchor" id="line-138"></span></p><p class="line867"><span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span><span class="anchor" id="line-143"></span><span class="anchor" id="line-144"></span><span class="anchor" id="line-145"></span><span class="anchor" id="line-146"></span></p><pre><span class="anchor" id="line-1-8"></span>   else:
<span class="anchor" id="line-2-8"></span>     # Recursively traverse the mix-in ancestor
<span class="anchor" id="line-3-6"></span>     # classes in order to support inheritance
<span class="anchor" id="line-4-3"></span>     baseClasses = list(mixInClass.__bases__)
<span class="anchor" id="line-5-3"></span>     baseClasses.reverse()
<span class="anchor" id="line-6-3"></span>     for baseClass in baseClasses:
<span class="anchor" id="line-7-3"></span>        MixIn(pyClass, baseClass)</pre><span class="anchor" id="line-147"></span><span class="anchor" id="line-148"></span><p class="line874">如果makeAncestor为0，并不将mixInClass安装在最后，原作者说他在实际中没有这样用的。那么它完成什么任务呢？它实际完成了一个递归，即从mixInClass的最底层的基类开始(因为mixInClass也可能是多重继承而来的)，对pyClass中也存在的函数进行替换。这样执行完毕后，mixInClass类中，包含所有基类中的函数，如果有与pyClass类中的函数重名的，都将pyClass中的函数替换成mixInClass相应的函数。（有些复杂！）  <span class="anchor" id="line-149"></span><span class="anchor" id="line-150"></span></p><p class="line867"><span class="anchor" id="line-151"></span><span class="anchor" id="line-152"></span><span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span><span class="anchor" id="line-155"></span><span class="anchor" id="line-156"></span><span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><span class="anchor" id="line-159"></span></p><pre><span class="anchor" id="line-1-9"></span>     # Install the mix-in methods into the class
<span class="anchor" id="line-2-9"></span>     for name in dir(mixInClass):
<span class="anchor" id="line-3-7"></span>        if not name.startswith('__'):
<span class="anchor" id="line-4-4"></span>        # skip private members
<span class="anchor" id="line-5-4"></span>           member = getattr(mixInClass, name)
<span class="anchor" id="line-6-4"></span>           if type(member) is types.MethodType:
<span class="anchor" id="line-7-4"></span>               member = member.im_func
<span class="anchor" id="line-8-3"></span>           setattr(pyClass, name, member)</pre><span class="anchor" id="line-160"></span><span class="anchor" id="line-161"></span><p class="line862">这步完成重名函数的替换。首先去掉私有方法（私有方法名前有'<tt class="backtick">__</tt>'）.得到mixInClass类中的指定名字的方法对象，判断是否为方法类型。因为还有可能取到属性。在types模块中包含了一些类型，可以用它来判断是否为方法类型。对于方法对象，如果是类方法，实际的函数应使用它的属性im_func。然后将pyClass相应的方法替换成mixInClass中的方法。 <span class="anchor" id="line-162"></span><span class="anchor" id="line-163"></span></p><p class="line874">这样就将mixInClass安装为pyClass的基类了。 <span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span></p><p class="line874">使用例子如： <span class="anchor" id="line-166"></span><span class="anchor" id="line-167"></span></p><p class="line867"><span class="anchor" id="line-168"></span><span class="anchor" id="line-169"></span><span class="anchor" id="line-170"></span><span class="anchor" id="line-171"></span></p><pre><span class="anchor" id="line-1-10"></span>from classa import classa
<span class="anchor" id="line-2-10"></span>from classb import classb
<span class="anchor" id="line-3-8"></span>MixIn(classa, classb) #将classb安装为classa的基类</pre><span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span><p class="line862">版权所有 limodou(<a class="mailto" href="mailto:chatme@263.net">chatme@263.net</a>) ，如要转载请保留此信息。 <span class="anchor" id="line-174"></span><span class="anchor" id="bottom"></span></p></strong></div><p id="pageinfo" class="info" lang="zh" dir="ltr"><strong>IntroMixin  (2009-12-25 07:17:04由<span title="??? @ localhost[127.0.0.1]">localhost</span>编辑)</strong></p><strong>

<div id="pagebottom"></div>
</strong></div><strong>


<div id="footer">
<ul class="editbar"><li><span class="disabled">只读网页</span></li><li class="toggleCommentsButton" style="display:none;"><a href="http://wiki.woodpecker.org.cn/moin/IntroMixin#" class="nbcomment" onclick="toggleComments();return false;">注释</a></li><li><a class="nbinfo" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=info" rel="nofollow">信息</a></li><li><a class="nbattachments" href="http://wiki.woodpecker.org.cn/moin/IntroMixin?action=AttachFile" rel="nofollow">附件</a></li><li>
<form class="actionsmenu" method="GET" action="./IntroMixin - Woodpecker Wiki for CPUG_files/IntroMixin - Woodpecker Wiki for CPUG.htm">
<div>
    
    <select name="action" onchange="if ((this.selectedIndex != 0) &amp;&amp;
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="show">更多操作：</option><option value="raw">源码</option>
<option value="print">打印视图</option>
<option value="RenderAsDocbook">输出Docbook格式</option>
<option value="refresh">删除缓存</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="SpellCheck">拼写检查</option>
<option value="LikePages">相似网页</option>
<option value="LocalSiteMap">本站地图</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="RenamePage" disabled="" class="disabled">改名</option>
<option value="DeletePage" disabled="" class="disabled">删除</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">订阅</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">删除垃圾广告</option>
<option value="show" disabled="" class="disabled">恢复成此版本</option>
<option value="PackagePages">网页打包</option>
<option value="SyncPages">同步网页</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="Load">加载</option>
<option value="Save">保存</option>
<option value="SlideShow">SlideShow</option>
    </select>
    
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('更多操作：');
//-->
</script>
</form>
</li></ul>

<ul id="credits">
<li><a href="http://www.douban.com/">豆瓣</a>赞助</li>
</ul>


</div>

<script type="text/javascript">
 var _gaq = _gaq || [];
 _gaq.push(['_setAccount', 'UA-15620275-1']);
 _gaq.push(['_trackPageview']);
 _gaq.push(['_trackPageLoadTime']);

 (function() {
   var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
   ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
 })();
</script>
<ul id="timings">
<li>Page.execute = 0.058s</li>
<li>getACL = 0.017s</li>
<li>init = 0.001s</li>
<li>load_multi_cfg = 0.000s</li>
<li>run = 0.298s</li>
<li>send_page = 0.285s</li>
<li>send_page_content = 0.072s</li>
<li>send_page_content|1 = 0.029s</li>
<li>send_page|1 = 0.042s</li>
<li>total = 0.299s</li>
</ul>



</strong></body></html>