<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0050)http://wiki.woodpecker.org.cn/moin/PyNewStyleClass -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="robots" content="index,nofollow">

<title>PyNewStyleClass - Woodpecker Wiki for CPUG</title>
<script type="text/javascript" async="" src="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/ga.js"></script><script type="text/javascript" src="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/common.js"></script><style type="text/css"></style>

<script type="text/javascript">
<!--
var search_hint = "搜索";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/htdocs/gugiel/css/msie.css">
<![endif]-->


<link rel="alternate" title="Woodpecker Wiki for CPUG: PyNewStyleClass" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?diffs=1&show_att=1&action=rss_rc&unique=0&page=PyNewStyleClass&ddiffs=1" type="application/rss+xml">


<link rel="Start" href="http://wiki.woodpecker.org.cn/moin/%E9%A6%96%E9%A1%B5">
<link rel="Alternate" title="维基标记" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=raw">
<link rel="Alternate" media="print" title="打印视图" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=print">
<link rel="Search" href="http://wiki.woodpecker.org.cn/moin/FindPage">
<link rel="Index" href="http://wiki.woodpecker.org.cn/moin/TitleIndex">
<link rel="Glossary" href="http://wiki.woodpecker.org.cn/moin/WordIndex">
<link rel="Help" href="http://wiki.woodpecker.org.cn/moin/HelpOnFormatting">
</head>

<body lang="zh" dir="ltr">

<div id="header">
<div id="logo"><a href="http://wiki.woodpecker.org.cn/moin/%E9%A6%96%E9%A1%B5"><img src="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/woodpecker.png" alt="Woodpecker Wiki for CPUG"></a></div>
<h1 id="locationline">

<span id="pagelocation"><a class="backlink" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=fullsearch&context=180&value=linkto%3A%22PyNewStyleClass%22" rel="nofollow" title="点击对这个标题进行全文检索">PyNewStyleClass</a></span>
</h1>
<div id="utils">

<form id="searchform" method="get" action="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/PyNewStyleClass - Woodpecker Wiki for CPUG.htm">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput" style="display: none;">搜索：</label>
<input id="searchinput" type="text" name="value" value="" size="20" onfocus="searchFocus(this)" onblur="searchBlur(this)" onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search" class="disabled">
<input id="titlesearch" name="titlesearch" type="submit" value="标题" alt="Search Titles" disabled="">
<input id="fullsearch" name="fullsearch" type="submit" value="正文" alt="Search Full Text" disabled="">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="username"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=login" id="login" rel="nofollow">登录</a></div>
</div>

<ul id="navibar">
<li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/%E9%A6%96%E9%A1%B5">首页</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/CPUG">CPUG</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/OBP">OpenBookProject</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/WoodpeckerHackers">行者堂</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/RecentChanges">更新</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/FindPage">搜索</a></li><li class="wikilink"><a href="http://wiki.woodpecker.org.cn/moin/HelpContent">帮助</a></li><li class="current"><a href="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/PyNewStyleClass - Woodpecker Wiki for CPUG.htm">PyNewStyleClass</a></li>
</ul>

<div id="pageline"><hr style="display:none;"></div>
<ul class="editbar"><li><span class="disabled">只读网页</span></li><li class="toggleCommentsButton" style="display:none;"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" class="nbcomment" onclick="toggleComments();return false;">注释</a></li><li><a class="nbinfo" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=info" rel="nofollow">信息</a></li><li><a class="nbattachments" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=AttachFile" rel="nofollow">附件</a></li><li>
<form class="actionsmenu" method="GET" action="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/PyNewStyleClass - Woodpecker Wiki for CPUG.htm">
<div>
    
    <select name="action" onchange="if ((this.selectedIndex != 0) &amp;&amp;
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="show">更多操作：</option><option value="raw">源码</option>
<option value="print">打印视图</option>
<option value="RenderAsDocbook">输出Docbook格式</option>
<option value="refresh">删除缓存</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="SpellCheck">拼写检查</option>
<option value="LikePages">相似网页</option>
<option value="LocalSiteMap">本站地图</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="RenamePage" disabled="" class="disabled">改名</option>
<option value="DeletePage" disabled="" class="disabled">删除</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">订阅</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">删除垃圾广告</option>
<option value="show" disabled="" class="disabled">恢复成此版本</option>
<option value="PackagePages">网页打包</option>
<option value="SyncPages">同步网页</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="Load">加载</option>
<option value="Save">保存</option>
<option value="SlideShow">SlideShow</option>
    </select>
    
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('更多操作：');
//-->
</script>
</form>
</li></ul>



</div>


<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span><span class="anchor" id="line-4"></span><p class="line867"><strong> <span class="anchor" id="line-5"></span><a class="http" href="http://spaces.msn.com/members/shukebeta/Blog/cns!1psZEmYfE1uAECP30_KFiC1Q!128.entry">魏忠的Space发布</a> <span class="anchor" id="line-6"></span></strong> <span class="anchor" id="line-7"></span>::-- <a href="http://wiki.woodpecker.org.cn/moin/WeiZhong">WeiZhong</a> [2009-08-25 10:46:38] <span class="anchor" id="line-8"></span>::-- <a href="http://wiki.woodpecker.org.cn/moin/ZoomQuiet">ZoomQuiet</a> [2006-01-09 06:12:38] <span class="anchor" id="line-9"></span></p><div class="table-of-contents"><p class="table-of-contents-heading">目录</p><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#python.2BTi12hA_new-style_class_.2BU8pRdlueT4uL5onj-">python中的 new-style class 及其实例详解</a><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2_new-style_Class_.2BU8pRdlueT4s-">5.2 new-style Class 及其实例</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.1_.2BUYVe.2BnaE_object_.2BW.2FmMYQ-">5.2.1 内建的 object 对象</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.2__.2BfHtluWzV-">5.2.2  类方法</a><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.2.1.2Bl1lgAWW5bNU-">5.2.2.1静态方法</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.2.2_.2BfHtluWzV-">5.2.2.2 类方法</a></li></ol></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.3_new-style_class">5.2.3 new-style class</a><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.3.1___init__.2BZbls1Q-">5.2.3.1 __init__方法</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.3.2___new__.2BZbls1Q-">5.2.3.2 __new__方法</a></li></ol></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.4_new-style_class_.2BW55Piw-">5.2.4 new-style class 实例</a><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.4.1_Properties">5.2.4.1 Properties</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.4.2___slots__.2BXF5gJw-">5.2.4.2 __slots__属性</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.4.3___getattribute__.2BZbls1Q-">5.2.4.3 __getattribute__方法</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.4.4.2BTipPU1ueT4tluWzV-">5.2.4.4个体实例方法</a></li></ol></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.5_.2BZbB2hFv5jGFqIVeLTi12hH7nYn8-">5.2.5 新的对象模型中的继承</a><ol><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.5.1.2BZbls1YnjZ5CYel6P:">5.2.5.1方法解析顺序:</a></li><li>
<a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#A5.2.5.2_.2BU09PXF8PjAN1KI2FfHtluWzV-">5.2.5.2 协作式调用超类方法</a></li></ol></li></ol></li></ol></div> <span class="anchor" id="line-10"></span>
<h1 id="python.2BTi12hA_new-style_class_.2BU8pRdlueT4uL5onj-">1. python中的 new-style class 及其实例详解</h1>
<span class="anchor" id="line-11"></span><p class="line874">(原文见《Python In a Nutshell(2003)》5.2节) <span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span></p><p class="line867">
</p><h2 id="A5.2_new-style_Class_.2BU8pRdlueT4s-">1.1. 5.2 new-style Class 及其实例</h2>
<span class="anchor" id="line-14"></span><p class="line874">前面我提到 python 2.2 中引入了 new-style 对象模型. <span class="anchor" id="line-15"></span>new-style class 及其实例与 Classic class 一样, 都是顶级对象。 它们可以拥有任意的属性, 通过调用类对象生成该类的一个实例对象. 在这一小节,我来向大家揭示新的对象模型及传统对象模型的不同. <span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span></p><p class="line874">从 python 2.2 起，如果一个类继承自 object 对象(或者它是任何内建类型如 list, dict, file 的子类)，那它就是一个 new-style class 。在此之前，Python 不允许通过继承内建类型生成新类，也根本没有 object 这个对象。在本章5.4节的后半部分，我会介绍给大家一个方法，将 Classic class 改造成 new-style class 。 <span class="anchor" id="line-18"></span><span class="anchor" id="line-19"></span></p><p class="line874">我建议每个人， 从现在开始只使用 new-style class (当然你得用 Python2.2 以上版本)。新的对象模型与传统对象模型相比， 有虽小却非常重要的优势, 可以说接近完美. <span class="anchor" id="line-20"></span><span class="anchor" id="line-21"></span></p><p class="line867">
</p><h2 id="A5.2.1_.2BUYVe.2BnaE_object_.2BW.2FmMYQ-">1.2. 5.2.1 内建的 object 对象</h2>
<span class="anchor" id="line-22"></span><p class="line874">object 对象是所有内建类型及 new-style class 的祖先。 object 对象定义了一系列特殊方法(参见 5.3 节后半部分)实现所有对象的默认行为。 <span class="anchor" id="line-23"></span><span class="anchor" id="line-24"></span></p><p class="line867"><tt class="backtick">__new__,&nbsp;__init__</tt> 方法 <span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span></p><p class="line862">你可以创建 object 的直接子类，静态方法 <tt class="backtick">__new__()</tt>用来创建类的实例， <span class="anchor" id="line-27"></span>实例的 <tt class="backtick">__init__()</tt> 方法用来初始化自己。 <span class="anchor" id="line-28"></span>默认的 <tt class="backtick">__init__()</tt> 方法会忽略你传递过来的任何参数。 <span class="anchor" id="line-29"></span><span class="anchor" id="line-30"></span></p><p class="line867"><tt class="backtick">__delattr__,&nbsp;__getattribute__,&nbsp;__setattr__&nbsp;</tt> 方法 <span class="anchor" id="line-31"></span><span class="anchor" id="line-32"></span></p><p class="line874">对象用这些方法来处理属性引用。本章前半部分已经做了详细介绍。 <span class="anchor" id="line-33"></span><span class="anchor" id="line-34"></span></p><p class="line867"><tt class="backtick">__hash__,&nbsp;__repr__,&nbsp;__str__&nbsp;</tt> 方法 <span class="anchor" id="line-35"></span><span class="anchor" id="line-36"></span></p><p class="line867"><tt class="backtick">print(someobj)</tt> 会调用 <tt class="backtick">someobj.__str__</tt> 如果 <tt class="backtick">__str__</tt> 没有定义， 则调用 <tt class="backtick">__repr__</tt> <span class="anchor" id="line-37"></span><tt class="backtick">repr(someobj)</tt> 会调用 <tt class="backtick">someobj.__repr__</tt> <span class="anchor" id="line-38"></span><span class="anchor" id="line-39"></span></p><p class="line874">允许object的子类重载这些方法，或添加新方法。 <span class="anchor" id="line-40"></span><span class="anchor" id="line-41"></span></p><p class="line867">
</p><h2 id="A5.2.2__.2BfHtluWzV-">1.3. 5.2.2  类方法</h2>
<span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><p class="line874">新的对象模型提供了两种类方法(传统对象模型没有这些方法)：静态方法和类方法。只有 python2.2 及更新版本才支持类方法. <span class="anchor" id="line-44"></span>需要提一下的是,在 python2.2 及更新版本中， Classic class 也实现了类方法。新的对象模型提供的诸多新特性中，有且仅有类方法这一特性被传统对象模型全功能实现。 <span class="anchor" id="line-45"></span><span class="anchor" id="line-46"></span></p><p class="line867">
</p><h3 id="A5.2.2.1.2Bl1lgAWW5bNU-">1.3.1. 5.2.2.1静态方法</h3>
<span class="anchor" id="line-47"></span><span class="anchor" id="line-48"></span><p class="line874">静态方法可以直接被类或类实例调用。它没有常规方法那样的特殊行为（绑定、非绑定、默认的第一个参数规则等等）。完全可以将静态方法当成一个用属性引用方式调用的普通函数来看待。任何时候定义静态方法都不是必须的（静态方法能实现的功能都可以通过定义一个普通函数来实现）. 有些程序员认为，当有一堆函数仅仅为某一特定类编写时，采用类方法这种方式能够提供足够的一致性（和一定程度的 namespace 的功能)。 <span class="anchor" id="line-49"></span><span class="anchor" id="line-50"></span></p><p class="line874">根据python2.4提供的新的语法，你可以象下面这样来创建一个静态方法， <span class="anchor" id="line-51"></span><span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span><span class="anchor" id="line-54"></span><span class="anchor" id="line-55"></span><span class="anchor" id="line-56"></span><span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span><span class="anchor" id="line-1-1"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
function isnumbered(obj) {
  return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';
}
function nformat(num,chrs,add) {
  var nlen = Math.max(0,chrs-(''+num).length), res = '';
  while (nlen>0) { res += ' '; nlen-- }
  return res+num+add;
}
function addnumber(did, nstart, nstep) {
  var c = document.getElementById(did), l = c.firstChild, n = 1;
  if (!isnumbered(c)) {
    if (typeof nstart == 'undefined') nstart = 1;
    if (typeof nstep  == 'undefined') nstep = 1;
    var n = nstart;
    while (l != null) {
      if (l.tagName == 'SPAN') {
        var s = document.createElement('SPAN');
        var a = document.createElement('A');
        s.className = 'LineNumber';
        a.appendChild(document.createTextNode(nformat(n,4,'')));
        a.href = '#' + did + '_' + n;
        s.appendChild(a);
        s.appendChild(document.createTextNode(' '));
        n += nstep;
        if (l.childNodes.length) {
          l.insertBefore(s, l.firstChild);
        }
        else {
          l.appendChild(s);
        }
      }
      l = l.nextSibling;
    }
  }
  return false;
}
function remnumber(did) {
  var c = document.getElementById(did), l = c.firstChild;
  if (isnumbered(c)) {
    while (l != null) {
      if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);
      l = l.nextSibling;
    }
  }
  return false;
}
function togglenumber(did, nstart, nstep) {
  var c = document.getElementById(did);
  if (isnumbered(c)) {
    remnumber(did);
  } else {
    addnumber(did,nstart,nstep);
  }
  return false;
}
</script>

<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_1">   1</a> </span><span class="LineAnchor" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_1"></span><span class="anchor" id="line-1-2"></span><span class="ResWord">class</span> <span class="ID">AClass</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_2">   2</a> </span><span class="LineAnchor" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_2"></span><span class="anchor" id="line-2-1"></span>    <span class="ID">@staticmethod</span>       <span class="Comment">#静态方法修饰符，表示下面的方法是一个静态方法</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_3">   3</a> </span><span class="LineAnchor" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_3"></span><span class="anchor" id="line-3-1"></span>    <span class="ResWord">def</span> <span class="ID">astatic</span>(  ): <span class="ResWord">print</span> <span class="String">'</span><span class="String">a static method</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_4">   4</a> </span><span class="LineAnchor" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_4"></span><span class="anchor" id="line-4-1"></span><span class="ID">anInstance</span> = <span class="ID">AClass</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_5">   5</a> </span><span class="LineAnchor" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_5"></span><span class="anchor" id="line-5-1"></span><span class="ID">AClass</span>.<span class="ID">astatic</span>(  )                    <span class="Comment"># prints: a static method</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_6">   6</a> </span><span class="LineAnchor" id="CA-3091dad02727058e4539ca2fdd9bb458b6e4e41e_6"></span><span class="anchor" id="line-6-1"></span><span class="ID">anInstance</span>.<span class="ID">astatic</span>(  )                <span class="Comment"># prints: a static method</span></span>
</pre></div></div><span class="anchor" id="line-59"></span><p class="line874">注:staticmethod是一个内建函数, 用来将一个方法包装成静态方法, 在2.4以前版本, 要用下面的方式定义一个静态方法(不再推荐使用): <span class="anchor" id="line-60"></span><span class="anchor" id="line-61"></span><span class="anchor" id="line-62"></span><span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span><span class="anchor" id="line-1-3"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-270a8143826243dd8e1baf831d527e5c4c54d627\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-270a8143826243dd8e1baf831d527e5c4c54d627&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-270a8143826243dd8e1baf831d527e5c4c54d627" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-270a8143826243dd8e1baf831d527e5c4c54d627_1">   1</a> </span><span class="LineAnchor" id="CA-270a8143826243dd8e1baf831d527e5c4c54d627_1"></span><span class="anchor" id="line-1-4"></span><span class="ResWord">class</span> <span class="ID">AClass</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-270a8143826243dd8e1baf831d527e5c4c54d627_2">   2</a> </span><span class="LineAnchor" id="CA-270a8143826243dd8e1baf831d527e5c4c54d627_2"></span><span class="anchor" id="line-2-2"></span>    <span class="ResWord">def</span> <span class="ID">astatic</span>(  ): <span class="ResWord">print</span> <span class="String">'</span><span class="String">a static method</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-270a8143826243dd8e1baf831d527e5c4c54d627_3">   3</a> </span><span class="LineAnchor" id="CA-270a8143826243dd8e1baf831d527e5c4c54d627_3"></span><span class="anchor" id="line-3-2"></span>    <span class="ID">astatic</span>=<span class="ResWord">staticmethod</span>(<span class="ID">astatic</span>)</span>
</pre></div></div><span class="anchor" id="line-65"></span><p class="line874">这种方法在函数定义本身比较长时经常会忘记后面这一行. <span class="anchor" id="line-66"></span><span class="anchor" id="line-67"></span></p><p class="line867">
</p><h3 id="A5.2.2.2_.2BfHtluWzV-">1.3.2. 5.2.2.2 类方法</h3>
<span class="anchor" id="line-68"></span><span class="anchor" id="line-69"></span><p class="line874">一个类方法就是你可以通过类或它的实例来调用的方法, 不管你是用类调用这个方法还是类的实例调用这个方法,python只会将实际的类对象做为该方法的第一个参数.记住:方法的第一个参数都是类对象而不是实例对象. 按照惯例,类方法的第一个形参被命名为 cls. 任何时候定义类方法都不是必须的（静态方法能实现的功能都可以通过定义一个普通函数来实现,只要这个函数接受一个类对象做为参数就可以了）.某些程序员认为这个特性当有一堆函数仅仅为某一特定类编写时会提供使用上的一致性. <span class="anchor" id="line-70"></span><span class="anchor" id="line-71"></span></p><p class="line874">定义类方法: <span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span><span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span><span class="anchor" id="line-78"></span><span class="anchor" id="line-79"></span><span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span><span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span><span class="anchor" id="line-1-5"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-4f57660fee78b895a7d8f5df8560c362692231a4\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-4f57660fee78b895a7d8f5df8560c362692231a4&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_1">   1</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_1"></span><span class="anchor" id="line-1-6"></span><span class="ResWord">class</span> <span class="ID">ABase</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_2">   2</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_2"></span><span class="anchor" id="line-2-3"></span>    <span class="ID">@classmethod</span>        <span class="Comment">#类方法修饰符</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_3">   3</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_3"></span><span class="anchor" id="line-3-3"></span>    <span class="ResWord">def</span> <span class="ID">aclassmet</span>(<span class="ID">cls</span>): <span class="ResWord">print</span> <span class="String">'</span><span class="String">a class method for</span><span class="String">'</span>, <span class="ID">cls</span>.<span class="ID">__name__</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_4">   4</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_4"></span><span class="anchor" id="line-4-2"></span><span class="ResWord">class</span> <span class="ID">ADeriv</span>(<span class="ID">ABase</span>): <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_5">   5</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_5"></span><span class="anchor" id="line-5-2"></span><span class="ID">bInstance</span> = <span class="ID">ABase</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_6">   6</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_6"></span><span class="anchor" id="line-6-2"></span><span class="ID">dInstance</span> = <span class="ID">ADeriv</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_7">   7</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_7"></span><span class="anchor" id="line-7-1"></span><span class="ID">ABase</span>.<span class="ID">aclassmet</span>(  )               <span class="Comment"># prints: a class method for ABase</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_8">   8</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_8"></span><span class="anchor" id="line-8-1"></span><span class="ID">bInstance</span>.<span class="ID">aclassmet</span>(  )           <span class="Comment"># prints: a class method for ABase</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_9">   9</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_9"></span><span class="anchor" id="line-9-1"></span><span class="ID">ADeriv</span>.<span class="ID">aclassmet</span>(  )              <span class="Comment"># prints: a class method for ADeriv</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4f57660fee78b895a7d8f5df8560c362692231a4_10">  10</a> </span><span class="LineAnchor" id="CA-4f57660fee78b895a7d8f5df8560c362692231a4_10"></span><span class="anchor" id="line-10-1"></span><span class="ID">dInstance</span>.<span class="ID">aclassmet</span>(  )           <span class="Comment"># prints: a class method for ADeriv</span></span>
</pre></div></div><span class="anchor" id="line-84"></span><p class="line874">注:classmethod是一个内建函数,用来将一个方法封装成类方法,在2.4以前版本,你只能用下面的方式定义一个类方法: <span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span><span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><span class="anchor" id="line-1-7"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a_1">   1</a> </span><span class="LineAnchor" id="CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a_1"></span><span class="anchor" id="line-1-8"></span><span class="ResWord">class</span> <span class="ID">AClass</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a_2">   2</a> </span><span class="LineAnchor" id="CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a_2"></span><span class="anchor" id="line-2-4"></span>    <span class="ResWord">def</span> <span class="ID">aclassmethod</span>(<span class="ID">cls</span>): <span class="ResWord">print</span> <span class="String">'</span><span class="String">a class method</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a_3">   3</a> </span><span class="LineAnchor" id="CA-43f913d2a10eb7d8d21f3d9e12031c962ad3a27a_3"></span><span class="anchor" id="line-3-4"></span>    <span class="ID">aclassmethod</span>=<span class="ResWord">staticmethod</span>(<span class="ID">aclassmethod</span>)</span>
</pre></div></div><span class="anchor" id="line-90"></span><p class="line874">并没有人要求必须封装后的方法名字必须与封装前一致,但建议你总是这样做(如果你使用python2.4版本以下时). <span class="anchor" id="line-91"></span>这种方法在函数定义本身比较长时经常会忘记后面这一行. <span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span></p><p class="line867">
</p><h2 id="A5.2.3_new-style_class">1.4. 5.2.3 new-style class</h2>
<span class="anchor" id="line-94"></span><p class="line862">除了拥有 Classic class 的全部特性之外, new-style class 当然还具有一些新特性.<tt class="backtick">__init__</tt>特殊方法的行为与 Classic class 相比有了一些变化, 另外还新增了一个名为 <tt class="backtick">__new__</tt> 的静态方法 <span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span></p><p class="line867">
</p><h3 id="A5.2.3.1___init__.2BZbls1Q-">1.4.1. 5.2.3.1 __init__方法</h3>
<span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><p class="line862">下面的 C 类<tt class="backtick">(一个&nbsp;new-style&nbsp;class)</tt>中, 从 object 继承来的原始 <tt class="backtick">__init__</tt>方法, 可以认为就是一个 pass 语句, 因为它几乎什么都不做, 建议你在所有的 new-style class 中重新实现 <tt class="backtick">__init__</tt> 方法. <span class="anchor" id="line-99"></span><span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span><span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span><span class="anchor" id="line-1-9"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-0902510863f221927cea095880c4baa8afa95593\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-0902510863f221927cea095880c4baa8afa95593&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-0902510863f221927cea095880c4baa8afa95593" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-0902510863f221927cea095880c4baa8afa95593_1">   1</a> </span><span class="LineAnchor" id="CA-0902510863f221927cea095880c4baa8afa95593_1"></span><span class="anchor" id="line-1-10"></span><span class="ResWord">class</span> <span class="ID">C</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-0902510863f221927cea095880c4baa8afa95593_2">   2</a> </span><span class="LineAnchor" id="CA-0902510863f221927cea095880c4baa8afa95593_2"></span><span class="anchor" id="line-2-5"></span>    <span class="ResWord">def</span> <span class="ID">__init__</span>(<span class="ResWord">self</span>): <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-0902510863f221927cea095880c4baa8afa95593_3">   3</a> </span><span class="LineAnchor" id="CA-0902510863f221927cea095880c4baa8afa95593_3"></span><span class="anchor" id="line-3-5"></span>    <span class="Comment"># rest of class body omitted</span></span>
</pre></div></div><span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><p class="line862">示例中的的类只允许无参数调用,硬要传递一个参数给它会产生异常<tt class="backtick">(如用C('xyz'))</tt>. 如果C没有重载<tt class="backtick">__init__</tt>方法, 调用C('xyz')会象 'xyz' 根本不存在一样忽略参数继续执行. <span class="anchor" id="line-106"></span>注意: <span class="anchor" id="line-107"></span>(根据我的试验,2.4版中这点发生了变化,即使没有重载<tt class="backtick">__init__</tt>方法,象C('xyz')这样调用一样会引发异常) <span class="anchor" id="line-108"></span><span class="anchor" id="line-109"></span></p><p class="line867">
</p><h3 id="A5.2.3.2___new__.2BZbls1Q-">1.4.2. 5.2.3.2 __new__方法</h3>
<span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span><p class="line862">每一个 new-style class 都有一个名为<tt class="backtick">__new__</tt>的静态方法. 当你调用 C(*args,**kwds)创建一个C实例时,python内部调用的是 C.<tt class="backtick">__new__</tt>(C,*args,**kwds). <span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span></p><p class="line867"><tt class="backtick">__new__</tt>方法的返回值 x 就是该类的实例. 在确认 x 是C的实例以后, python调用C.<tt class="backtick">__init__</tt>(x,*args,**kwds)来初始化这个实例. 也就是说,对新类C来讲,语句 x=C(23)等同于: <span class="anchor" id="line-114"></span><span class="anchor" id="line-115"></span><span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span><span class="anchor" id="line-1-11"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-170344098411d7110926cf83ca244e188beb82a7\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-170344098411d7110926cf83ca244e188beb82a7&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-170344098411d7110926cf83ca244e188beb82a7" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-170344098411d7110926cf83ca244e188beb82a7_1">   1</a> </span><span class="LineAnchor" id="CA-170344098411d7110926cf83ca244e188beb82a7_1"></span><span class="anchor" id="line-1-12"></span><span class="ID">x</span> = <span class="ID">C</span>.<span class="ID">__new__</span>(<span class="ID">C</span>, <span class="Number">23</span>)</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-170344098411d7110926cf83ca244e188beb82a7_2">   2</a> </span><span class="LineAnchor" id="CA-170344098411d7110926cf83ca244e188beb82a7_2"></span><span class="anchor" id="line-2-6"></span><span class="ResWord">if</span> <span class="ResWord">isinstance</span>(<span class="ID">x</span>, <span class="ID">C</span>): <span class="ID">C</span>.<span class="ID">__init__</span>(<span class="ID">x</span>, <span class="Number">23</span>)</span>
</pre></div></div><span class="anchor" id="line-118"></span><p class="line867"><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span></p><pre><span class="anchor" id="line-1"></span>object.__new__创建一个新的,未初始化的类实例,它接收传递过来的第一个参数(也就是类对象本身),忽略其它的参数.当你重载__new__方法时,你不必使用函数修饰符@staticmethod, python解释器根据上下文会认出__new__()方法是一个静态方法. 如果你需要重绑定 C.__new__方法,你只需要在类外面执行 C.__new__=staticmethod(你想使用的新方法)就可以了.(极少有这样的需求)
<span class="anchor" id="line-2"></span>
<span class="anchor" id="line-3"></span>__new__方法拥有函数工厂的绝大部分弹性. 根据实际需求,我们可以让__new__返回一个已有的实例或者创建一个新的实例.
<span class="anchor" id="line-4"></span>下面举一个通过重载__new__方法实现独身对象的设计模式的例子:</pre><span class="anchor" id="line-123"></span><p class="line867"><span class="anchor" id="line-124"></span><span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span><span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span><span class="anchor" id="line-1-13"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_1">   1</a> </span><span class="LineAnchor" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_1"></span><span class="anchor" id="line-1-14"></span><span class="ResWord">class</span> <span class="ID">Singleton</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_2">   2</a> </span><span class="LineAnchor" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_2"></span><span class="anchor" id="line-2-7"></span>    <span class="ID">_singletons</span> = {}</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_3">   3</a> </span><span class="LineAnchor" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_3"></span><span class="anchor" id="line-3-6"></span>    <span class="ResWord">def</span> <span class="ID">__new__</span>(<span class="ID">cls</span>, *<span class="ID">args</span>, **<span class="ID">kwds</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_4">   4</a> </span><span class="LineAnchor" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_4"></span><span class="anchor" id="line-4-3"></span>        <span class="ResWord">if</span> <span class="ResWord">not</span> <span class="ID">cls</span>.<span class="ID">_singletons</span>.<span class="ID">has_key</span>(<span class="ID">cls</span>):            <span class="Comment">#若还没有任何实例</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_5">   5</a> </span><span class="LineAnchor" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_5"></span><span class="anchor" id="line-5-3"></span>            <span class="ID">cls</span>.<span class="ID">_singletons</span>[<span class="ID">cls</span>] = <span class="ResWord">object</span>.<span class="ID">__new__</span>(<span class="ID">cls</span>)  <span class="Comment">#生成一个实例</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_6">   6</a> </span><span class="LineAnchor" id="CA-b99e590cb233927eb457915aa0a4ad2553dcf0c5_6"></span><span class="anchor" id="line-6-3"></span>        <span class="ResWord">return</span> <span class="ID">cls</span>.<span class="ID">_singletons</span>[<span class="ID">cls</span>]                             <span class="Comment">#返回这个实例</span></span>
</pre></div></div><p class="line867"><span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span></p><pre><span class="anchor" id="line-1-1"></span>Singleton的所有子类(当然是没有重载__new__方法的子类)都只可能有一个实例. 如果该类的子类定义了一个__init__方法,那么它必须保证它的__init__方法能够安全的对同一实例进行多次调用.</pre><span class="anchor" id="line-133"></span><p class="line867">
</p><h2 id="A5.2.4_new-style_class_.2BW55Piw-">1.5. 5.2.4 new-style class 实例</h2>
<span class="anchor" id="line-134"></span><ul><li style="list-style-type:none"><p class="line862">new-style class 实例除了拥有 Classic class 实例的全部特性之外,还拥有一种称为property的新属性及一个叫作<tt class="backtick">__slots__</tt>的特殊属性,该属性会对实例其它属性的访问产生重要影响. <span class="anchor" id="line-135"></span></p></li></ul><p class="line862">新的对象模型同样添加了一个新的方法 <tt class="backtick">__getattribute__&nbsp;比原有的&nbsp;__getattr__&nbsp;</tt>方法更通用. 不同的实例可以拥有这些特殊方法的不同实现. <span class="anchor" id="line-136"></span><span class="anchor" id="line-137"></span></p><p class="line867">
</p><h3 id="A5.2.4.1_Properties">1.5.1. 5.2.4.1 Properties</h3>
<span class="anchor" id="line-138"></span><p class="line874">property 是实例中具有特殊功能的属性. 你可以使用常规语法对property进行引用,绑定或解除绑定.如: <span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span><span class="anchor" id="line-143"></span><span class="anchor" id="line-1-15"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42_1">   1</a> </span><span class="LineAnchor" id="CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42_1"></span><span class="anchor" id="line-1-16"></span><span class="ResWord">print</span> <span class="ID">x</span>.<span class="ID">prop</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42_2">   2</a> </span><span class="LineAnchor" id="CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42_2"></span><span class="anchor" id="line-2-8"></span><span class="ID">x</span>.<span class="ID">prop</span>=<span class="Number">23</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42_3">   3</a> </span><span class="LineAnchor" id="CA-4c5fa28cf6817ed32a0f297a6fc25a840e71ea42_3"></span><span class="anchor" id="line-3-7"></span><span class="ResWord">del</span> <span class="ID">x</span>.<span class="ID">prop</span></span>
</pre></div></div><span class="anchor" id="line-144"></span><p class="line874">然而,property如果只有这点功能那就和普通属性没什么两样了,property有它的独到之处,请往下读. <span class="anchor" id="line-145"></span>下面介绍如何定义一个只读property: <span class="anchor" id="line-146"></span><span class="anchor" id="line-147"></span><span class="anchor" id="line-148"></span><span class="anchor" id="line-149"></span><span class="anchor" id="line-150"></span><span class="anchor" id="line-151"></span><span class="anchor" id="line-152"></span><span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span><span class="anchor" id="line-1-17"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-f0d067373620ed26440d331ad8dd13a672ff94b9\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-f0d067373620ed26440d331ad8dd13a672ff94b9&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_1">   1</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_1"></span><span class="anchor" id="line-1-18"></span><span class="ResWord">class</span> <span class="ID">Rectangle</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_2">   2</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_2"></span><span class="anchor" id="line-2-9"></span>    <span class="ResWord">def</span> <span class="ID">__init__</span>(<span class="ResWord">self</span>, <span class="ID">width</span>, <span class="ID">heigth</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_3">   3</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_3"></span><span class="anchor" id="line-3-8"></span>        <span class="ResWord">self</span>.<span class="ID">width</span> = <span class="ID">width</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_4">   4</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_4"></span><span class="anchor" id="line-4-4"></span>        <span class="ResWord">self</span>.<span class="ID">heigth</span> = <span class="ID">heigth</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_5">   5</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_5"></span><span class="anchor" id="line-5-4"></span>    <span class="ResWord">def</span> <span class="ID">getArea</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_6">   6</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_6"></span><span class="anchor" id="line-6-4"></span>        <span class="ResWord">return</span> <span class="ResWord">self</span>.<span class="ID">width</span> * <span class="ResWord">self</span>.<span class="ID">heigth</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-f0d067373620ed26440d331ad8dd13a672ff94b9_7">   7</a> </span><span class="LineAnchor" id="CA-f0d067373620ed26440d331ad8dd13a672ff94b9_7"></span><span class="anchor" id="line-7-2"></span>    <span class="ID">area</span> = <span class="ResWord">property</span>(<span class="ID">getArea</span>, <span class="ID">doc</span>=<span class="String">'</span><span class="String">area of the rectangle</span><span class="String">'</span>)</span>
</pre></div></div><span class="anchor" id="line-155"></span><p class="line867"><span class="anchor" id="line-156"></span><span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><span class="anchor" id="line-159"></span><span class="anchor" id="line-160"></span><span class="anchor" id="line-161"></span><span class="anchor" id="line-162"></span><span class="anchor" id="line-163"></span></p><pre><span class="anchor" id="line-1-2"></span>矩形类的每一个实例 r 均拥有一个只读属性 r.area, 该属性由 r.getArea()方法实时计算得来. Rectangle.area.__doc__是'area of the rectangle', 这个属性是只读的(试图对它进行重绑定或解除绑定的企图都注定会失败), 这是因为我们在property定义中指定了该属性的 get 方法.
<span class="anchor" id="line-2-1"></span>
<span class="anchor" id="line-3-1"></span>properties 干的活与那些特殊方法__getattr__, __setattr__, __delattr__ 等是极其相似的, 不过同样的活它干起来更简单更快捷. 内建 property 类别(我倒宁愿把当成一个函数来看)用来生成一个 property, 并将其返回值绑定为一个类属性. 如同绑定类的常规属性, 一般在定义类时就创建property, 当然也有其它选择. 假设在定义 new-style class  C 时, 使用以下语法:
<span class="anchor" id="line-4-1"></span>
<span class="anchor" id="line-5"></span>attrib = property(fget=None, fset=None, fdel=None, doc=None)
<span class="anchor" id="line-6"></span>
<span class="anchor" id="line-7"></span>x 是 C 的一个实例, 当你引用 x.attrib 时, python调用 fget 方法取值给你. 当你为x.attrib赋值: x.attrib=value 时, python调用 fset方法, 并且value值做为fset方法的参数, 当你执行del x.attrib 时, python调用fdel方法, 你传过去的名为 doc 的参数即为该属性的文档字符串. 在矩形类中,因为我们没有为area属性指定 fset 和 fdel 参数, 所以该属性只能读取.</pre><span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span><p class="line867">
</p><h3 id="A5.2.4.2___slots__.2BXF5gJw-">1.5.2. 5.2.4.2 __slots__属性</h3>
<span class="anchor" id="line-166"></span><p class="line867"><span class="anchor" id="line-167"></span><span class="anchor" id="line-168"></span><span class="anchor" id="line-169"></span><span class="anchor" id="line-170"></span></p><pre><span class="anchor" id="line-1-3"></span>通常, 每个实例对象 x 都拥有一个字典 x.__dict__. python通过此字典允许你绑定任意属性给 x 实例. 定义一个名为 __slots__ 的类属性可以有效减少每个实例占用的内存数量. __slots__ 是一个字符串序列(通常是一个tuple).  当类 C 拥有 __slots__属性, x 的直接子类就没有 x.__dict__属性. 如果试图绑定一个 __slots__ 中不存在属性给实例的话, 就会引发异常. __slots__属性虽然令你失去绑定任意属性的方便, 却能有效节省每个实例的内存消耗, 有助于生成小而精干的实例对象.
<span class="anchor" id="line-2-2"></span>注: 当一个类会生成很多很多实例时(有些类同时拥有数百万而不是几千个实例), 即使一个实例节省几十个字节都可节省一大笔内存时, 就值得使用__slots__属性. 只有在类定义中可以使用 __slots__ = aTuple 语句来为一个类添加__slots__属性, 其它任何位置对一个类或其父类的__slots__属性的修改, 重新绑定或解除绑定都是无效的.
<span class="anchor" id="line-3-2"></span>下面介绍如何通过添加 __slots__ 属性给刚才定义的 Rectangle 类, 以得到瘦身的类实例:</pre><span class="anchor" id="line-171"></span><p class="line867"><span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span><span class="anchor" id="line-174"></span><span class="anchor" id="line-1-19"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62_1">   1</a> </span><span class="LineAnchor" id="CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62_1"></span><span class="anchor" id="line-1-20"></span><span class="ResWord">class</span> <span class="ID">OptimizedRectangle</span>(<span class="ID">Rectangle</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62_2">   2</a> </span><span class="LineAnchor" id="CA-e037e9d8c01e3931346fbc51bb2c029bbefe0e62_2"></span><span class="anchor" id="line-2-10"></span>    <span class="ID">__slots__</span> = <span class="String">'</span><span class="String">width</span><span class="String">'</span>, <span class="String">'</span><span class="String">heigth</span><span class="String">'</span></span>
</pre></div></div><span class="anchor" id="line-175"></span><p class="line867"><span class="anchor" id="line-176"></span><span class="anchor" id="line-177"></span></p><pre><span class="anchor" id="line-1-4"></span>__slots__里不能包含 properties, 只能包含常规实例属性. 我们不需也不允许给area property 也定义一个slot.  若不定义 __slots__属性, 常规属性则保存在实例的__dict__属性中.</pre><span class="anchor" id="line-178"></span><p class="line867"><span class="anchor" id="line-179"></span><span class="anchor" id="line-180"></span></p><pre><span class="anchor" id="line-1-5"></span>__slot__ 只是用来占位，因此对于__slot__ 定义的属性名，你首先要赋值，然后才可以使用。直接使用是会报错的。 -- Limodou</pre><span class="anchor" id="line-181"></span><span class="anchor" id="line-182"></span><p class="line867">
</p><h3 id="A5.2.4.3___getattribute__.2BZbls1Q-">1.5.3. 5.2.4.3 __getattribute__方法</h3>
<span class="anchor" id="line-183"></span><span class="anchor" id="line-184"></span><p class="line867"><span class="anchor" id="line-185"></span><span class="anchor" id="line-186"></span></p><pre><span class="anchor" id="line-1-6"></span>对 new-style class 的实例来说, 所有的属性引用都是通过特殊方法 __getattribute__() 完成的. 该方法由基类对象提供, 负责实现对象属性引用的全部细节. 在本章的前面有该方法详细的文档. 如果有特殊需求,你也可以重载 __getattribute__ 属性(比如你打算在子类实例中隐藏父类的某些属性或方法).下面的例子演示了实现一个没有 append 方法的 list 类:</pre><span class="anchor" id="line-187"></span><p class="line867"><span class="anchor" id="line-188"></span><span class="anchor" id="line-189"></span><span class="anchor" id="line-190"></span><span class="anchor" id="line-191"></span><span class="anchor" id="line-192"></span><span class="anchor" id="line-1-21"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-df20887618aa6b4490f47b85984a3d50e02945a2\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-df20887618aa6b4490f47b85984a3d50e02945a2&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-df20887618aa6b4490f47b85984a3d50e02945a2" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-df20887618aa6b4490f47b85984a3d50e02945a2_1">   1</a> </span><span class="LineAnchor" id="CA-df20887618aa6b4490f47b85984a3d50e02945a2_1"></span><span class="anchor" id="line-1-22"></span><span class="ResWord">class</span> <span class="ID">listNoAppend</span>(<span class="ResWord">list</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-df20887618aa6b4490f47b85984a3d50e02945a2_2">   2</a> </span><span class="LineAnchor" id="CA-df20887618aa6b4490f47b85984a3d50e02945a2_2"></span><span class="anchor" id="line-2-11"></span>    <span class="ResWord">def</span> <span class="ID">__getattribute__</span>(<span class="ResWord">self</span>, <span class="ID">name</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-df20887618aa6b4490f47b85984a3d50e02945a2_3">   3</a> </span><span class="LineAnchor" id="CA-df20887618aa6b4490f47b85984a3d50e02945a2_3"></span><span class="anchor" id="line-3-9"></span>        <span class="ResWord">if</span> <span class="ID">name</span> == <span class="String">'</span><span class="String">append</span><span class="String">'</span>: <span class="ResWord">raise</span> <span class="ID">AttributeError</span>, <span class="ID">name</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-df20887618aa6b4490f47b85984a3d50e02945a2_4">   4</a> </span><span class="LineAnchor" id="CA-df20887618aa6b4490f47b85984a3d50e02945a2_4"></span><span class="anchor" id="line-4-5"></span>        <span class="ResWord">return</span> <span class="ResWord">list</span>.<span class="ID">__getattribute__</span>(<span class="ResWord">self</span>, <span class="ID">name</span>)</span>
</pre></div></div><span class="anchor" id="line-193"></span><p class="line874">除了功能不全以外, 该类的实例与内建list对象完全相同. 任何调用该类实例append方法的企图都会引发一个异常. <span class="anchor" id="line-194"></span><span class="anchor" id="line-195"></span></p><p class="line867">
</p><h3 id="A5.2.4.4.2BTipPU1ueT4tluWzV-">1.5.4. 5.2.4.4个体实例方法</h3>
<span class="anchor" id="line-196"></span><span class="anchor" id="line-197"></span><p class="line874">传统与新的对象模型都允许一个实例拥有私有的属性和方法(通过绑定或重绑定) . 实例的私有属性会屏蔽掉类定义中的同名属性.举例来说: <span class="anchor" id="line-198"></span><span class="anchor" id="line-199"></span><span class="anchor" id="line-200"></span><span class="anchor" id="line-201"></span><span class="anchor" id="line-202"></span><span class="anchor" id="line-203"></span><span class="anchor" id="line-204"></span><span class="anchor" id="line-205"></span><span class="anchor" id="line-206"></span><span class="anchor" id="line-207"></span><span class="anchor" id="line-1-23"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-581970119c455cdad8c3579e5d8fa200c0789353\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-581970119c455cdad8c3579e5d8fa200c0789353&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-581970119c455cdad8c3579e5d8fa200c0789353" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_1">   1</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_1"></span><span class="anchor" id="line-1-24"></span><span class="ResWord">class</span> <span class="ID">abc</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_2">   2</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_2"></span><span class="anchor" id="line-2-12"></span>        <span class="ResWord">def</span> <span class="ID">attrib_a</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_3">   3</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_3"></span><span class="anchor" id="line-3-10"></span>                <span class="ResWord">print</span> <span class="String">'</span><span class="String">aMethod defined in class abc</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_4">   4</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_4"></span><span class="anchor" id="line-4-6"></span><span class="ID">b</span> = <span class="ID">abc</span>()</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_5">   5</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_5"></span><span class="anchor" id="line-5-5"></span><span class="ResWord">def</span> <span class="ID">afunc</span>():</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_6">   6</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_6"></span><span class="anchor" id="line-6-5"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">hello,world!</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_7">   7</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_7"></span><span class="anchor" id="line-7-3"></span><span class="ID">b</span>.<span class="ID">attrib_a</span>=<span class="ID">afunc</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-581970119c455cdad8c3579e5d8fa200c0789353_8">   8</a> </span><span class="LineAnchor" id="CA-581970119c455cdad8c3579e5d8fa200c0789353_8"></span><span class="anchor" id="line-8-2"></span><span class="ID">b</span>.<span class="ID">attrib_a</span>()</span>
</pre></div></div><span class="anchor" id="line-208"></span><p class="line874">该例子将打印 'hello,world!' <span class="anchor" id="line-209"></span><span class="anchor" id="line-210"></span></p><p class="line874">在 python 隐式调用实例的私有(后绑定)特殊方法时, 新的对象模型的行为与传统对象模型不同. 在传统对象模型中, 无论是显式调用, 还是隐式调用, 都会调用这个实例的后绑定特殊方法. 而在新的对象模型中, 除非显式调用实例的特殊方法, 否则python总是去调用在类中定义的特殊方法. 下面这个例子可以说明这一点: <span class="anchor" id="line-211"></span><span class="anchor" id="line-212"></span><span class="anchor" id="line-213"></span><span class="anchor" id="line-214"></span><span class="anchor" id="line-215"></span><span class="anchor" id="line-216"></span><span class="anchor" id="line-217"></span><span class="anchor" id="line-218"></span><span class="anchor" id="line-219"></span><span class="anchor" id="line-220"></span><span class="anchor" id="line-221"></span><span class="anchor" id="line-222"></span><span class="anchor" id="line-223"></span><span class="anchor" id="line-224"></span><span class="anchor" id="line-225"></span><span class="anchor" id="line-226"></span><span class="anchor" id="line-1-25"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-90d3031956cfed825d79de47046b0613c629ad91\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-90d3031956cfed825d79de47046b0613c629ad91&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-90d3031956cfed825d79de47046b0613c629ad91" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_1">   1</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_1"></span><span class="anchor" id="line-1-26"></span><span class="ResWord">def</span> <span class="ID">fakeGetItem</span>(<span class="ID">idx</span>): <span class="ResWord">return</span> <span class="ID">idx</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_2">   2</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_2"></span><span class="anchor" id="line-2-13"></span><span class="ResWord">class</span> <span class="ID">Classic</span>: <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_3">   3</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_3"></span><span class="anchor" id="line-3-11"></span><span class="ID">c</span> = <span class="ID">Classic</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_4">   4</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_4"></span><span class="anchor" id="line-4-7"></span><span class="ID">c</span>.<span class="ID">__getitem__</span> = <span class="ID">fakeGetItem</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_5">   5</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_5"></span><span class="anchor" id="line-5-6"></span><span class="ResWord">print</span> <span class="ID">c</span>[<span class="Number">23</span>]                       <span class="Comment"># prints: 23</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_6">   6</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_6"></span><span class="anchor" id="line-6-6"></span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_7">   7</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_7"></span><span class="anchor" id="line-7-4"></span><span class="ResWord">class</span> <span class="ID">NewStyle</span>(<span class="ResWord">object</span>): <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_8">   8</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_8"></span><span class="anchor" id="line-8-3"></span><span class="ID">n</span> = <span class="ID">NewStyle</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_9">   9</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_9"></span><span class="anchor" id="line-9-2"></span><span class="ID">n</span>.<span class="ID">__getitem__</span> = <span class="ID">fakeGetItem</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_10">  10</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_10"></span><span class="anchor" id="line-10-2"></span><span class="ResWord">print</span> <span class="ID">n</span>[<span class="Number">23</span>]                       <span class="Comment"># 程序执行到这步会出错. 如果将代码改为 print n.__getitem__(23) 则正常运行</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_11">  11</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_11"></span><span class="anchor" id="line-11-1"></span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_12">  12</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_12"></span><span class="anchor" id="line-12-1"></span><span class="Comment"># Traceback (most recent call last):</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_13">  13</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_13"></span><span class="anchor" id="line-13-1"></span><span class="Comment">#   File "&lt;stdin&gt;", line 1, in ?</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-90d3031956cfed825d79de47046b0613c629ad91_14">  14</a> </span><span class="LineAnchor" id="CA-90d3031956cfed825d79de47046b0613c629ad91_14"></span><span class="anchor" id="line-14-1"></span><span class="Comment"># TypeError: unindexable object</span></span>
</pre></div></div><span class="anchor" id="line-227"></span><p class="line867"><span class="anchor" id="line-228"></span><span class="anchor" id="line-229"></span></p><pre><span class="anchor" id="line-1-7"></span>调用n[23],将产生一个隐式的__getitem__方法调用,因为 new-style class 对象 n 中并未定义该方法, 所以引发了异常. 不过如果你使用n.__getitem__(23)这种方式来显式调用特殊方法时, 它还是可以工作的.</pre><span class="anchor" id="line-230"></span><span class="anchor" id="line-231"></span><p class="line867">
</p><h2 id="A5.2.5_.2BZbB2hFv5jGFqIVeLTi12hH7nYn8-">1.6. 5.2.5 新的对象模型中的继承</h2>
<span class="anchor" id="line-232"></span><span class="anchor" id="line-233"></span><p class="line874">在新的对象模型中, 继承的使用方式与传统模型大致相同. 一个关键的区别就是 new-style class 能从一个内建类型中继承而 Classic class 不能. <span class="anchor" id="line-234"></span></p><ul><li style="list-style-type:none">new-style class 仍然支持多继承, 若要从多个内建类型继承生成一个新类, 则这些内建类型必须是经过特殊设计能够相互兼容. python不支持随意的从多个内建类型进行多继承, 通常情况都是通过至多从一个内建类型继承得到新类. 这意味着在多继承时, 除object以外, 至多有一个内建类型可以是其它内建类型和 new-style class 的超类. <span class="anchor" id="line-235"></span><span class="anchor" id="line-236"></span></li></ul><p class="line867">
</p><h3 id="A5.2.5.1.2BZbls1YnjZ5CYel6P:">1.6.1. 5.2.5.1方法解析顺序:</h3>
<span class="anchor" id="line-237"></span><p class="line874">在传统对象模型中, 方法和属性按 从左至右 深度优先 的顺序查找. 显然, 当多个父类继承自同一个基类时, 这会产生我们不想要的结果. <span class="anchor" id="line-238"></span>举例来说, A 是 B 和 C 的子类, 而 B 和 C 继承自 D,传统对象模型的的属性查找方法是 A - B - D - C - D. 由于Python先查找 D 后查找 C, 即使 C 对 D 中的方法进行了重定义, 也只能使用 D 中定义的版本. 由于这个继承模式固有的问题, 在实际应用中会造成一些麻烦. <span class="anchor" id="line-239"></span><span class="anchor" id="line-240"></span></p><p class="line874">在新的对象模型中,所有类均直接或间接生成子类对象. python改变了传统对象模型中的解析顺序, 使用上面的例子, 当 D 是一个 new-style class (比如 D 是 object 的直接子类), 新的对象模型的搜索顺序就变为 A - B - C - D. <span class="anchor" id="line-241"></span><span class="anchor" id="line-242"></span></p><p class="line862">每个内建类型及 new-style class 均内建一个特殊的只读属性 <tt class="backtick">__mro__&nbsp;</tt>, 这是一个tuple, 保存着方法解析类型. 只允许通过类来引用 <tt class="backtick">__mro__</tt> (不允许通过实例). <span class="anchor" id="line-243"></span><span class="anchor" id="line-244"></span></p><p class="line867">
</p><h3 id="A5.2.5.2_.2BU09PXF8PjAN1KI2FfHtluWzV-">1.6.2. 5.2.5.2 协作式调用超类方法</h3>
<span class="anchor" id="line-245"></span><p class="line874">前面我们提到, 当一个子类重载了父类中一个方法, 子类中的方法通常要调用父类中的同名方法来做一些事. 这也是python传统对象模型惯用的方式, 即使用非绑定方法语法调用父类的同名方法. 当多继承时, 这种方法是有缺陷的, 见下例: <span class="anchor" id="line-246"></span><span class="anchor" id="line-247"></span><span class="anchor" id="line-248"></span><span class="anchor" id="line-249"></span><span class="anchor" id="line-250"></span><span class="anchor" id="line-251"></span><span class="anchor" id="line-252"></span><span class="anchor" id="line-253"></span><span class="anchor" id="line-254"></span><span class="anchor" id="line-255"></span><span class="anchor" id="line-256"></span><span class="anchor" id="line-257"></span><span class="anchor" id="line-258"></span><span class="anchor" id="line-259"></span><span class="anchor" id="line-260"></span><span class="anchor" id="line-261"></span><span class="anchor" id="line-262"></span><span class="anchor" id="line-263"></span><span class="anchor" id="line-1-27"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_1">   1</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_1"></span><span class="anchor" id="line-1-28"></span><span class="ResWord">class</span> <span class="ID">A</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_2">   2</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_2"></span><span class="anchor" id="line-2-14"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_3">   3</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_3"></span><span class="anchor" id="line-3-12"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">A.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_4">   4</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_4"></span><span class="anchor" id="line-4-8"></span><span class="ResWord">class</span> <span class="ID">B</span>(<span class="ID">A</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_5">   5</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_5"></span><span class="anchor" id="line-5-7"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_6">   6</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_6"></span><span class="anchor" id="line-6-7"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">B.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_7">   7</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_7"></span><span class="anchor" id="line-7-5"></span>        <span class="ID">A</span>.<span class="ID">met</span>(<span class="ResWord">self</span>)</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_8">   8</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_8"></span><span class="anchor" id="line-8-4"></span><span class="ResWord">class</span> <span class="ID">C</span>(<span class="ID">A</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_9">   9</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_9"></span><span class="anchor" id="line-9-3"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_10">  10</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_10"></span><span class="anchor" id="line-10-3"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">C.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_11">  11</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_11"></span><span class="anchor" id="line-11-2"></span>        <span class="ID">A</span>.<span class="ID">met</span>(<span class="ResWord">self</span>)</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_12">  12</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_12"></span><span class="anchor" id="line-12-2"></span><span class="ResWord">class</span> <span class="ID">D</span>(<span class="ID">B</span>,<span class="ID">C</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_13">  13</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_13"></span><span class="anchor" id="line-13-2"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_14">  14</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_14"></span><span class="anchor" id="line-14-2"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">D.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_15">  15</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_15"></span><span class="anchor" id="line-15-1"></span>        <span class="ID">B</span>.<span class="ID">met</span>(<span class="ResWord">self</span>)</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_16">  16</a> </span><span class="LineAnchor" id="CA-7fd077762869e6c0cb91fab8951ec7d44d7beb2d_16"></span><span class="anchor" id="line-16-1"></span>        <span class="ID">C</span>.<span class="ID">met</span>(<span class="ResWord">self</span>)</span>
</pre></div></div><span class="anchor" id="line-264"></span><p class="line874">在上面的代码中, 当我们调用 D().met()方法时, A.met()方法被调用了两次. 我们怎样才可以保证每个父类的实现均被顺序调用且仅仅调用一次呢? 不采取点特殊措施这个问题很难解决. 从 python2.2 起, 提供了这样一个特殊手段. 那就是 super类型. super(aclass,obj) 返回对象 obj 的一个特殊的超对象 (superobject). 当我们调用该超对象的一个属性或方法时, 就保证了每个父类的实现均被调用且仅仅调用一次了. 改写后的代码如下: <span class="anchor" id="line-265"></span><span class="anchor" id="line-266"></span><span class="anchor" id="line-267"></span><span class="anchor" id="line-268"></span><span class="anchor" id="line-269"></span><span class="anchor" id="line-270"></span><span class="anchor" id="line-271"></span><span class="anchor" id="line-272"></span><span class="anchor" id="line-273"></span><span class="anchor" id="line-274"></span><span class="anchor" id="line-275"></span><span class="anchor" id="line-276"></span><span class="anchor" id="line-277"></span><span class="anchor" id="line-278"></span><span class="anchor" id="line-279"></span><span class="anchor" id="line-280"></span><span class="anchor" id="line-281"></span><span class="anchor" id="line-1-29"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-dbf0abe49fbb4be4440844446b867ca1a359a177\', 1, 1);" \
                class="codenumbers">切换行号显示<\/a>');
</script><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" onclick="return togglenumber(&#39;CA-dbf0abe49fbb4be4440844446b867ca1a359a177&#39;, 1, 1);" class="codenumbers">切换行号显示</a>
<pre dir="ltr" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177" lang="en"><span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_1">   1</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_1"></span><span class="anchor" id="line-1-30"></span><span class="ResWord">class</span> <span class="ID">A</span>(<span class="ResWord">object</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_2">   2</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_2"></span><span class="anchor" id="line-2-15"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_3">   3</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_3"></span><span class="anchor" id="line-3-13"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">A.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_4">   4</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_4"></span><span class="anchor" id="line-4-9"></span><span class="ResWord">class</span> <span class="ID">B</span>(<span class="ID">A</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_5">   5</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_5"></span><span class="anchor" id="line-5-8"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_6">   6</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_6"></span><span class="anchor" id="line-6-8"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">B.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_7">   7</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_7"></span><span class="anchor" id="line-7-6"></span>        <span class="ResWord">super</span>(<span class="ID">B</span>,<span class="ResWord">self</span>).<span class="ID">met</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_8">   8</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_8"></span><span class="anchor" id="line-8-5"></span><span class="ResWord">class</span> <span class="ID">C</span>(<span class="ID">A</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_9">   9</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_9"></span><span class="anchor" id="line-9-4"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_10">  10</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_10"></span><span class="anchor" id="line-10-4"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">C.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_11">  11</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_11"></span><span class="anchor" id="line-11-3"></span>        <span class="ResWord">super</span>(<span class="ID">C</span>,<span class="ResWord">self</span>).<span class="ID">met</span>(  )</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_12">  12</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_12"></span><span class="anchor" id="line-12-3"></span><span class="ResWord">class</span> <span class="ID">D</span>(<span class="ID">B</span>,<span class="ID">C</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_13">  13</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_13"></span><span class="anchor" id="line-13-3"></span>    <span class="ResWord">def</span> <span class="ID">met</span>(<span class="ResWord">self</span>):</span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_14">  14</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_14"></span><span class="anchor" id="line-14-3"></span>        <span class="ResWord">print</span> <span class="String">'</span><span class="String">D.met</span><span class="String">'</span></span>
<span class="line"><span class="LineNumber"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#CA-dbf0abe49fbb4be4440844446b867ca1a359a177_15">  15</a> </span><span class="LineAnchor" id="CA-dbf0abe49fbb4be4440844446b867ca1a359a177_15"></span><span class="anchor" id="line-15-2"></span>        <span class="ResWord">super</span>(<span class="ID">D</span>,<span class="ResWord">self</span>).<span class="ID">met</span>(  )</span>
</pre></div></div><span class="anchor" id="line-282"></span><span class="anchor" id="line-283"></span><p class="line874">现在就可以得到期望的结果了. 如果你养成了总是使用superclass调用父类方法,你的类就能适应无论多复杂的继承结构. <span class="anchor" id="line-284"></span><span class="anchor" id="bottom"></span></p></div><p id="pageinfo" class="info" lang="zh" dir="ltr">PyNewStyleClass  (2010-11-04 08:40:13由<span title="WeiZhong @ 203.86.47.82[203.86.47.82]"><a href="http://wiki.woodpecker.org.cn/moin/WeiZhong" title="WeiZhong @ 203.86.47.82[203.86.47.82]">WeiZhong</a></span>编辑)</p>

<div id="pagebottom"></div>
</div>


<div id="footer">
<ul class="editbar"><li><span class="disabled">只读网页</span></li><li class="toggleCommentsButton" style="display:none;"><a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#" class="nbcomment" onclick="toggleComments();return false;">注释</a></li><li><a class="nbinfo" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=info" rel="nofollow">信息</a></li><li><a class="nbattachments" href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass?action=AttachFile" rel="nofollow">附件</a></li><li>
<form class="actionsmenu" method="GET" action="./PyNewStyleClass - Woodpecker Wiki for CPUG_files/PyNewStyleClass - Woodpecker Wiki for CPUG.htm">
<div>
    
    <select name="action" onchange="if ((this.selectedIndex != 0) &amp;&amp;
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="show">更多操作：</option><option value="raw">源码</option>
<option value="print">打印视图</option>
<option value="RenderAsDocbook">输出Docbook格式</option>
<option value="refresh">删除缓存</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="SpellCheck">拼写检查</option>
<option value="LikePages">相似网页</option>
<option value="LocalSiteMap">本站地图</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="RenamePage" disabled="" class="disabled">改名</option>
<option value="DeletePage" disabled="" class="disabled">删除</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">订阅</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="show" disabled="" class="disabled">删除垃圾广告</option>
<option value="show" disabled="" class="disabled">恢复成此版本</option>
<option value="PackagePages">网页打包</option>
<option value="SyncPages">同步网页</option>
<option value="show" disabled="" class="disabled">------------------------</option>
<option value="Load">加载</option>
<option value="Save">保存</option>
<option value="SlideShow">SlideShow</option>
    </select>
    
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('更多操作：');
//-->
</script>
</form>
</li></ul>

<ul id="credits">
<li><a href="http://www.douban.com/">豆瓣</a>赞助</li>
</ul>


</div>

<script type="text/javascript">
 var _gaq = _gaq || [];
 _gaq.push(['_setAccount', 'UA-15620275-1']);
 _gaq.push(['_trackPageview']);
 _gaq.push(['_trackPageLoadTime']);

 (function() {
   var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
   ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
 })();
</script>
<ul id="timings">
<li>Page.execute = 0.112s</li>
<li>getACL = 0.011s</li>
<li>init = 0.001s</li>
<li>load_multi_cfg = 0.000s</li>
<li>run = 0.253s</li>
<li>send_page = 0.241s</li>
<li>send_page_content = 0.114s</li>
<li>send_page_content|1 = 0.042s</li>
<li>send_page|1 = 0.050s</li>
<li>total = 0.254s</li>
</ul>



</body></html>