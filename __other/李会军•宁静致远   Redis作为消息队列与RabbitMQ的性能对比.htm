<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0057)http://devres.zoomquiet.io/data/20110714104018/index.html -->
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">





<link rel="shortcut icon" href="http://devres.zoomquiet.io/data/20110714104018/home.ico" type="image/x-icon"><meta name="keywords" content="RabbitMQ,Redis,Q4M,NoSQL"><meta name="description" content="周末测试了一下RabbitMQ的性能，RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。个人认为，在互联网开发中，使用消息队列，更多的因为在高并发环境下，由于来不及同步处理，请求会发生堵塞，所以我们需要一个队列服务来进行异步的处理，在这种场景下，只要队列服务满足最基本的Push/Pop已经足够了。
Redis是一个Key-Value的NoSQL数据库，开发维护很活跃，虽然它是一个Key-Value数据库存储系统，但它本身支持list数据结构的操作，所以完全可以当做一个轻量级的队列服务来使用。
本文简单对比了Redis作为消息队列和RabbitMQ的性能表现情况。"><meta name="author" content="TerryLee"><link rel="last" title="NodeJS初探" href="http://terrylee.me/blog/post/2011/03/02/nodejs-overview.aspx"><link rel="first" title="重新开博" href="http://terrylee.me/blog/post/2010/09/09/reopen-myblog-at-2010.aspx"><link rel="next" title="使用Proxy和InvocationHandler构建远程代理" href="http://terrylee.me/blog/post/2011/01/22/using-proxy-and-invocationhandler.aspx"><link rel="prev" title="MySQL分布式数据库Proxy解决方案" href="http://terrylee.me/blog/post/2010/12/15/mysql-proxy-overview.aspx"><link type="application/rss+xml" rel="alternate" title="Redis作为消息队列与RabbitMQ的性能对比 (RSS)" href="http://terrylee.me/blog/post/feed/2011/01/09/redis-and-rabbitmq-performance.aspx?format=ATOM"><link type="application/rss+xml" rel="alternate" title="Redis作为消息队列与RabbitMQ的性能对比 (ATOM)" href="http://terrylee.me/blog/post/feed/2011/01/09/redis-and-rabbitmq-performance.aspx?format=ATOM"><link rel="contents" title="Archive" href="http://terrylee.me/blog/archive.aspx"><link rel="start" title="李会军•宁静致远" href="http://terrylee.me/blog/"><link type="application/rdf+xml" rel="meta" title="SIOC" href="http://terrylee.me/blog/sioc.axd"><link type="application/apml+xml" rel="meta" title="APML" href="http://terrylee.me/blog/apml.axd"><link type="application/rdf+xml" rel="meta" title="FOAF" href="http://terrylee.me/blog/foaf.axd"><link type="application/rss+xml" rel="alternate" title="李会军•宁静致远 (RSS)" href="http://terrylee.me/blog/syndication.axd?format=rss"><link type="application/atom+xml" rel="alternate" title="李会军•宁静致远 (ATOM)" href="http://terrylee.me/blog/syndication.axd?format=atom"><link type="application/rsd+xml" rel="edituri" title="RSD" href="http://terrylee.me/blog/rsd.axd"><link type="application/opensearchdescription+xml" rel="search" title="李会军•宁静致远" href="http://terrylee.me/blog/opensearch.axd"><title>
	李会军•宁静致远 | Redis作为消息队列与RabbitMQ的性能对比
</title><link href="chrome://readability/content/style/readability.css" media="screen" type="text/css" rel="stylesheet"><link href="chrome://readability/content/style/readability-print.css" media="print" type="text/css" rel="stylesheet"><style type="text/css"></style></head>
<body class="style-athelas" id="readabilityBody"><div class="style-athelas rdbTypekit" id="readOverlay"><div id="readTools"><a href="http://devres.zoomquiet.io/data/20110714104018/index.html#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://devres.zoomquiet.io/data/20110714104018/index.html#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://devres.zoomquiet.io/data/20110714104018/index.html#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div class="margin-narrow size-medium" id="readInner"><h1>李会军•宁静致远 | Redis作为消息队列与RabbitMQ的性能对比</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>周末测试了一下RabbitMQ的性能，RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。个人认为，在互联网开发中，使用消息队列，更多的因为在高并发环境下，由于来不及同步处理，请求会发生堵塞，所以我们需要一个队列服务来进行异步的处理，在这种场景下，只要队列服务满足最基本的Push/Pop已经足够了。</p><p>Redis是一个Key-Value的NoSQL数据库，开发维护很活跃，虽然它是一个Key-Value数据库存储系统，但它本身支持list数据结构的操作，所以完全可以当做一个轻量级的队列服务来使用。</p><p>本文简单对比了Redis作为消息队列和RabbitMQ的性能表现情况。</p><h2>测试环境</h2><p>1. 硬件环境：在个人笔记本上测试，Server和Client使用同一台机器，硬件信息如下</p><pre class="code">Processor : Inter(R) Core(TM)2 Duo CPU P8400 @2.26GHz
RAM : 4.00GB
Operating System : 32-bit Ubuntu 10.10</pre><p>2. 软件化境：RabbitMQ和Redis的Server启动都是用默认配置，客户端使用Java，JVM启动使用默认参数：</p><pre class="code">RabbitMQ Server 2.2.0
RabbitMQ Java Client 2.2.0

Redis 2.0 Stable
Jedis</pre><p>对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。</p><h2>入队性能对比</h2><p>四种不同大小的数据入队性能对比（RPS）：</p><p><img class=" blockImage" title="mqperformance_001" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image.axd" alt="mqperformance_001" border="0" height="340" width="578"></p><p>测试结果：</p><p><img class=" blockImage" title="mq_table_001" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_001.axd" alt="mq_table_001" border="0" height="160" width="600"></p><p>可以看到对于入队操作，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis慢的无法忍受。</p><h2>出队性能对比</h2><p>四种不同大小的数据出队对比（PRS）：</p><p><img class=" blockImage" title="mqperformance_002" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_002.axd" alt="mqperformance_002" border="0" height="351" width="597"></p><p>测试结果：</p><p><img class=" blockImage" title="mq_table_002" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_003.axd" alt="mq_table_002" border="0" height="160" width="600"></p><p>可以看到对于出队操作，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><h2>Redis入队和出队对比</h2><p>针对Redis入队和出队对比（RPS）：</p><p><img class=" blockImage" title="mqperformance_003" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_004.axd" alt="mqperformance_003" border="0" height="332" width="590"></p><p>测试数据：</p><p><img class=" blockImage" title="mq_table_003" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_005.axd" alt="mq_table_003" border="0" height="160" width="600"></p><p>不管数据大小，Redis的出队性能都表现的非常优秀，而入队性能在数据比较大时，慢的无法忍受。</p><h2>RabbitMQ入队和出队对比</h2><p>针对RabbitMQ的入队和出队对比（RPS）：</p><p><img class=" blockImage" title="mqperformance_004" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_006.axd" alt="mqperformance_004" border="0" height="346" width="593"></p><p>测试数据：</p><p><img class=" blockImage" title="mq_table_004" src="./李会军•宁静致远   Redis作为消息队列与RabbitMQ的性能对比_files/image_007.axd" alt="mq_table_004" border="0" height="160" width="600"></p><p>不管数据大小，RabbitMQ的入队和出队性能都保持一个均衡的状态，但总体上，出队性能远低于入队性能。</p><h2>总结</h2><p>总体看来，<span style="background-color: rgb(102, 102, 102); color: rgb(255, 255, 255); border-bottom: medium dotted rgb(255, 255, 255);" class="linemarker-marked-line">Redis比较适合在Web场景下作为队列服务使用</span>，但当数据比较大的时候，入队性能有些问题，也可能是我配置上不正确，所以还需要进一步研究。而RabbitMQ本身支持太多的协议，不适合在Web环境中使用。另外有一个MySQL的插件<a href="http://q4m.github.com/">Q4M</a>，可以使用SQL语法来操作消息队列，只不过性能表现怎么样，还需要进一步测试。</p></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>李会军•宁静致远 | Redis作为消息队列与RabbitMQ的性能对比</cite><br>http://terrylee.me/blog/post/2011/01/09/redis-and-rabbitmq-performance.aspx</div><div id="rdb-footer-wrapper"><a href="http://readability.com/learn-more" target="_top"><div id="legacy-bkmk"><img alt="Devices" src="chrome://readability/content/images/footer_devices.1298660361.png" height="147" width="99"><div class="block-wrap"><div class="inner"><h4>Sign Up &amp; Read Comfortably—Anytime, Anywhere</h4><p>A subscription to Readability offers great features for mobile reading, saving articles for later and supporting the writers you enjoy. <span class="main-link">Learn More »</span></p></div></div></div></a></div></div></div></div>


</body></html>